/* 
 * eCommerce
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.ErpApi.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.ErpApi.Model
{
    /// <summary>
    /// SimulateOrderResponseRootZWEBORDERSTATUS
    /// </summary>
    [DataContract]
    public partial class SimulateOrderResponseRootZWEBORDERSTATUS :  IEquatable<SimulateOrderResponseRootZWEBORDERSTATUS>, IValidatableObject
    {


        /// <summary>
        /// Initializes a new instance of the <see cref="SimulateOrderResponseRootZWEBORDERSTATUS" /> class.
        /// </summary>
        /// <param name="FREIGHT">FREIGHT.</param>
        /// <param name="HANDLING">HANDLING.</param>
        /// <param name="DISCOUNT">DISCOUNT.</param>
        /// <param name="NET_VALUE">NET_VALUE.</param>
        /// <param name="SHIP_POINT">SHIP_POINT.</param>
        public SimulateOrderResponseRootZWEBORDERSTATUS(double? FREIGHT = default(double?), double? HANDLING = default(double?), double? DISCOUNT = default(double?), double? NET_VALUE = default(double?), string SHIP_POINT = default(string), string ITM_NUMBER = default(string))
        {
            this.FREIGHT = FREIGHT;
            this.HANDLING = HANDLING;
            this.DISCOUNT = DISCOUNT;
            this.NET_VALUE = NET_VALUE;
            this.SHIP_POINT = SHIP_POINT;
            this.ITM_NUMBER = ITM_NUMBER;
        }
        
        /// <summary>
        /// Gets or Sets FREIGHT
        /// </summary>
        [DataMember(Name="FREIGHT", EmitDefaultValue=false)]
        public double? FREIGHT { get; set; }

        /// <summary>
        /// Gets or Sets HANDLING
        /// </summary>
        [DataMember(Name="HANDLING", EmitDefaultValue=false)]
        public double? HANDLING { get; set; }

        /// <summary>
        /// Gets or Sets DISCOUNT
        /// </summary>
        [DataMember(Name="DISCOUNT", EmitDefaultValue=false)]
        public double? DISCOUNT { get; set; }

        /// <summary>
        /// Gets or Sets NET_VALUE
        /// </summary>
        [DataMember(Name="NET_VALUE", EmitDefaultValue=false)]
        public double? NET_VALUE { get; set; }

        /// <summary>
        /// Gets or Sets SHIP_POINT
        /// </summary>
        [DataMember(Name="SHIP_POINT", EmitDefaultValue=false)]
        public string SHIP_POINT { get; set; }

        [DataMember(Name = "ITM_NUMBER", EmitDefaultValue = false)]
        public string ITM_NUMBER { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SimulateOrderResponseRootZWEBORDERSTATUS {\n");
            sb.Append("  FREIGHT: ").Append(FREIGHT).Append("\n");
            sb.Append("  HANDLING: ").Append(HANDLING).Append("\n");
            sb.Append("  DISCOUNT: ").Append(DISCOUNT).Append("\n");
            sb.Append("  NET_VALUE: ").Append(NET_VALUE).Append("\n");
            sb.Append("  SHIP_POINT: ").Append(SHIP_POINT).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SimulateOrderResponseRootZWEBORDERSTATUS);
        }

        /// <summary>
        /// Returns true if SimulateOrderResponseRootZWEBORDERSTATUS instances are equal
        /// </summary>
        /// <param name="input">Instance of SimulateOrderResponseRootZWEBORDERSTATUS to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimulateOrderResponseRootZWEBORDERSTATUS input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FREIGHT == input.FREIGHT ||
                    (this.FREIGHT != null &&
                    this.FREIGHT.Equals(input.FREIGHT))
                ) && 
                (
                    this.HANDLING == input.HANDLING ||
                    (this.HANDLING != null &&
                    this.HANDLING.Equals(input.HANDLING))
                ) && 
                (
                    this.DISCOUNT == input.DISCOUNT ||
                    (this.DISCOUNT != null &&
                    this.DISCOUNT.Equals(input.DISCOUNT))
                ) && 
                (
                    this.NET_VALUE == input.NET_VALUE ||
                    (this.NET_VALUE != null &&
                    this.NET_VALUE.Equals(input.NET_VALUE))
                ) && 
                (
                    this.SHIP_POINT == input.SHIP_POINT ||
                    (this.SHIP_POINT != null &&
                    this.SHIP_POINT.Equals(input.SHIP_POINT))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FREIGHT != null)
                    hashCode = hashCode * 59 + this.FREIGHT.GetHashCode();
                if (this.HANDLING != null)
                    hashCode = hashCode * 59 + this.HANDLING.GetHashCode();
                if (this.DISCOUNT != null)
                    hashCode = hashCode * 59 + this.DISCOUNT.GetHashCode();
                if (this.NET_VALUE != null)
                    hashCode = hashCode * 59 + this.NET_VALUE.GetHashCode();
                if (this.SHIP_POINT != null)
                    hashCode = hashCode * 59 + this.SHIP_POINT.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
