/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// CommerceItemDto
    /// </summary>
    [DataContract]
    public partial class CommerceItemDto :  IEquatable<CommerceItemDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommerceItemDto" /> class.
        /// </summary>
        /// <param name="AvailableDate">AvailableDate.</param>
        /// <param name="Carrier">Carrier.</param>
        /// <param name="CreationDate">CreationDate.</param>
        /// <param name="ExpectedShipDate">ExpectedShipDate.</param>
        /// <param name="FreshLotDate">FreshLotDate.</param>
        /// <param name="Id">Id.</param>
        /// <param name="IssuedDate">IssuedDate.</param>
        /// <param name="LineNumber">LineNumber.</param>
        /// <param name="PartNumber">PartNumber.</param>
        /// <param name="PickedUpFromMIT">PickedUpFromMIT.</param>
        /// <param name="PromoCode">PromoCode.</param>
        /// <param name="PromoDescription">PromoDescription.</param>
        /// <param name="Quantity">Quantity.</param>
        /// <param name="ReceivedAtMIT">ReceivedAtMIT.</param>
        /// <param name="ReleasedFromMIT">ReleasedFromMIT.</param>
        /// <param name="ReplacementPartNumber">ReplacementPartNumber.</param>
        /// <param name="ShipASAP">ShipASAP.</param>
        /// <param name="ShipWhenInStock">ShipWhenInStock.</param>
        /// <param name="ShipmentCreatedOn">ShipmentCreatedOn.</param>
        /// <param name="ShipmentDate">ShipmentDate.</param>
        /// <param name="ShipmentRoute">ShipmentRoute.</param>
        /// <param name="ShippingPoint">ShippingPoint.</param>
        /// <param name="Status">Status.</param>
        /// <param name="TotalQuantity">TotalQuantity.</param>
        /// <param name="TrackingURL">TrackingURL.</param>
        /// <param name="ItemPrice">ItemPrice.</param>
        /// <param name="ItemDetail">ItemDetail.</param>
        public CommerceItemDto(DateTime? AvailableDate = default(DateTime?), string Carrier = default(string), DateTime? CreationDate = default(DateTime?), DateTime? ExpectedShipDate = default(DateTime?), int? FreshLotDate = default(int?), string Id = default(string), DateTime? IssuedDate = default(DateTime?), string LineNumber = default(string), string PartNumber = default(string), DateTime? PickedUpFromMIT = default(DateTime?), string PromoCode = default(string), string PromoDescription = default(string), long? Quantity = default(long?), DateTime? ReceivedAtMIT = default(DateTime?), DateTime? ReleasedFromMIT = default(DateTime?), string ReplacementPartNumber = default(string), int? ShipASAP = default(int?), bool? ShipWhenInStock = default(bool?), DateTime? ShipmentCreatedOn = default(DateTime?), DateTime? ShipmentDate = default(DateTime?), string ShipmentRoute = default(string), string ShippingPoint = default(string), string Status = default(string), long? TotalQuantity = default(long?), string TrackingURL = default(string), ItemPriceDto ItemPrice = default(ItemPriceDto), ItemDetailDto ItemDetail = default(ItemDetailDto))
        {
            this.AvailableDate = AvailableDate;
            this.Carrier = Carrier;
            this.CreationDate = CreationDate;
            this.ExpectedShipDate = ExpectedShipDate;
            this.FreshLotDate = FreshLotDate;
            this.Id = Id;
            this.IssuedDate = IssuedDate;
            this.LineNumber = LineNumber;
            this.PartNumber = PartNumber;
            this.PickedUpFromMIT = PickedUpFromMIT;
            this.PromoCode = PromoCode;
            this.PromoDescription = PromoDescription;
            this.Quantity = Quantity;
            this.ReceivedAtMIT = ReceivedAtMIT;
            this.ReleasedFromMIT = ReleasedFromMIT;
            this.ReplacementPartNumber = ReplacementPartNumber;
            this.ShipASAP = ShipASAP;
            this.ShipWhenInStock = ShipWhenInStock;
            this.ShipmentCreatedOn = ShipmentCreatedOn;
            this.ShipmentDate = ShipmentDate;
            this.ShipmentRoute = ShipmentRoute;
            this.ShippingPoint = ShippingPoint;
            this.Status = Status;
            this.TotalQuantity = TotalQuantity;
            this.TrackingURL = TrackingURL;
            this.ItemPrice = ItemPrice;
            this.ItemDetail = ItemDetail;
        }
        
        /// <summary>
        /// Gets or Sets AvailableDate
        /// </summary>
        [DataMember(Name="availableDate", EmitDefaultValue=false)]
        public DateTime? AvailableDate { get; set; }

        /// <summary>
        /// Gets or Sets Carrier
        /// </summary>
        [DataMember(Name="carrier", EmitDefaultValue=false)]
        public string Carrier { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpectedShipDate
        /// </summary>
        [DataMember(Name="expectedShipDate", EmitDefaultValue=false)]
        public DateTime? ExpectedShipDate { get; set; }

        /// <summary>
        /// Gets or Sets FreshLotDate
        /// </summary>
        [DataMember(Name="freshLotDate", EmitDefaultValue=false)]
        public int? FreshLotDate { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IssuedDate
        /// </summary>
        [DataMember(Name="issuedDate", EmitDefaultValue=false)]
        public DateTime? IssuedDate { get; set; }

        /// <summary>
        /// Gets or Sets LineNumber
        /// </summary>
        [DataMember(Name="lineNumber", EmitDefaultValue=false)]
        public string LineNumber { get; set; }

        /// <summary>
        /// Gets or Sets PartNumber
        /// </summary>
        [DataMember(Name="partNumber", EmitDefaultValue=false)]
        public string PartNumber { get; set; }

        /// <summary>
        /// Gets or Sets PickedUpFromMIT
        /// </summary>
        [DataMember(Name="pickedUpFromMIT", EmitDefaultValue=false)]
        public DateTime? PickedUpFromMIT { get; set; }

        /// <summary>
        /// Gets or Sets PromoCode
        /// </summary>
        [DataMember(Name="promoCode", EmitDefaultValue=false)]
        public string PromoCode { get; set; }

        /// <summary>
        /// Gets or Sets PromoDescription
        /// </summary>
        [DataMember(Name="promoDescription", EmitDefaultValue=false)]
        public string PromoDescription { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public long? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets ReceivedAtMIT
        /// </summary>
        [DataMember(Name="receivedAtMIT", EmitDefaultValue=false)]
        public DateTime? ReceivedAtMIT { get; set; }

        /// <summary>
        /// Gets or Sets ReleasedFromMIT
        /// </summary>
        [DataMember(Name="releasedFromMIT", EmitDefaultValue=false)]
        public DateTime? ReleasedFromMIT { get; set; }

        /// <summary>
        /// Gets or Sets ReplacementPartNumber
        /// </summary>
        [DataMember(Name="replacementPartNumber", EmitDefaultValue=false)]
        public string ReplacementPartNumber { get; set; }

        /// <summary>
        /// Gets or Sets ShipASAP
        /// </summary>
        [DataMember(Name="shipASAP", EmitDefaultValue=false)]
        public int? ShipASAP { get; set; }

        /// <summary>
        /// Gets or Sets ShipWhenInStock
        /// </summary>
        [DataMember(Name="shipWhenInStock", EmitDefaultValue=false)]
        public bool? ShipWhenInStock { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentCreatedOn
        /// </summary>
        [DataMember(Name="shipmentCreatedOn", EmitDefaultValue=false)]
        public DateTime? ShipmentCreatedOn { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentDate
        /// </summary>
        [DataMember(Name="shipmentDate", EmitDefaultValue=false)]
        public DateTime? ShipmentDate { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentRoute
        /// </summary>
        [DataMember(Name="shipmentRoute", EmitDefaultValue=false)]
        public string ShipmentRoute { get; set; }

        /// <summary>
        /// Gets or Sets ShippingPoint
        /// </summary>
        [DataMember(Name="shippingPoint", EmitDefaultValue=false)]
        public string ShippingPoint { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets TotalQuantity
        /// </summary>
        [DataMember(Name="totalQuantity", EmitDefaultValue=false)]
        public long? TotalQuantity { get; set; }

        /// <summary>
        /// Gets or Sets TrackingURL
        /// </summary>
        [DataMember(Name="trackingURL", EmitDefaultValue=false)]
        public string TrackingURL { get; set; }

        /// <summary>
        /// Gets or Sets ItemPrice
        /// </summary>
        [DataMember(Name="itemPrice", EmitDefaultValue=false)]
        public ItemPriceDto ItemPrice { get; set; }

        /// <summary>
        /// Gets or Sets ItemDetail
        /// </summary>
        [DataMember(Name="itemDetail", EmitDefaultValue=false)]
        public ItemDetailDto ItemDetail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommerceItemDto {\n");
            sb.Append("  AvailableDate: ").Append(AvailableDate).Append("\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  ExpectedShipDate: ").Append(ExpectedShipDate).Append("\n");
            sb.Append("  FreshLotDate: ").Append(FreshLotDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IssuedDate: ").Append(IssuedDate).Append("\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("  PartNumber: ").Append(PartNumber).Append("\n");
            sb.Append("  PickedUpFromMIT: ").Append(PickedUpFromMIT).Append("\n");
            sb.Append("  PromoCode: ").Append(PromoCode).Append("\n");
            sb.Append("  PromoDescription: ").Append(PromoDescription).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ReceivedAtMIT: ").Append(ReceivedAtMIT).Append("\n");
            sb.Append("  ReleasedFromMIT: ").Append(ReleasedFromMIT).Append("\n");
            sb.Append("  ReplacementPartNumber: ").Append(ReplacementPartNumber).Append("\n");
            sb.Append("  ShipASAP: ").Append(ShipASAP).Append("\n");
            sb.Append("  ShipWhenInStock: ").Append(ShipWhenInStock).Append("\n");
            sb.Append("  ShipmentCreatedOn: ").Append(ShipmentCreatedOn).Append("\n");
            sb.Append("  ShipmentDate: ").Append(ShipmentDate).Append("\n");
            sb.Append("  ShipmentRoute: ").Append(ShipmentRoute).Append("\n");
            sb.Append("  ShippingPoint: ").Append(ShippingPoint).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TotalQuantity: ").Append(TotalQuantity).Append("\n");
            sb.Append("  TrackingURL: ").Append(TrackingURL).Append("\n");
            sb.Append("  ItemPrice: ").Append(ItemPrice).Append("\n");
            sb.Append("  ItemDetail: ").Append(ItemDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommerceItemDto);
        }

        /// <summary>
        /// Returns true if CommerceItemDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CommerceItemDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommerceItemDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AvailableDate == input.AvailableDate ||
                    (this.AvailableDate != null &&
                    this.AvailableDate.Equals(input.AvailableDate))
                ) && 
                (
                    this.Carrier == input.Carrier ||
                    (this.Carrier != null &&
                    this.Carrier.Equals(input.Carrier))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.ExpectedShipDate == input.ExpectedShipDate ||
                    (this.ExpectedShipDate != null &&
                    this.ExpectedShipDate.Equals(input.ExpectedShipDate))
                ) && 
                (
                    this.FreshLotDate == input.FreshLotDate ||
                    (this.FreshLotDate != null &&
                    this.FreshLotDate.Equals(input.FreshLotDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IssuedDate == input.IssuedDate ||
                    (this.IssuedDate != null &&
                    this.IssuedDate.Equals(input.IssuedDate))
                ) && 
                (
                    this.LineNumber == input.LineNumber ||
                    (this.LineNumber != null &&
                    this.LineNumber.Equals(input.LineNumber))
                ) && 
                (
                    this.PartNumber == input.PartNumber ||
                    (this.PartNumber != null &&
                    this.PartNumber.Equals(input.PartNumber))
                ) && 
                (
                    this.PickedUpFromMIT == input.PickedUpFromMIT ||
                    (this.PickedUpFromMIT != null &&
                    this.PickedUpFromMIT.Equals(input.PickedUpFromMIT))
                ) && 
                (
                    this.PromoCode == input.PromoCode ||
                    (this.PromoCode != null &&
                    this.PromoCode.Equals(input.PromoCode))
                ) && 
                (
                    this.PromoDescription == input.PromoDescription ||
                    (this.PromoDescription != null &&
                    this.PromoDescription.Equals(input.PromoDescription))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.ReceivedAtMIT == input.ReceivedAtMIT ||
                    (this.ReceivedAtMIT != null &&
                    this.ReceivedAtMIT.Equals(input.ReceivedAtMIT))
                ) && 
                (
                    this.ReleasedFromMIT == input.ReleasedFromMIT ||
                    (this.ReleasedFromMIT != null &&
                    this.ReleasedFromMIT.Equals(input.ReleasedFromMIT))
                ) && 
                (
                    this.ReplacementPartNumber == input.ReplacementPartNumber ||
                    (this.ReplacementPartNumber != null &&
                    this.ReplacementPartNumber.Equals(input.ReplacementPartNumber))
                ) && 
                (
                    this.ShipASAP == input.ShipASAP ||
                    (this.ShipASAP != null &&
                    this.ShipASAP.Equals(input.ShipASAP))
                ) && 
                (
                    this.ShipWhenInStock == input.ShipWhenInStock ||
                    (this.ShipWhenInStock != null &&
                    this.ShipWhenInStock.Equals(input.ShipWhenInStock))
                ) && 
                (
                    this.ShipmentCreatedOn == input.ShipmentCreatedOn ||
                    (this.ShipmentCreatedOn != null &&
                    this.ShipmentCreatedOn.Equals(input.ShipmentCreatedOn))
                ) && 
                (
                    this.ShipmentDate == input.ShipmentDate ||
                    (this.ShipmentDate != null &&
                    this.ShipmentDate.Equals(input.ShipmentDate))
                ) && 
                (
                    this.ShipmentRoute == input.ShipmentRoute ||
                    (this.ShipmentRoute != null &&
                    this.ShipmentRoute.Equals(input.ShipmentRoute))
                ) && 
                (
                    this.ShippingPoint == input.ShippingPoint ||
                    (this.ShippingPoint != null &&
                    this.ShippingPoint.Equals(input.ShippingPoint))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TotalQuantity == input.TotalQuantity ||
                    (this.TotalQuantity != null &&
                    this.TotalQuantity.Equals(input.TotalQuantity))
                ) && 
                (
                    this.TrackingURL == input.TrackingURL ||
                    (this.TrackingURL != null &&
                    this.TrackingURL.Equals(input.TrackingURL))
                ) && 
                (
                    this.ItemPrice == input.ItemPrice ||
                    (this.ItemPrice != null &&
                    this.ItemPrice.Equals(input.ItemPrice))
                ) && 
                (
                    this.ItemDetail == input.ItemDetail ||
                    (this.ItemDetail != null &&
                    this.ItemDetail.Equals(input.ItemDetail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AvailableDate != null)
                    hashCode = hashCode * 59 + this.AvailableDate.GetHashCode();
                if (this.Carrier != null)
                    hashCode = hashCode * 59 + this.Carrier.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.ExpectedShipDate != null)
                    hashCode = hashCode * 59 + this.ExpectedShipDate.GetHashCode();
                if (this.FreshLotDate != null)
                    hashCode = hashCode * 59 + this.FreshLotDate.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IssuedDate != null)
                    hashCode = hashCode * 59 + this.IssuedDate.GetHashCode();
                if (this.LineNumber != null)
                    hashCode = hashCode * 59 + this.LineNumber.GetHashCode();
                if (this.PartNumber != null)
                    hashCode = hashCode * 59 + this.PartNumber.GetHashCode();
                if (this.PickedUpFromMIT != null)
                    hashCode = hashCode * 59 + this.PickedUpFromMIT.GetHashCode();
                if (this.PromoCode != null)
                    hashCode = hashCode * 59 + this.PromoCode.GetHashCode();
                if (this.PromoDescription != null)
                    hashCode = hashCode * 59 + this.PromoDescription.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.ReceivedAtMIT != null)
                    hashCode = hashCode * 59 + this.ReceivedAtMIT.GetHashCode();
                if (this.ReleasedFromMIT != null)
                    hashCode = hashCode * 59 + this.ReleasedFromMIT.GetHashCode();
                if (this.ReplacementPartNumber != null)
                    hashCode = hashCode * 59 + this.ReplacementPartNumber.GetHashCode();
                if (this.ShipASAP != null)
                    hashCode = hashCode * 59 + this.ShipASAP.GetHashCode();
                if (this.ShipWhenInStock != null)
                    hashCode = hashCode * 59 + this.ShipWhenInStock.GetHashCode();
                if (this.ShipmentCreatedOn != null)
                    hashCode = hashCode * 59 + this.ShipmentCreatedOn.GetHashCode();
                if (this.ShipmentDate != null)
                    hashCode = hashCode * 59 + this.ShipmentDate.GetHashCode();
                if (this.ShipmentRoute != null)
                    hashCode = hashCode * 59 + this.ShipmentRoute.GetHashCode();
                if (this.ShippingPoint != null)
                    hashCode = hashCode * 59 + this.ShippingPoint.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TotalQuantity != null)
                    hashCode = hashCode * 59 + this.TotalQuantity.GetHashCode();
                if (this.TrackingURL != null)
                    hashCode = hashCode * 59 + this.TrackingURL.GetHashCode();
                if (this.ItemPrice != null)
                    hashCode = hashCode * 59 + this.ItemPrice.GetHashCode();
                if (this.ItemDetail != null)
                    hashCode = hashCode * 59 + this.ItemDetail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
