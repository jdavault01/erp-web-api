/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// UserDto
    /// </summary>
    [DataContract]
    public partial class UserDto :  IEquatable<UserDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserDto" /> class.
        /// </summary>
        /// <param name="AccountNumber">AccountNumber.</param>
        /// <param name="ActiveCountry">ActiveCountry.</param>
        /// <param name="ActiveLanguage">ActiveLanguage.</param>
        /// <param name="ActiveUser">ActiveUser.</param>
        /// <param name="ContactId">ContactId.</param>
        /// <param name="Dealer">Dealer.</param>
        /// <param name="Email">Email.</param>
        /// <param name="ErpHierarchyNumber">ErpHierarchyNumber.</param>
        /// <param name="FirstName">FirstName.</param>
        /// <param name="LastName">LastName.</param>
        /// <param name="LogonName">LogonName.</param>
        /// <param name="NumberOfLoginAttempts">NumberOfLoginAttempts.</param>
        /// <param name="OrderCount">OrderCount.</param>
        /// <param name="PunchOutSpecialUser">PunchOutSpecialUser.</param>
        /// <param name="PunchOutUser">PunchOutUser.</param>
        /// <param name="PunchoutCompanyCode">PunchoutCompanyCode.</param>
        /// <param name="RadPreference">RadPreference.</param>
        /// <param name="Token">Token.</param>
        /// <param name="UserId">UserId.</param>
        /// <param name="Site">Site.</param>
        /// <param name="CompanyAddress">CompanyAddress.</param>
        /// <param name="ShippingAddress">ShippingAddress.</param>
        /// <param name="BillingAddress">BillingAddress.</param>
        /// <param name="AdditionalEmailNotifications">AdditionalEmailNotifications.</param>
        /// <param name="SalesOrganization">SalesOrganization.</param>
        /// <param name="PriceBook">PriceBook.</param>
        public UserDto(string AccountNumber = default(string), string ActiveCountry = default(string), string ActiveLanguage = default(string), bool? ActiveUser = default(bool?), string ContactId = default(string), bool? Dealer = default(bool?), string Email = default(string), string ErpHierarchyNumber = default(string), string FirstName = default(string), string LastName = default(string), string LogonName = default(string), int? NumberOfLoginAttempts = default(int?), int? OrderCount = default(int?), bool? PunchOutSpecialUser = default(bool?), bool? PunchOutUser = default(bool?), string PunchoutCompanyCode = default(string), bool? RadPreference = default(bool?), string Token = default(string), string UserId = default(string), SiteConfigDto Site = default(SiteConfigDto), AddressDto CompanyAddress = default(AddressDto), AddressDto ShippingAddress = default(AddressDto), AddressDto BillingAddress = default(AddressDto), List<AdditionalEmailNotificationDto> AdditionalEmailNotifications = default(List<AdditionalEmailNotificationDto>), SalesOrganizationDto SalesOrganization = default(SalesOrganizationDto), PriceBookDto PriceBook = default(PriceBookDto))
        {
            this.AccountNumber = AccountNumber;
            this.ActiveCountry = ActiveCountry;
            this.ActiveLanguage = ActiveLanguage;
            this.ActiveUser = ActiveUser;
            this.ContactId = ContactId;
            this.Dealer = Dealer;
            this.Email = Email;
            this.ErpHierarchyNumber = ErpHierarchyNumber;
            this.FirstName = FirstName;
            this.LastName = LastName;
            this.LogonName = LogonName;
            this.NumberOfLoginAttempts = NumberOfLoginAttempts;
            this.OrderCount = OrderCount;
            this.PunchOutSpecialUser = PunchOutSpecialUser;
            this.PunchOutUser = PunchOutUser;
            this.PunchoutCompanyCode = PunchoutCompanyCode;
            this.RadPreference = RadPreference;
            this.Token = Token;
            this.UserId = UserId;
            this.Site = Site;
            this.CompanyAddress = CompanyAddress;
            this.ShippingAddress = ShippingAddress;
            this.BillingAddress = BillingAddress;
            this.AdditionalEmailNotifications = AdditionalEmailNotifications;
            this.SalesOrganization = SalesOrganization;
            this.PriceBook = PriceBook;
        }
        
        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name="accountNumber", EmitDefaultValue=false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets ActiveCountry
        /// </summary>
        [DataMember(Name="activeCountry", EmitDefaultValue=false)]
        public string ActiveCountry { get; set; }

        /// <summary>
        /// Gets or Sets ActiveLanguage
        /// </summary>
        [DataMember(Name="activeLanguage", EmitDefaultValue=false)]
        public string ActiveLanguage { get; set; }

        /// <summary>
        /// Gets or Sets ActiveUser
        /// </summary>
        [DataMember(Name="activeUser", EmitDefaultValue=false)]
        public bool? ActiveUser { get; set; }

        /// <summary>
        /// Gets or Sets ContactId
        /// </summary>
        [DataMember(Name="contactId", EmitDefaultValue=false)]
        public string ContactId { get; set; }

        /// <summary>
        /// Gets or Sets Dealer
        /// </summary>
        [DataMember(Name="dealer", EmitDefaultValue=false)]
        public bool? Dealer { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets ErpHierarchyNumber
        /// </summary>
        [DataMember(Name="erpHierarchyNumber", EmitDefaultValue=false)]
        public string ErpHierarchyNumber { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets LogonName
        /// </summary>
        [DataMember(Name="logonName", EmitDefaultValue=false)]
        public string LogonName { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfLoginAttempts
        /// </summary>
        [DataMember(Name="numberOfLoginAttempts", EmitDefaultValue=false)]
        public int? NumberOfLoginAttempts { get; set; }

        /// <summary>
        /// Gets or Sets OrderCount
        /// </summary>
        [DataMember(Name="orderCount", EmitDefaultValue=false)]
        public int? OrderCount { get; set; }

        /// <summary>
        /// Gets or Sets PunchOutSpecialUser
        /// </summary>
        [DataMember(Name="punchOutSpecialUser", EmitDefaultValue=false)]
        public bool? PunchOutSpecialUser { get; set; }

        /// <summary>
        /// Gets or Sets PunchOutUser
        /// </summary>
        [DataMember(Name="punchOutUser", EmitDefaultValue=false)]
        public bool? PunchOutUser { get; set; }

        /// <summary>
        /// Gets or Sets PunchoutCompanyCode
        /// </summary>
        [DataMember(Name="punchoutCompanyCode", EmitDefaultValue=false)]
        public string PunchoutCompanyCode { get; set; }

        /// <summary>
        /// Gets or Sets RadPreference
        /// </summary>
        [DataMember(Name="radPreference", EmitDefaultValue=false)]
        public bool? RadPreference { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets Site
        /// </summary>
        [DataMember(Name="site", EmitDefaultValue=false)]
        public SiteConfigDto Site { get; set; }

        /// <summary>
        /// Gets or Sets CompanyAddress
        /// </summary>
        [DataMember(Name="companyAddress", EmitDefaultValue=false)]
        public AddressDto CompanyAddress { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddress
        /// </summary>
        [DataMember(Name="shippingAddress", EmitDefaultValue=false)]
        public AddressDto ShippingAddress { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name="billingAddress", EmitDefaultValue=false)]
        public AddressDto BillingAddress { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalEmailNotifications
        /// </summary>
        [DataMember(Name="additionalEmailNotifications", EmitDefaultValue=false)]
        public List<AdditionalEmailNotificationDto> AdditionalEmailNotifications { get; set; }

        /// <summary>
        /// Gets or Sets SalesOrganization
        /// </summary>
        [DataMember(Name="salesOrganization", EmitDefaultValue=false)]
        public SalesOrganizationDto SalesOrganization { get; set; }

        /// <summary>
        /// Gets or Sets PriceBook
        /// </summary>
        [DataMember(Name="priceBook", EmitDefaultValue=false)]
        public PriceBookDto PriceBook { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserDto {\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  ActiveCountry: ").Append(ActiveCountry).Append("\n");
            sb.Append("  ActiveLanguage: ").Append(ActiveLanguage).Append("\n");
            sb.Append("  ActiveUser: ").Append(ActiveUser).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  Dealer: ").Append(Dealer).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ErpHierarchyNumber: ").Append(ErpHierarchyNumber).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  LogonName: ").Append(LogonName).Append("\n");
            sb.Append("  NumberOfLoginAttempts: ").Append(NumberOfLoginAttempts).Append("\n");
            sb.Append("  OrderCount: ").Append(OrderCount).Append("\n");
            sb.Append("  PunchOutSpecialUser: ").Append(PunchOutSpecialUser).Append("\n");
            sb.Append("  PunchOutUser: ").Append(PunchOutUser).Append("\n");
            sb.Append("  PunchoutCompanyCode: ").Append(PunchoutCompanyCode).Append("\n");
            sb.Append("  RadPreference: ").Append(RadPreference).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("  CompanyAddress: ").Append(CompanyAddress).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  AdditionalEmailNotifications: ").Append(AdditionalEmailNotifications).Append("\n");
            sb.Append("  SalesOrganization: ").Append(SalesOrganization).Append("\n");
            sb.Append("  PriceBook: ").Append(PriceBook).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserDto);
        }

        /// <summary>
        /// Returns true if UserDto instances are equal
        /// </summary>
        /// <param name="input">Instance of UserDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.ActiveCountry == input.ActiveCountry ||
                    (this.ActiveCountry != null &&
                    this.ActiveCountry.Equals(input.ActiveCountry))
                ) && 
                (
                    this.ActiveLanguage == input.ActiveLanguage ||
                    (this.ActiveLanguage != null &&
                    this.ActiveLanguage.Equals(input.ActiveLanguage))
                ) && 
                (
                    this.ActiveUser == input.ActiveUser ||
                    (this.ActiveUser != null &&
                    this.ActiveUser.Equals(input.ActiveUser))
                ) && 
                (
                    this.ContactId == input.ContactId ||
                    (this.ContactId != null &&
                    this.ContactId.Equals(input.ContactId))
                ) && 
                (
                    this.Dealer == input.Dealer ||
                    (this.Dealer != null &&
                    this.Dealer.Equals(input.Dealer))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.ErpHierarchyNumber == input.ErpHierarchyNumber ||
                    (this.ErpHierarchyNumber != null &&
                    this.ErpHierarchyNumber.Equals(input.ErpHierarchyNumber))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.LogonName == input.LogonName ||
                    (this.LogonName != null &&
                    this.LogonName.Equals(input.LogonName))
                ) && 
                (
                    this.NumberOfLoginAttempts == input.NumberOfLoginAttempts ||
                    (this.NumberOfLoginAttempts != null &&
                    this.NumberOfLoginAttempts.Equals(input.NumberOfLoginAttempts))
                ) && 
                (
                    this.OrderCount == input.OrderCount ||
                    (this.OrderCount != null &&
                    this.OrderCount.Equals(input.OrderCount))
                ) && 
                (
                    this.PunchOutSpecialUser == input.PunchOutSpecialUser ||
                    (this.PunchOutSpecialUser != null &&
                    this.PunchOutSpecialUser.Equals(input.PunchOutSpecialUser))
                ) && 
                (
                    this.PunchOutUser == input.PunchOutUser ||
                    (this.PunchOutUser != null &&
                    this.PunchOutUser.Equals(input.PunchOutUser))
                ) && 
                (
                    this.PunchoutCompanyCode == input.PunchoutCompanyCode ||
                    (this.PunchoutCompanyCode != null &&
                    this.PunchoutCompanyCode.Equals(input.PunchoutCompanyCode))
                ) && 
                (
                    this.RadPreference == input.RadPreference ||
                    (this.RadPreference != null &&
                    this.RadPreference.Equals(input.RadPreference))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Site == input.Site ||
                    (this.Site != null &&
                    this.Site.Equals(input.Site))
                ) && 
                (
                    this.CompanyAddress == input.CompanyAddress ||
                    (this.CompanyAddress != null &&
                    this.CompanyAddress.Equals(input.CompanyAddress))
                ) && 
                (
                    this.ShippingAddress == input.ShippingAddress ||
                    (this.ShippingAddress != null &&
                    this.ShippingAddress.Equals(input.ShippingAddress))
                ) && 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.AdditionalEmailNotifications == input.AdditionalEmailNotifications ||
                    this.AdditionalEmailNotifications != null &&
                    this.AdditionalEmailNotifications.SequenceEqual(input.AdditionalEmailNotifications)
                ) && 
                (
                    this.SalesOrganization == input.SalesOrganization ||
                    (this.SalesOrganization != null &&
                    this.SalesOrganization.Equals(input.SalesOrganization))
                ) && 
                (
                    this.PriceBook == input.PriceBook ||
                    (this.PriceBook != null &&
                    this.PriceBook.Equals(input.PriceBook))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.ActiveCountry != null)
                    hashCode = hashCode * 59 + this.ActiveCountry.GetHashCode();
                if (this.ActiveLanguage != null)
                    hashCode = hashCode * 59 + this.ActiveLanguage.GetHashCode();
                if (this.ActiveUser != null)
                    hashCode = hashCode * 59 + this.ActiveUser.GetHashCode();
                if (this.ContactId != null)
                    hashCode = hashCode * 59 + this.ContactId.GetHashCode();
                if (this.Dealer != null)
                    hashCode = hashCode * 59 + this.Dealer.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.ErpHierarchyNumber != null)
                    hashCode = hashCode * 59 + this.ErpHierarchyNumber.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.LogonName != null)
                    hashCode = hashCode * 59 + this.LogonName.GetHashCode();
                if (this.NumberOfLoginAttempts != null)
                    hashCode = hashCode * 59 + this.NumberOfLoginAttempts.GetHashCode();
                if (this.OrderCount != null)
                    hashCode = hashCode * 59 + this.OrderCount.GetHashCode();
                if (this.PunchOutSpecialUser != null)
                    hashCode = hashCode * 59 + this.PunchOutSpecialUser.GetHashCode();
                if (this.PunchOutUser != null)
                    hashCode = hashCode * 59 + this.PunchOutUser.GetHashCode();
                if (this.PunchoutCompanyCode != null)
                    hashCode = hashCode * 59 + this.PunchoutCompanyCode.GetHashCode();
                if (this.RadPreference != null)
                    hashCode = hashCode * 59 + this.RadPreference.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Site != null)
                    hashCode = hashCode * 59 + this.Site.GetHashCode();
                if (this.CompanyAddress != null)
                    hashCode = hashCode * 59 + this.CompanyAddress.GetHashCode();
                if (this.ShippingAddress != null)
                    hashCode = hashCode * 59 + this.ShippingAddress.GetHashCode();
                if (this.BillingAddress != null)
                    hashCode = hashCode * 59 + this.BillingAddress.GetHashCode();
                if (this.AdditionalEmailNotifications != null)
                    hashCode = hashCode * 59 + this.AdditionalEmailNotifications.GetHashCode();
                if (this.SalesOrganization != null)
                    hashCode = hashCode * 59 + this.SalesOrganization.GetHashCode();
                if (this.PriceBook != null)
                    hashCode = hashCode * 59 + this.PriceBook.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
