/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// BuyCategoryContentDto
    /// </summary>
    [DataContract]
    public partial class BuyCategoryContentDto :  IEquatable<BuyCategoryContentDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuyCategoryContentDto" /> class.
        /// </summary>
        /// <param name="CategoryName">CategoryName.</param>
        /// <param name="SubCategoriesGroup1">SubCategoriesGroup1.</param>
        /// <param name="SubCategoriesGroup2">SubCategoriesGroup2.</param>
        /// <param name="SubCategoriesGroup3">SubCategoriesGroup3.</param>
        public BuyCategoryContentDto(string CategoryName = default(string), List<CategoryDto> SubCategoriesGroup1 = default(List<CategoryDto>), List<CategoryDto> SubCategoriesGroup2 = default(List<CategoryDto>), List<CategoryDto> SubCategoriesGroup3 = default(List<CategoryDto>))
        {
            this.CategoryName = CategoryName;
            this.SubCategoriesGroup1 = SubCategoriesGroup1;
            this.SubCategoriesGroup2 = SubCategoriesGroup2;
            this.SubCategoriesGroup3 = SubCategoriesGroup3;
        }
        
        /// <summary>
        /// Gets or Sets CategoryName
        /// </summary>
        [DataMember(Name="categoryName", EmitDefaultValue=false)]
        public string CategoryName { get; set; }

        /// <summary>
        /// Gets or Sets SubCategoriesGroup1
        /// </summary>
        [DataMember(Name="subCategoriesGroup1", EmitDefaultValue=false)]
        public List<CategoryDto> SubCategoriesGroup1 { get; set; }

        /// <summary>
        /// Gets or Sets SubCategoriesGroup2
        /// </summary>
        [DataMember(Name="subCategoriesGroup2", EmitDefaultValue=false)]
        public List<CategoryDto> SubCategoriesGroup2 { get; set; }

        /// <summary>
        /// Gets or Sets SubCategoriesGroup3
        /// </summary>
        [DataMember(Name="subCategoriesGroup3", EmitDefaultValue=false)]
        public List<CategoryDto> SubCategoriesGroup3 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuyCategoryContentDto {\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  SubCategoriesGroup1: ").Append(SubCategoriesGroup1).Append("\n");
            sb.Append("  SubCategoriesGroup2: ").Append(SubCategoriesGroup2).Append("\n");
            sb.Append("  SubCategoriesGroup3: ").Append(SubCategoriesGroup3).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuyCategoryContentDto);
        }

        /// <summary>
        /// Returns true if BuyCategoryContentDto instances are equal
        /// </summary>
        /// <param name="input">Instance of BuyCategoryContentDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuyCategoryContentDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CategoryName == input.CategoryName ||
                    (this.CategoryName != null &&
                    this.CategoryName.Equals(input.CategoryName))
                ) && 
                (
                    this.SubCategoriesGroup1 == input.SubCategoriesGroup1 ||
                    this.SubCategoriesGroup1 != null &&
                    this.SubCategoriesGroup1.SequenceEqual(input.SubCategoriesGroup1)
                ) && 
                (
                    this.SubCategoriesGroup2 == input.SubCategoriesGroup2 ||
                    this.SubCategoriesGroup2 != null &&
                    this.SubCategoriesGroup2.SequenceEqual(input.SubCategoriesGroup2)
                ) && 
                (
                    this.SubCategoriesGroup3 == input.SubCategoriesGroup3 ||
                    this.SubCategoriesGroup3 != null &&
                    this.SubCategoriesGroup3.SequenceEqual(input.SubCategoriesGroup3)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CategoryName != null)
                    hashCode = hashCode * 59 + this.CategoryName.GetHashCode();
                if (this.SubCategoriesGroup1 != null)
                    hashCode = hashCode * 59 + this.SubCategoriesGroup1.GetHashCode();
                if (this.SubCategoriesGroup2 != null)
                    hashCode = hashCode * 59 + this.SubCategoriesGroup2.GetHashCode();
                if (this.SubCategoriesGroup3 != null)
                    hashCode = hashCode * 59 + this.SubCategoriesGroup3.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
