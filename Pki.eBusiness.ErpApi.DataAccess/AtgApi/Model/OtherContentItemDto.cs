/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// OtherContentItemDto
    /// </summary>
    [DataContract]
    public partial class OtherContentItemDto :  IEquatable<OtherContentItemDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OtherContentItemDto" /> class.
        /// </summary>
        /// <param name="FirstRecordNumber">FirstRecordNumber.</param>
        /// <param name="LastRecordNumber">LastRecordNumber.</param>
        /// <param name="NavigationActionUrl">NavigationActionUrl.</param>
        /// <param name="PushBackURL">PushBackURL.</param>
        /// <param name="RecordPerPage">RecordPerPage.</param>
        /// <param name="TotalRecordNumber">TotalRecordNumber.</param>
        /// <param name="Contents">Contents.</param>
        /// <param name="SortOptions">SortOptions.</param>
        /// <param name="RefinementDetails">RefinementDetails.</param>
        /// <param name="SelectedRefinements">SelectedRefinements.</param>
        /// <param name="AutoCorrectedTerms">AutoCorrectedTerms.</param>
        public OtherContentItemDto(long? FirstRecordNumber = default(long?), long? LastRecordNumber = default(long?), string NavigationActionUrl = default(string), string PushBackURL = default(string), long? RecordPerPage = default(long?), long? TotalRecordNumber = default(long?), List<ContentDto> Contents = default(List<ContentDto>), List<SortOptionDto> SortOptions = default(List<SortOptionDto>), List<RefinementItemDto> RefinementDetails = default(List<RefinementItemDto>), List<RefinementDto> SelectedRefinements = default(List<RefinementDto>), List<Object> AutoCorrectedTerms = default(List<Object>))
        {
            this.FirstRecordNumber = FirstRecordNumber;
            this.LastRecordNumber = LastRecordNumber;
            this.NavigationActionUrl = NavigationActionUrl;
            this.PushBackURL = PushBackURL;
            this.RecordPerPage = RecordPerPage;
            this.TotalRecordNumber = TotalRecordNumber;
            this.Contents = Contents;
            this.SortOptions = SortOptions;
            this.RefinementDetails = RefinementDetails;
            this.SelectedRefinements = SelectedRefinements;
            this.AutoCorrectedTerms = AutoCorrectedTerms;
        }
        
        /// <summary>
        /// Gets or Sets FirstRecordNumber
        /// </summary>
        [DataMember(Name="firstRecordNumber", EmitDefaultValue=false)]
        public long? FirstRecordNumber { get; set; }

        /// <summary>
        /// Gets or Sets LastRecordNumber
        /// </summary>
        [DataMember(Name="lastRecordNumber", EmitDefaultValue=false)]
        public long? LastRecordNumber { get; set; }

        /// <summary>
        /// Gets or Sets NavigationActionUrl
        /// </summary>
        [DataMember(Name="navigationActionUrl", EmitDefaultValue=false)]
        public string NavigationActionUrl { get; set; }

        /// <summary>
        /// Gets or Sets PushBackURL
        /// </summary>
        [DataMember(Name="pushBackURL", EmitDefaultValue=false)]
        public string PushBackURL { get; set; }

        /// <summary>
        /// Gets or Sets RecordPerPage
        /// </summary>
        [DataMember(Name="recordPerPage", EmitDefaultValue=false)]
        public long? RecordPerPage { get; set; }

        /// <summary>
        /// Gets or Sets TotalRecordNumber
        /// </summary>
        [DataMember(Name="totalRecordNumber", EmitDefaultValue=false)]
        public long? TotalRecordNumber { get; set; }

        /// <summary>
        /// Gets or Sets Contents
        /// </summary>
        [DataMember(Name="contents", EmitDefaultValue=false)]
        public List<ContentDto> Contents { get; set; }

        /// <summary>
        /// Gets or Sets SortOptions
        /// </summary>
        [DataMember(Name="sortOptions", EmitDefaultValue=false)]
        public List<SortOptionDto> SortOptions { get; set; }

        /// <summary>
        /// Gets or Sets RefinementDetails
        /// </summary>
        [DataMember(Name="refinementDetails", EmitDefaultValue=false)]
        public List<RefinementItemDto> RefinementDetails { get; set; }

        /// <summary>
        /// Gets or Sets SelectedRefinements
        /// </summary>
        [DataMember(Name="selectedRefinements", EmitDefaultValue=false)]
        public List<RefinementDto> SelectedRefinements { get; set; }

        /// <summary>
        /// Gets or Sets AutoCorrectedTerms
        /// </summary>
        [DataMember(Name="autoCorrectedTerms", EmitDefaultValue=false)]
        public List<Object> AutoCorrectedTerms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OtherContentItemDto {\n");
            sb.Append("  FirstRecordNumber: ").Append(FirstRecordNumber).Append("\n");
            sb.Append("  LastRecordNumber: ").Append(LastRecordNumber).Append("\n");
            sb.Append("  NavigationActionUrl: ").Append(NavigationActionUrl).Append("\n");
            sb.Append("  PushBackURL: ").Append(PushBackURL).Append("\n");
            sb.Append("  RecordPerPage: ").Append(RecordPerPage).Append("\n");
            sb.Append("  TotalRecordNumber: ").Append(TotalRecordNumber).Append("\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("  SortOptions: ").Append(SortOptions).Append("\n");
            sb.Append("  RefinementDetails: ").Append(RefinementDetails).Append("\n");
            sb.Append("  SelectedRefinements: ").Append(SelectedRefinements).Append("\n");
            sb.Append("  AutoCorrectedTerms: ").Append(AutoCorrectedTerms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OtherContentItemDto);
        }

        /// <summary>
        /// Returns true if OtherContentItemDto instances are equal
        /// </summary>
        /// <param name="input">Instance of OtherContentItemDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OtherContentItemDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FirstRecordNumber == input.FirstRecordNumber ||
                    (this.FirstRecordNumber != null &&
                    this.FirstRecordNumber.Equals(input.FirstRecordNumber))
                ) && 
                (
                    this.LastRecordNumber == input.LastRecordNumber ||
                    (this.LastRecordNumber != null &&
                    this.LastRecordNumber.Equals(input.LastRecordNumber))
                ) && 
                (
                    this.NavigationActionUrl == input.NavigationActionUrl ||
                    (this.NavigationActionUrl != null &&
                    this.NavigationActionUrl.Equals(input.NavigationActionUrl))
                ) && 
                (
                    this.PushBackURL == input.PushBackURL ||
                    (this.PushBackURL != null &&
                    this.PushBackURL.Equals(input.PushBackURL))
                ) && 
                (
                    this.RecordPerPage == input.RecordPerPage ||
                    (this.RecordPerPage != null &&
                    this.RecordPerPage.Equals(input.RecordPerPage))
                ) && 
                (
                    this.TotalRecordNumber == input.TotalRecordNumber ||
                    (this.TotalRecordNumber != null &&
                    this.TotalRecordNumber.Equals(input.TotalRecordNumber))
                ) && 
                (
                    this.Contents == input.Contents ||
                    this.Contents != null &&
                    this.Contents.SequenceEqual(input.Contents)
                ) && 
                (
                    this.SortOptions == input.SortOptions ||
                    this.SortOptions != null &&
                    this.SortOptions.SequenceEqual(input.SortOptions)
                ) && 
                (
                    this.RefinementDetails == input.RefinementDetails ||
                    this.RefinementDetails != null &&
                    this.RefinementDetails.SequenceEqual(input.RefinementDetails)
                ) && 
                (
                    this.SelectedRefinements == input.SelectedRefinements ||
                    this.SelectedRefinements != null &&
                    this.SelectedRefinements.SequenceEqual(input.SelectedRefinements)
                ) && 
                (
                    this.AutoCorrectedTerms == input.AutoCorrectedTerms ||
                    this.AutoCorrectedTerms != null &&
                    this.AutoCorrectedTerms.SequenceEqual(input.AutoCorrectedTerms)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FirstRecordNumber != null)
                    hashCode = hashCode * 59 + this.FirstRecordNumber.GetHashCode();
                if (this.LastRecordNumber != null)
                    hashCode = hashCode * 59 + this.LastRecordNumber.GetHashCode();
                if (this.NavigationActionUrl != null)
                    hashCode = hashCode * 59 + this.NavigationActionUrl.GetHashCode();
                if (this.PushBackURL != null)
                    hashCode = hashCode * 59 + this.PushBackURL.GetHashCode();
                if (this.RecordPerPage != null)
                    hashCode = hashCode * 59 + this.RecordPerPage.GetHashCode();
                if (this.TotalRecordNumber != null)
                    hashCode = hashCode * 59 + this.TotalRecordNumber.GetHashCode();
                if (this.Contents != null)
                    hashCode = hashCode * 59 + this.Contents.GetHashCode();
                if (this.SortOptions != null)
                    hashCode = hashCode * 59 + this.SortOptions.GetHashCode();
                if (this.RefinementDetails != null)
                    hashCode = hashCode * 59 + this.RefinementDetails.GetHashCode();
                if (this.SelectedRefinements != null)
                    hashCode = hashCode * 59 + this.SelectedRefinements.GetHashCode();
                if (this.AutoCorrectedTerms != null)
                    hashCode = hashCode * 59 + this.AutoCorrectedTerms.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
