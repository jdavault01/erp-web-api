/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// BasicSkuInfoDto
    /// </summary>
    [DataContract]
    public partial class BasicSkuInfoDto :  IEquatable<BasicSkuInfoDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BasicSkuInfoDto" /> class.
        /// </summary>
        /// <param name="ItemClass">ItemClass.</param>
        /// <param name="PacCode">PacCode.</param>
        /// <param name="ProductClass">ProductClass.</param>
        /// <param name="SalesOrganization">SalesOrganization.</param>
        /// <param name="Image">Image.</param>
        public BasicSkuInfoDto(string ItemClass = default(string), string PacCode = default(string), string ProductClass = default(string), List<AttributesDto> SalesOrganization = default(List<AttributesDto>), ImageDto Image = default(ImageDto))
        {
            this.ItemClass = ItemClass;
            this.PacCode = PacCode;
            this.ProductClass = ProductClass;
            this.SalesOrganization = SalesOrganization;
            this.Image = Image;
        }
        
        /// <summary>
        /// Gets or Sets PartNumber
        /// </summary>
        [DataMember(Name="partNumber", EmitDefaultValue=false)]
        public string PartNumber { get; private set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; private set; }

        /// <summary>
        /// Gets or Sets SeoName
        /// </summary>
        [DataMember(Name="seoName", EmitDefaultValue=false)]
        public string SeoName { get; private set; }

        /// <summary>
        /// Gets or Sets ItemClass
        /// </summary>
        [DataMember(Name="itemClass", EmitDefaultValue=false)]
        public string ItemClass { get; set; }

        /// <summary>
        /// Gets or Sets PacCode
        /// </summary>
        [DataMember(Name="pacCode", EmitDefaultValue=false)]
        public string PacCode { get; set; }

        /// <summary>
        /// Gets or Sets ProductClass
        /// </summary>
        [DataMember(Name="productClass", EmitDefaultValue=false)]
        public string ProductClass { get; set; }

        /// <summary>
        /// Gets or Sets SalesOrganization
        /// </summary>
        [DataMember(Name="salesOrganization", EmitDefaultValue=false)]
        public List<AttributesDto> SalesOrganization { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public ImageDto Image { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BasicSkuInfoDto {\n");
            sb.Append("  PartNumber: ").Append(PartNumber).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  SeoName: ").Append(SeoName).Append("\n");
            sb.Append("  ItemClass: ").Append(ItemClass).Append("\n");
            sb.Append("  PacCode: ").Append(PacCode).Append("\n");
            sb.Append("  ProductClass: ").Append(ProductClass).Append("\n");
            sb.Append("  SalesOrganization: ").Append(SalesOrganization).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BasicSkuInfoDto);
        }

        /// <summary>
        /// Returns true if BasicSkuInfoDto instances are equal
        /// </summary>
        /// <param name="input">Instance of BasicSkuInfoDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BasicSkuInfoDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PartNumber == input.PartNumber ||
                    (this.PartNumber != null &&
                    this.PartNumber.Equals(input.PartNumber))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.SeoName == input.SeoName ||
                    (this.SeoName != null &&
                    this.SeoName.Equals(input.SeoName))
                ) && 
                (
                    this.ItemClass == input.ItemClass ||
                    (this.ItemClass != null &&
                    this.ItemClass.Equals(input.ItemClass))
                ) && 
                (
                    this.PacCode == input.PacCode ||
                    (this.PacCode != null &&
                    this.PacCode.Equals(input.PacCode))
                ) && 
                (
                    this.ProductClass == input.ProductClass ||
                    (this.ProductClass != null &&
                    this.ProductClass.Equals(input.ProductClass))
                ) && 
                (
                    this.SalesOrganization == input.SalesOrganization ||
                    this.SalesOrganization != null &&
                    this.SalesOrganization.SequenceEqual(input.SalesOrganization)
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PartNumber != null)
                    hashCode = hashCode * 59 + this.PartNumber.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.SeoName != null)
                    hashCode = hashCode * 59 + this.SeoName.GetHashCode();
                if (this.ItemClass != null)
                    hashCode = hashCode * 59 + this.ItemClass.GetHashCode();
                if (this.PacCode != null)
                    hashCode = hashCode * 59 + this.PacCode.GetHashCode();
                if (this.ProductClass != null)
                    hashCode = hashCode * 59 + this.ProductClass.GetHashCode();
                if (this.SalesOrganization != null)
                    hashCode = hashCode * 59 + this.SalesOrganization.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
