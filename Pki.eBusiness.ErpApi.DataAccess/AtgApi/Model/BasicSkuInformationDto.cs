/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// BasicSkuInformationDto
    /// </summary>
    [DataContract]
    public partial class BasicSkuInformationDto :  IEquatable<BasicSkuInformationDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BasicSkuInformationDto" /> class.
        /// </summary>
        /// <param name="BusinessUnit">BusinessUnit.</param>
        /// <param name="Description">Description.</param>
        /// <param name="DisplayName">DisplayName.</param>
        /// <param name="ItemClass">ItemClass.</param>
        /// <param name="PacCode">PacCode.</param>
        /// <param name="ParentProductId">ParentProductId.</param>
        /// <param name="PartNumber">PartNumber.</param>
        /// <param name="ProductClass">ProductClass.</param>
        /// <param name="ProductLine">ProductLine.</param>
        /// <param name="SeoName">SeoName.</param>
        /// <param name="SkuId">SkuId.</param>
        /// <param name="Image">Image.</param>
        public BasicSkuInformationDto(string BusinessUnit = default(string), string Description = default(string), string DisplayName = default(string), string ItemClass = default(string), string PacCode = default(string), string ParentProductId = default(string), string PartNumber = default(string), string ProductClass = default(string), string ProductLine = default(string), string SeoName = default(string), string SkuId = default(string), ImageDto Image = default(ImageDto))
        {
            this.BusinessUnit = BusinessUnit;
            this.Description = Description;
            this.DisplayName = DisplayName;
            this.ItemClass = ItemClass;
            this.PacCode = PacCode;
            this.ParentProductId = ParentProductId;
            this.PartNumber = PartNumber;
            this.ProductClass = ProductClass;
            this.ProductLine = ProductLine;
            this.SeoName = SeoName;
            this.SkuId = SkuId;
            this.Image = Image;
        }
        
        /// <summary>
        /// Gets or Sets BusinessUnit
        /// </summary>
        [DataMember(Name="businessUnit", EmitDefaultValue=false)]
        public string BusinessUnit { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets ItemClass
        /// </summary>
        [DataMember(Name="itemClass", EmitDefaultValue=false)]
        public string ItemClass { get; set; }

        /// <summary>
        /// Gets or Sets PacCode
        /// </summary>
        [DataMember(Name="pacCode", EmitDefaultValue=false)]
        public string PacCode { get; set; }

        /// <summary>
        /// Gets or Sets ParentProductId
        /// </summary>
        [DataMember(Name="parentProductId", EmitDefaultValue=false)]
        public string ParentProductId { get; set; }

        /// <summary>
        /// Gets or Sets PartNumber
        /// </summary>
        [DataMember(Name="partNumber", EmitDefaultValue=false)]
        public string PartNumber { get; set; }

        /// <summary>
        /// Gets or Sets ProductClass
        /// </summary>
        [DataMember(Name="productClass", EmitDefaultValue=false)]
        public string ProductClass { get; set; }

        /// <summary>
        /// Gets or Sets ProductLine
        /// </summary>
        [DataMember(Name="productLine", EmitDefaultValue=false)]
        public string ProductLine { get; set; }

        /// <summary>
        /// Gets or Sets SeoName
        /// </summary>
        [DataMember(Name="seoName", EmitDefaultValue=false)]
        public string SeoName { get; set; }

        /// <summary>
        /// Gets or Sets SkuId
        /// </summary>
        [DataMember(Name="skuId", EmitDefaultValue=false)]
        public string SkuId { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public ImageDto Image { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BasicSkuInformationDto {\n");
            sb.Append("  BusinessUnit: ").Append(BusinessUnit).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  ItemClass: ").Append(ItemClass).Append("\n");
            sb.Append("  PacCode: ").Append(PacCode).Append("\n");
            sb.Append("  ParentProductId: ").Append(ParentProductId).Append("\n");
            sb.Append("  PartNumber: ").Append(PartNumber).Append("\n");
            sb.Append("  ProductClass: ").Append(ProductClass).Append("\n");
            sb.Append("  ProductLine: ").Append(ProductLine).Append("\n");
            sb.Append("  SeoName: ").Append(SeoName).Append("\n");
            sb.Append("  SkuId: ").Append(SkuId).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BasicSkuInformationDto);
        }

        /// <summary>
        /// Returns true if BasicSkuInformationDto instances are equal
        /// </summary>
        /// <param name="input">Instance of BasicSkuInformationDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BasicSkuInformationDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BusinessUnit == input.BusinessUnit ||
                    (this.BusinessUnit != null &&
                    this.BusinessUnit.Equals(input.BusinessUnit))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.ItemClass == input.ItemClass ||
                    (this.ItemClass != null &&
                    this.ItemClass.Equals(input.ItemClass))
                ) && 
                (
                    this.PacCode == input.PacCode ||
                    (this.PacCode != null &&
                    this.PacCode.Equals(input.PacCode))
                ) && 
                (
                    this.ParentProductId == input.ParentProductId ||
                    (this.ParentProductId != null &&
                    this.ParentProductId.Equals(input.ParentProductId))
                ) && 
                (
                    this.PartNumber == input.PartNumber ||
                    (this.PartNumber != null &&
                    this.PartNumber.Equals(input.PartNumber))
                ) && 
                (
                    this.ProductClass == input.ProductClass ||
                    (this.ProductClass != null &&
                    this.ProductClass.Equals(input.ProductClass))
                ) && 
                (
                    this.ProductLine == input.ProductLine ||
                    (this.ProductLine != null &&
                    this.ProductLine.Equals(input.ProductLine))
                ) && 
                (
                    this.SeoName == input.SeoName ||
                    (this.SeoName != null &&
                    this.SeoName.Equals(input.SeoName))
                ) && 
                (
                    this.SkuId == input.SkuId ||
                    (this.SkuId != null &&
                    this.SkuId.Equals(input.SkuId))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BusinessUnit != null)
                    hashCode = hashCode * 59 + this.BusinessUnit.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.ItemClass != null)
                    hashCode = hashCode * 59 + this.ItemClass.GetHashCode();
                if (this.PacCode != null)
                    hashCode = hashCode * 59 + this.PacCode.GetHashCode();
                if (this.ParentProductId != null)
                    hashCode = hashCode * 59 + this.ParentProductId.GetHashCode();
                if (this.PartNumber != null)
                    hashCode = hashCode * 59 + this.PartNumber.GetHashCode();
                if (this.ProductClass != null)
                    hashCode = hashCode * 59 + this.ProductClass.GetHashCode();
                if (this.ProductLine != null)
                    hashCode = hashCode * 59 + this.ProductLine.GetHashCode();
                if (this.SeoName != null)
                    hashCode = hashCode * 59 + this.SeoName.GetHashCode();
                if (this.SkuId != null)
                    hashCode = hashCode * 59 + this.SkuId.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
