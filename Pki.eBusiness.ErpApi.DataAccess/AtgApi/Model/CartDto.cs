/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// CartDto
    /// </summary>
    [DataContract]
    public partial class CartDto :  IEquatable<CartDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartDto" /> class.
        /// </summary>
        /// <param name="Count">Count.</param>
        /// <param name="Discontinued">Discontinued.</param>
        /// <param name="GrandTotal">GrandTotal.</param>
        /// <param name="IsInventoryNotPresent">IsInventoryNotPresent.</param>
        /// <param name="IsRad">IsRad.</param>
        /// <param name="IsSapDown">IsSapDown.</param>
        /// <param name="OrderId">OrderId.</param>
        /// <param name="RemoveReplacement">RemoveReplacement.</param>
        /// <param name="Replacement">Replacement.</param>
        /// <param name="State">State.</param>
        /// <param name="OrderSummary">OrderSummary.</param>
        /// <param name="LineItems">LineItems.</param>
        /// <param name="ErrorMsg">ErrorMsg.</param>
        /// <param name="ReplacementPartNumb">ReplacementPartNumb.</param>
        /// <param name="DiscontinuedPartNumb">DiscontinuedPartNumb.</param>
        public CartDto(int? Count = default(int?), bool? Discontinued = default(bool?), double? GrandTotal = default(double?), bool? IsInventoryNotPresent = default(bool?), bool? IsRad = default(bool?), bool? IsSapDown = default(bool?), string OrderId = default(string), bool? RemoveReplacement = default(bool?), bool? Replacement = default(bool?), string State = default(string), OrderPriceDto OrderSummary = default(OrderPriceDto), List<CommerceItemDto> LineItems = default(List<CommerceItemDto>), List<ErrorDto> ErrorMsg = default(List<ErrorDto>), List<ReplacementPartNumbDto> ReplacementPartNumb = default(List<ReplacementPartNumbDto>), List<DiscontinuedPartNumbDto> DiscontinuedPartNumb = default(List<DiscontinuedPartNumbDto>))
        {
            this.Count = Count;
            this.Discontinued = Discontinued;
            this.GrandTotal = GrandTotal;
            this.IsInventoryNotPresent = IsInventoryNotPresent;
            this.IsRad = IsRad;
            this.IsSapDown = IsSapDown;
            this.OrderId = OrderId;
            this.RemoveReplacement = RemoveReplacement;
            this.Replacement = Replacement;
            this.State = State;
            this.OrderSummary = OrderSummary;
            this.LineItems = LineItems;
            this.ErrorMsg = ErrorMsg;
            this.ReplacementPartNumb = ReplacementPartNumb;
            this.DiscontinuedPartNumb = DiscontinuedPartNumb;
        }
        
        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? Count { get; set; }

        /// <summary>
        /// Gets or Sets Discontinued
        /// </summary>
        [DataMember(Name="discontinued", EmitDefaultValue=false)]
        public bool? Discontinued { get; set; }

        /// <summary>
        /// Gets or Sets GrandTotal
        /// </summary>
        [DataMember(Name="grandTotal", EmitDefaultValue=false)]
        public double? GrandTotal { get; set; }

        /// <summary>
        /// Gets or Sets IsInventoryNotPresent
        /// </summary>
        [DataMember(Name="isInventoryNotPresent", EmitDefaultValue=false)]
        public bool? IsInventoryNotPresent { get; set; }

        /// <summary>
        /// Gets or Sets IsRad
        /// </summary>
        [DataMember(Name="isRad", EmitDefaultValue=false)]
        public bool? IsRad { get; set; }

        /// <summary>
        /// Gets or Sets IsSapDown
        /// </summary>
        [DataMember(Name="isSapDown", EmitDefaultValue=false)]
        public bool? IsSapDown { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets RemoveReplacement
        /// </summary>
        [DataMember(Name="removeReplacement", EmitDefaultValue=false)]
        public bool? RemoveReplacement { get; set; }

        /// <summary>
        /// Gets or Sets Replacement
        /// </summary>
        [DataMember(Name="replacement", EmitDefaultValue=false)]
        public bool? Replacement { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets OrderSummary
        /// </summary>
        [DataMember(Name="orderSummary", EmitDefaultValue=false)]
        public OrderPriceDto OrderSummary { get; set; }

        /// <summary>
        /// Gets or Sets LineItems
        /// </summary>
        [DataMember(Name="lineItems", EmitDefaultValue=false)]
        public List<CommerceItemDto> LineItems { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMsg
        /// </summary>
        [DataMember(Name="errorMsg", EmitDefaultValue=false)]
        public List<ErrorDto> ErrorMsg { get; set; }

        /// <summary>
        /// Gets or Sets ReplacementPartNumb
        /// </summary>
        [DataMember(Name="replacementPartNumb", EmitDefaultValue=false)]
        public List<ReplacementPartNumbDto> ReplacementPartNumb { get; set; }

        /// <summary>
        /// Gets or Sets DiscontinuedPartNumb
        /// </summary>
        [DataMember(Name="discontinuedPartNumb", EmitDefaultValue=false)]
        public List<DiscontinuedPartNumbDto> DiscontinuedPartNumb { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartDto {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Discontinued: ").Append(Discontinued).Append("\n");
            sb.Append("  GrandTotal: ").Append(GrandTotal).Append("\n");
            sb.Append("  IsInventoryNotPresent: ").Append(IsInventoryNotPresent).Append("\n");
            sb.Append("  IsRad: ").Append(IsRad).Append("\n");
            sb.Append("  IsSapDown: ").Append(IsSapDown).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  RemoveReplacement: ").Append(RemoveReplacement).Append("\n");
            sb.Append("  Replacement: ").Append(Replacement).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  OrderSummary: ").Append(OrderSummary).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  ErrorMsg: ").Append(ErrorMsg).Append("\n");
            sb.Append("  ReplacementPartNumb: ").Append(ReplacementPartNumb).Append("\n");
            sb.Append("  DiscontinuedPartNumb: ").Append(DiscontinuedPartNumb).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartDto);
        }

        /// <summary>
        /// Returns true if CartDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CartDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.Discontinued == input.Discontinued ||
                    (this.Discontinued != null &&
                    this.Discontinued.Equals(input.Discontinued))
                ) && 
                (
                    this.GrandTotal == input.GrandTotal ||
                    (this.GrandTotal != null &&
                    this.GrandTotal.Equals(input.GrandTotal))
                ) && 
                (
                    this.IsInventoryNotPresent == input.IsInventoryNotPresent ||
                    (this.IsInventoryNotPresent != null &&
                    this.IsInventoryNotPresent.Equals(input.IsInventoryNotPresent))
                ) && 
                (
                    this.IsRad == input.IsRad ||
                    (this.IsRad != null &&
                    this.IsRad.Equals(input.IsRad))
                ) && 
                (
                    this.IsSapDown == input.IsSapDown ||
                    (this.IsSapDown != null &&
                    this.IsSapDown.Equals(input.IsSapDown))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.RemoveReplacement == input.RemoveReplacement ||
                    (this.RemoveReplacement != null &&
                    this.RemoveReplacement.Equals(input.RemoveReplacement))
                ) && 
                (
                    this.Replacement == input.Replacement ||
                    (this.Replacement != null &&
                    this.Replacement.Equals(input.Replacement))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.OrderSummary == input.OrderSummary ||
                    (this.OrderSummary != null &&
                    this.OrderSummary.Equals(input.OrderSummary))
                ) && 
                (
                    this.LineItems == input.LineItems ||
                    this.LineItems != null &&
                    this.LineItems.SequenceEqual(input.LineItems)
                ) && 
                (
                    this.ErrorMsg == input.ErrorMsg ||
                    this.ErrorMsg != null &&
                    this.ErrorMsg.SequenceEqual(input.ErrorMsg)
                ) && 
                (
                    this.ReplacementPartNumb == input.ReplacementPartNumb ||
                    this.ReplacementPartNumb != null &&
                    this.ReplacementPartNumb.SequenceEqual(input.ReplacementPartNumb)
                ) && 
                (
                    this.DiscontinuedPartNumb == input.DiscontinuedPartNumb ||
                    this.DiscontinuedPartNumb != null &&
                    this.DiscontinuedPartNumb.SequenceEqual(input.DiscontinuedPartNumb)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.Discontinued != null)
                    hashCode = hashCode * 59 + this.Discontinued.GetHashCode();
                if (this.GrandTotal != null)
                    hashCode = hashCode * 59 + this.GrandTotal.GetHashCode();
                if (this.IsInventoryNotPresent != null)
                    hashCode = hashCode * 59 + this.IsInventoryNotPresent.GetHashCode();
                if (this.IsRad != null)
                    hashCode = hashCode * 59 + this.IsRad.GetHashCode();
                if (this.IsSapDown != null)
                    hashCode = hashCode * 59 + this.IsSapDown.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.RemoveReplacement != null)
                    hashCode = hashCode * 59 + this.RemoveReplacement.GetHashCode();
                if (this.Replacement != null)
                    hashCode = hashCode * 59 + this.Replacement.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.OrderSummary != null)
                    hashCode = hashCode * 59 + this.OrderSummary.GetHashCode();
                if (this.LineItems != null)
                    hashCode = hashCode * 59 + this.LineItems.GetHashCode();
                if (this.ErrorMsg != null)
                    hashCode = hashCode * 59 + this.ErrorMsg.GetHashCode();
                if (this.ReplacementPartNumb != null)
                    hashCode = hashCode * 59 + this.ReplacementPartNumb.GetHashCode();
                if (this.DiscontinuedPartNumb != null)
                    hashCode = hashCode * 59 + this.DiscontinuedPartNumb.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
