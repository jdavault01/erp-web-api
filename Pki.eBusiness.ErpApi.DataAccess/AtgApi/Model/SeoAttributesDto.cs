/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// SeoAttributesDto
    /// </summary>
    [DataContract]
    public partial class SeoAttributesDto :  IEquatable<SeoAttributesDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SeoAttributesDto" /> class.
        /// </summary>
        /// <param name="CanonicalUrl">CanonicalUrl.</param>
        /// <param name="Description">Description.</param>
        /// <param name="H1Tag">H1Tag.</param>
        /// <param name="Keywords">Keywords.</param>
        /// <param name="PageTitle">PageTitle.</param>
        public SeoAttributesDto(string CanonicalUrl = default(string), string Description = default(string), string H1Tag = default(string), string Keywords = default(string), string PageTitle = default(string))
        {
            this.CanonicalUrl = CanonicalUrl;
            this.Description = Description;
            this.H1Tag = H1Tag;
            this.Keywords = Keywords;
            this.PageTitle = PageTitle;
        }
        
        /// <summary>
        /// Gets or Sets CanonicalUrl
        /// </summary>
        [DataMember(Name="canonicalUrl", EmitDefaultValue=false)]
        public string CanonicalUrl { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets H1Tag
        /// </summary>
        [DataMember(Name="h1Tag", EmitDefaultValue=false)]
        public string H1Tag { get; set; }

        /// <summary>
        /// Gets or Sets Keywords
        /// </summary>
        [DataMember(Name="keywords", EmitDefaultValue=false)]
        public string Keywords { get; set; }

        /// <summary>
        /// Gets or Sets PageTitle
        /// </summary>
        [DataMember(Name="pageTitle", EmitDefaultValue=false)]
        public string PageTitle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SeoAttributesDto {\n");
            sb.Append("  CanonicalUrl: ").Append(CanonicalUrl).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  H1Tag: ").Append(H1Tag).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  PageTitle: ").Append(PageTitle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SeoAttributesDto);
        }

        /// <summary>
        /// Returns true if SeoAttributesDto instances are equal
        /// </summary>
        /// <param name="input">Instance of SeoAttributesDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SeoAttributesDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CanonicalUrl == input.CanonicalUrl ||
                    (this.CanonicalUrl != null &&
                    this.CanonicalUrl.Equals(input.CanonicalUrl))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.H1Tag == input.H1Tag ||
                    (this.H1Tag != null &&
                    this.H1Tag.Equals(input.H1Tag))
                ) && 
                (
                    this.Keywords == input.Keywords ||
                    (this.Keywords != null &&
                    this.Keywords.Equals(input.Keywords))
                ) && 
                (
                    this.PageTitle == input.PageTitle ||
                    (this.PageTitle != null &&
                    this.PageTitle.Equals(input.PageTitle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CanonicalUrl != null)
                    hashCode = hashCode * 59 + this.CanonicalUrl.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.H1Tag != null)
                    hashCode = hashCode * 59 + this.H1Tag.GetHashCode();
                if (this.Keywords != null)
                    hashCode = hashCode * 59 + this.Keywords.GetHashCode();
                if (this.PageTitle != null)
                    hashCode = hashCode * 59 + this.PageTitle.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
