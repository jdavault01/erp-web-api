/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// ChangeUserNameDto
    /// </summary>
    [DataContract]
    public partial class ChangeUserNameDto :  IEquatable<ChangeUserNameDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeUserNameDto" /> class.
        /// </summary>
        /// <param name="Comments">Comments.</param>
        /// <param name="ConfirmNewEmail">ConfirmNewEmail.</param>
        /// <param name="CurrentEmail">CurrentEmail.</param>
        /// <param name="Name">Name.</param>
        /// <param name="NewEmail">NewEmail.</param>
        public ChangeUserNameDto(string Comments = default(string), string ConfirmNewEmail = default(string), string CurrentEmail = default(string), string Name = default(string), string NewEmail = default(string))
        {
            this.Comments = Comments;
            this.ConfirmNewEmail = ConfirmNewEmail;
            this.CurrentEmail = CurrentEmail;
            this.Name = Name;
            this.NewEmail = NewEmail;
        }
        
        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets ConfirmNewEmail
        /// </summary>
        [DataMember(Name="confirmNewEmail", EmitDefaultValue=false)]
        public string ConfirmNewEmail { get; set; }

        /// <summary>
        /// Gets or Sets CurrentEmail
        /// </summary>
        [DataMember(Name="currentEmail", EmitDefaultValue=false)]
        public string CurrentEmail { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NewEmail
        /// </summary>
        [DataMember(Name="newEmail", EmitDefaultValue=false)]
        public string NewEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChangeUserNameDto {\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  ConfirmNewEmail: ").Append(ConfirmNewEmail).Append("\n");
            sb.Append("  CurrentEmail: ").Append(CurrentEmail).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewEmail: ").Append(NewEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChangeUserNameDto);
        }

        /// <summary>
        /// Returns true if ChangeUserNameDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ChangeUserNameDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangeUserNameDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.ConfirmNewEmail == input.ConfirmNewEmail ||
                    (this.ConfirmNewEmail != null &&
                    this.ConfirmNewEmail.Equals(input.ConfirmNewEmail))
                ) && 
                (
                    this.CurrentEmail == input.CurrentEmail ||
                    (this.CurrentEmail != null &&
                    this.CurrentEmail.Equals(input.CurrentEmail))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NewEmail == input.NewEmail ||
                    (this.NewEmail != null &&
                    this.NewEmail.Equals(input.NewEmail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.ConfirmNewEmail != null)
                    hashCode = hashCode * 59 + this.ConfirmNewEmail.GetHashCode();
                if (this.CurrentEmail != null)
                    hashCode = hashCode * 59 + this.CurrentEmail.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NewEmail != null)
                    hashCode = hashCode * 59 + this.NewEmail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
