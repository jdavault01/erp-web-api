/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// PDFDetailDto
    /// </summary>
    [DataContract]
    public partial class PDFDetailDto :  IEquatable<PDFDetailDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PDFDetailDto" /> class.
        /// </summary>
        /// <param name="Author">Author.</param>
        /// <param name="Gated">Gated.</param>
        /// <param name="PdfName">PdfName.</param>
        /// <param name="PdfToHtml">PdfToHtml.</param>
        /// <param name="PdfType">PdfType.</param>
        /// <param name="Pdg">Pdg.</param>
        /// <param name="SubTitle">SubTitle.</param>
        /// <param name="Summary">Summary.</param>
        /// <param name="Title">Title.</param>
        /// <param name="Url">Url.</param>
        /// <param name="Image">Image.</param>
        /// <param name="HeroImageItem">HeroImageItem.</param>
        /// <param name="SeoAttributes">SeoAttributes.</param>
        /// <param name="SocialShareAttributes">SocialShareAttributes.</param>
        /// <param name="Video">Video.</param>
        /// <param name="Sai">Sai.</param>
        public PDFDetailDto(string Author = default(string), bool? Gated = default(bool?), string PdfName = default(string), bool? PdfToHtml = default(bool?), string PdfType = default(string), bool? Pdg = default(bool?), string SubTitle = default(string), string Summary = default(string), string Title = default(string), string Url = default(string), ImageDto Image = default(ImageDto), ImageDto HeroImageItem = default(ImageDto), SeoAttributesDto SeoAttributes = default(SeoAttributesDto), SocialShareAttributesDto SocialShareAttributes = default(SocialShareAttributesDto), VideoDto Video = default(VideoDto), List<string> Sai = default(List<string>))
        {
            this.Author = Author;
            this.Gated = Gated;
            this.PdfName = PdfName;
            this.PdfToHtml = PdfToHtml;
            this.PdfType = PdfType;
            this.Pdg = Pdg;
            this.SubTitle = SubTitle;
            this.Summary = Summary;
            this.Title = Title;
            this.Url = Url;
            this.Image = Image;
            this.HeroImageItem = HeroImageItem;
            this.SeoAttributes = SeoAttributes;
            this.SocialShareAttributes = SocialShareAttributes;
            this.Video = Video;
            this.Sai = Sai;
        }
        
        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name="author", EmitDefaultValue=false)]
        public string Author { get; set; }

        /// <summary>
        /// Gets or Sets Gated
        /// </summary>
        [DataMember(Name="gated", EmitDefaultValue=false)]
        public bool? Gated { get; set; }

        /// <summary>
        /// Gets or Sets PdfName
        /// </summary>
        [DataMember(Name="pdfName", EmitDefaultValue=false)]
        public string PdfName { get; set; }

        /// <summary>
        /// Gets or Sets PdfToHtml
        /// </summary>
        [DataMember(Name="pdfToHtml", EmitDefaultValue=false)]
        public bool? PdfToHtml { get; set; }

        /// <summary>
        /// Gets or Sets PdfType
        /// </summary>
        [DataMember(Name="pdfType", EmitDefaultValue=false)]
        public string PdfType { get; set; }

        /// <summary>
        /// Gets or Sets Pdg
        /// </summary>
        [DataMember(Name="pdg", EmitDefaultValue=false)]
        public bool? Pdg { get; set; }

        /// <summary>
        /// Gets or Sets SubTitle
        /// </summary>
        [DataMember(Name="subTitle", EmitDefaultValue=false)]
        public string SubTitle { get; set; }

        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [DataMember(Name="summary", EmitDefaultValue=false)]
        public string Summary { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public ImageDto Image { get; set; }

        /// <summary>
        /// Gets or Sets HeroImageItem
        /// </summary>
        [DataMember(Name="heroImageItem", EmitDefaultValue=false)]
        public ImageDto HeroImageItem { get; set; }

        /// <summary>
        /// Gets or Sets SeoAttributes
        /// </summary>
        [DataMember(Name="seoAttributes", EmitDefaultValue=false)]
        public SeoAttributesDto SeoAttributes { get; set; }

        /// <summary>
        /// Gets or Sets SocialShareAttributes
        /// </summary>
        [DataMember(Name="socialShareAttributes", EmitDefaultValue=false)]
        public SocialShareAttributesDto SocialShareAttributes { get; set; }

        /// <summary>
        /// Gets or Sets Video
        /// </summary>
        [DataMember(Name="video", EmitDefaultValue=false)]
        public VideoDto Video { get; set; }

        /// <summary>
        /// Gets or Sets Sai
        /// </summary>
        [DataMember(Name="sai", EmitDefaultValue=false)]
        public List<string> Sai { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PDFDetailDto {\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Gated: ").Append(Gated).Append("\n");
            sb.Append("  PdfName: ").Append(PdfName).Append("\n");
            sb.Append("  PdfToHtml: ").Append(PdfToHtml).Append("\n");
            sb.Append("  PdfType: ").Append(PdfType).Append("\n");
            sb.Append("  Pdg: ").Append(Pdg).Append("\n");
            sb.Append("  SubTitle: ").Append(SubTitle).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  HeroImageItem: ").Append(HeroImageItem).Append("\n");
            sb.Append("  SeoAttributes: ").Append(SeoAttributes).Append("\n");
            sb.Append("  SocialShareAttributes: ").Append(SocialShareAttributes).Append("\n");
            sb.Append("  Video: ").Append(Video).Append("\n");
            sb.Append("  Sai: ").Append(Sai).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PDFDetailDto);
        }

        /// <summary>
        /// Returns true if PDFDetailDto instances are equal
        /// </summary>
        /// <param name="input">Instance of PDFDetailDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PDFDetailDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.Gated == input.Gated ||
                    (this.Gated != null &&
                    this.Gated.Equals(input.Gated))
                ) && 
                (
                    this.PdfName == input.PdfName ||
                    (this.PdfName != null &&
                    this.PdfName.Equals(input.PdfName))
                ) && 
                (
                    this.PdfToHtml == input.PdfToHtml ||
                    (this.PdfToHtml != null &&
                    this.PdfToHtml.Equals(input.PdfToHtml))
                ) && 
                (
                    this.PdfType == input.PdfType ||
                    (this.PdfType != null &&
                    this.PdfType.Equals(input.PdfType))
                ) && 
                (
                    this.Pdg == input.Pdg ||
                    (this.Pdg != null &&
                    this.Pdg.Equals(input.Pdg))
                ) && 
                (
                    this.SubTitle == input.SubTitle ||
                    (this.SubTitle != null &&
                    this.SubTitle.Equals(input.SubTitle))
                ) && 
                (
                    this.Summary == input.Summary ||
                    (this.Summary != null &&
                    this.Summary.Equals(input.Summary))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.HeroImageItem == input.HeroImageItem ||
                    (this.HeroImageItem != null &&
                    this.HeroImageItem.Equals(input.HeroImageItem))
                ) && 
                (
                    this.SeoAttributes == input.SeoAttributes ||
                    (this.SeoAttributes != null &&
                    this.SeoAttributes.Equals(input.SeoAttributes))
                ) && 
                (
                    this.SocialShareAttributes == input.SocialShareAttributes ||
                    (this.SocialShareAttributes != null &&
                    this.SocialShareAttributes.Equals(input.SocialShareAttributes))
                ) && 
                (
                    this.Video == input.Video ||
                    (this.Video != null &&
                    this.Video.Equals(input.Video))
                ) && 
                (
                    this.Sai == input.Sai ||
                    this.Sai != null &&
                    this.Sai.SequenceEqual(input.Sai)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Author != null)
                    hashCode = hashCode * 59 + this.Author.GetHashCode();
                if (this.Gated != null)
                    hashCode = hashCode * 59 + this.Gated.GetHashCode();
                if (this.PdfName != null)
                    hashCode = hashCode * 59 + this.PdfName.GetHashCode();
                if (this.PdfToHtml != null)
                    hashCode = hashCode * 59 + this.PdfToHtml.GetHashCode();
                if (this.PdfType != null)
                    hashCode = hashCode * 59 + this.PdfType.GetHashCode();
                if (this.Pdg != null)
                    hashCode = hashCode * 59 + this.Pdg.GetHashCode();
                if (this.SubTitle != null)
                    hashCode = hashCode * 59 + this.SubTitle.GetHashCode();
                if (this.Summary != null)
                    hashCode = hashCode * 59 + this.Summary.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.HeroImageItem != null)
                    hashCode = hashCode * 59 + this.HeroImageItem.GetHashCode();
                if (this.SeoAttributes != null)
                    hashCode = hashCode * 59 + this.SeoAttributes.GetHashCode();
                if (this.SocialShareAttributes != null)
                    hashCode = hashCode * 59 + this.SocialShareAttributes.GetHashCode();
                if (this.Video != null)
                    hashCode = hashCode * 59 + this.Video.GetHashCode();
                if (this.Sai != null)
                    hashCode = hashCode * 59 + this.Sai.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
