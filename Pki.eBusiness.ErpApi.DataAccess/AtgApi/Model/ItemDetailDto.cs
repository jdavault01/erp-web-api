/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// ItemDetailDto
    /// </summary>
    [DataContract]
    public partial class ItemDetailDto :  IEquatable<ItemDetailDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemDetailDto" /> class.
        /// </summary>
        /// <param name="EstimatedDelivery">EstimatedDelivery.</param>
        /// <param name="IsRadioActive">IsRadioActive.</param>
        /// <param name="ItemClass">ItemClass.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Obsolete">Obsolete.</param>
        /// <param name="PacCode">PacCode.</param>
        /// <param name="ProductClass">ProductClass.</param>
        /// <param name="SeoUrl">SeoUrl.</param>
        /// <param name="TermsAndConditionsLink">TermsAndConditionsLink.</param>
        /// <param name="UnitSize">UnitSize.</param>
        /// <param name="Variant">Variant.</param>
        /// <param name="SalesOrganization">SalesOrganization.</param>
        /// <param name="Image">Image.</param>
        public ItemDetailDto(string EstimatedDelivery = default(string), bool? IsRadioActive = default(bool?), string ItemClass = default(string), string Name = default(string), bool? Obsolete = default(bool?), string PacCode = default(string), string ProductClass = default(string), string SeoUrl = default(string), string TermsAndConditionsLink = default(string), string UnitSize = default(string), string Variant = default(string), ItemDetailDtoSalesOrganization SalesOrganization = default(ItemDetailDtoSalesOrganization), ImageDto Image = default(ImageDto))
        {
            this.EstimatedDelivery = EstimatedDelivery;
            this.IsRadioActive = IsRadioActive;
            this.ItemClass = ItemClass;
            this.Name = Name;
            this.Obsolete = Obsolete;
            this.PacCode = PacCode;
            this.ProductClass = ProductClass;
            this.SeoUrl = SeoUrl;
            this.TermsAndConditionsLink = TermsAndConditionsLink;
            this.UnitSize = UnitSize;
            this.Variant = Variant;
            this.SalesOrganization = SalesOrganization;
            this.Image = Image;
        }
        
        /// <summary>
        /// Gets or Sets EstimatedDelivery
        /// </summary>
        [DataMember(Name="estimatedDelivery", EmitDefaultValue=false)]
        public string EstimatedDelivery { get; set; }

        /// <summary>
        /// Gets or Sets IsRadioActive
        /// </summary>
        [DataMember(Name="isRadioActive", EmitDefaultValue=false)]
        public bool? IsRadioActive { get; set; }

        /// <summary>
        /// Gets or Sets ItemClass
        /// </summary>
        [DataMember(Name="itemClass", EmitDefaultValue=false)]
        public string ItemClass { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Obsolete
        /// </summary>
        [DataMember(Name="obsolete", EmitDefaultValue=false)]
        public bool? Obsolete { get; set; }

        /// <summary>
        /// Gets or Sets PacCode
        /// </summary>
        [DataMember(Name="pacCode", EmitDefaultValue=false)]
        public string PacCode { get; set; }

        /// <summary>
        /// Gets or Sets ProductClass
        /// </summary>
        [DataMember(Name="productClass", EmitDefaultValue=false)]
        public string ProductClass { get; set; }

        /// <summary>
        /// Gets or Sets SeoUrl
        /// </summary>
        [DataMember(Name="seoUrl", EmitDefaultValue=false)]
        public string SeoUrl { get; set; }

        /// <summary>
        /// Gets or Sets TermsAndConditionsLink
        /// </summary>
        [DataMember(Name="termsAndConditionsLink", EmitDefaultValue=false)]
        public string TermsAndConditionsLink { get; set; }

        /// <summary>
        /// Gets or Sets UnitSize
        /// </summary>
        [DataMember(Name="unitSize", EmitDefaultValue=false)]
        public string UnitSize { get; set; }

        /// <summary>
        /// Gets or Sets Variant
        /// </summary>
        [DataMember(Name="variant", EmitDefaultValue=false)]
        public string Variant { get; set; }

        /// <summary>
        /// Gets or Sets SalesOrganization
        /// </summary>
        [DataMember(Name="salesOrganization", EmitDefaultValue=false)]
        public ItemDetailDtoSalesOrganization SalesOrganization { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public ImageDto Image { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemDetailDto {\n");
            sb.Append("  EstimatedDelivery: ").Append(EstimatedDelivery).Append("\n");
            sb.Append("  IsRadioActive: ").Append(IsRadioActive).Append("\n");
            sb.Append("  ItemClass: ").Append(ItemClass).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Obsolete: ").Append(Obsolete).Append("\n");
            sb.Append("  PacCode: ").Append(PacCode).Append("\n");
            sb.Append("  ProductClass: ").Append(ProductClass).Append("\n");
            sb.Append("  SeoUrl: ").Append(SeoUrl).Append("\n");
            sb.Append("  TermsAndConditionsLink: ").Append(TermsAndConditionsLink).Append("\n");
            sb.Append("  UnitSize: ").Append(UnitSize).Append("\n");
            sb.Append("  Variant: ").Append(Variant).Append("\n");
            sb.Append("  SalesOrganization: ").Append(SalesOrganization).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemDetailDto);
        }

        /// <summary>
        /// Returns true if ItemDetailDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemDetailDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemDetailDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EstimatedDelivery == input.EstimatedDelivery ||
                    (this.EstimatedDelivery != null &&
                    this.EstimatedDelivery.Equals(input.EstimatedDelivery))
                ) && 
                (
                    this.IsRadioActive == input.IsRadioActive ||
                    (this.IsRadioActive != null &&
                    this.IsRadioActive.Equals(input.IsRadioActive))
                ) && 
                (
                    this.ItemClass == input.ItemClass ||
                    (this.ItemClass != null &&
                    this.ItemClass.Equals(input.ItemClass))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Obsolete == input.Obsolete ||
                    (this.Obsolete != null &&
                    this.Obsolete.Equals(input.Obsolete))
                ) && 
                (
                    this.PacCode == input.PacCode ||
                    (this.PacCode != null &&
                    this.PacCode.Equals(input.PacCode))
                ) && 
                (
                    this.ProductClass == input.ProductClass ||
                    (this.ProductClass != null &&
                    this.ProductClass.Equals(input.ProductClass))
                ) && 
                (
                    this.SeoUrl == input.SeoUrl ||
                    (this.SeoUrl != null &&
                    this.SeoUrl.Equals(input.SeoUrl))
                ) && 
                (
                    this.TermsAndConditionsLink == input.TermsAndConditionsLink ||
                    (this.TermsAndConditionsLink != null &&
                    this.TermsAndConditionsLink.Equals(input.TermsAndConditionsLink))
                ) && 
                (
                    this.UnitSize == input.UnitSize ||
                    (this.UnitSize != null &&
                    this.UnitSize.Equals(input.UnitSize))
                ) && 
                (
                    this.Variant == input.Variant ||
                    (this.Variant != null &&
                    this.Variant.Equals(input.Variant))
                ) && 
                (
                    this.SalesOrganization == input.SalesOrganization ||
                    (this.SalesOrganization != null &&
                    this.SalesOrganization.Equals(input.SalesOrganization))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EstimatedDelivery != null)
                    hashCode = hashCode * 59 + this.EstimatedDelivery.GetHashCode();
                if (this.IsRadioActive != null)
                    hashCode = hashCode * 59 + this.IsRadioActive.GetHashCode();
                if (this.ItemClass != null)
                    hashCode = hashCode * 59 + this.ItemClass.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Obsolete != null)
                    hashCode = hashCode * 59 + this.Obsolete.GetHashCode();
                if (this.PacCode != null)
                    hashCode = hashCode * 59 + this.PacCode.GetHashCode();
                if (this.ProductClass != null)
                    hashCode = hashCode * 59 + this.ProductClass.GetHashCode();
                if (this.SeoUrl != null)
                    hashCode = hashCode * 59 + this.SeoUrl.GetHashCode();
                if (this.TermsAndConditionsLink != null)
                    hashCode = hashCode * 59 + this.TermsAndConditionsLink.GetHashCode();
                if (this.UnitSize != null)
                    hashCode = hashCode * 59 + this.UnitSize.GetHashCode();
                if (this.Variant != null)
                    hashCode = hashCode * 59 + this.Variant.GetHashCode();
                if (this.SalesOrganization != null)
                    hashCode = hashCode * 59 + this.SalesOrganization.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
