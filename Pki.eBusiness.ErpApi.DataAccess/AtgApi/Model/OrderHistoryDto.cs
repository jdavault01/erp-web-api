/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// OrderHistoryDto
    /// </summary>
    [DataContract]
    public partial class OrderHistoryDto :  IEquatable<OrderHistoryDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderHistoryDto" /> class.
        /// </summary>
        /// <param name="OrderDate">OrderDate.</param>
        /// <param name="BillTo">BillTo.</param>
        /// <param name="Currency">Currency.</param>
        /// <param name="ItemCount">ItemCount.</param>
        /// <param name="LoginName">LoginName.</param>
        /// <param name="OrderStatus">OrderStatus.</param>
        /// <param name="OrderTotal">OrderTotal.</param>
        /// <param name="SapOrderNumber">SapOrderNumber.</param>
        /// <param name="ShipTo">ShipTo.</param>
        /// <param name="WebOrderNumber">WebOrderNumber.</param>
        public OrderHistoryDto(DateTime? OrderDate = default(DateTime?), string BillTo = default(string), string Currency = default(string), int? ItemCount = default(int?), string LoginName = default(string), string OrderStatus = default(string), double? OrderTotal = default(double?), string SapOrderNumber = default(string), string ShipTo = default(string), string WebOrderNumber = default(string))
        {
            this.OrderDate = OrderDate;
            this.BillTo = BillTo;
            this.Currency = Currency;
            this.ItemCount = ItemCount;
            this.LoginName = LoginName;
            this.OrderStatus = OrderStatus;
            this.OrderTotal = OrderTotal;
            this.SapOrderNumber = SapOrderNumber;
            this.ShipTo = ShipTo;
            this.WebOrderNumber = WebOrderNumber;
        }
        
        /// <summary>
        /// Gets or Sets OrderDate
        /// </summary>
        [DataMember(Name="orderDate", EmitDefaultValue=false)]
        public DateTime? OrderDate { get; set; }

        /// <summary>
        /// Gets or Sets BillTo
        /// </summary>
        [DataMember(Name="billTo", EmitDefaultValue=false)]
        public string BillTo { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets ItemCount
        /// </summary>
        [DataMember(Name="itemCount", EmitDefaultValue=false)]
        public int? ItemCount { get; set; }

        /// <summary>
        /// Gets or Sets LoginName
        /// </summary>
        [DataMember(Name="loginName", EmitDefaultValue=false)]
        public string LoginName { get; set; }

        /// <summary>
        /// Gets or Sets OrderStatus
        /// </summary>
        [DataMember(Name="orderStatus", EmitDefaultValue=false)]
        public string OrderStatus { get; set; }

        /// <summary>
        /// Gets or Sets OrderTotal
        /// </summary>
        [DataMember(Name="orderTotal", EmitDefaultValue=false)]
        public double? OrderTotal { get; set; }

        /// <summary>
        /// Gets or Sets SapOrderNumber
        /// </summary>
        [DataMember(Name="sapOrderNumber", EmitDefaultValue=false)]
        public string SapOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets ShipTo
        /// </summary>
        [DataMember(Name="shipTo", EmitDefaultValue=false)]
        public string ShipTo { get; set; }

        /// <summary>
        /// Gets or Sets WebOrderNumber
        /// </summary>
        [DataMember(Name="webOrderNumber", EmitDefaultValue=false)]
        public string WebOrderNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderHistoryDto {\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  BillTo: ").Append(BillTo).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ItemCount: ").Append(ItemCount).Append("\n");
            sb.Append("  LoginName: ").Append(LoginName).Append("\n");
            sb.Append("  OrderStatus: ").Append(OrderStatus).Append("\n");
            sb.Append("  OrderTotal: ").Append(OrderTotal).Append("\n");
            sb.Append("  SapOrderNumber: ").Append(SapOrderNumber).Append("\n");
            sb.Append("  ShipTo: ").Append(ShipTo).Append("\n");
            sb.Append("  WebOrderNumber: ").Append(WebOrderNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderHistoryDto);
        }

        /// <summary>
        /// Returns true if OrderHistoryDto instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderHistoryDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderHistoryDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderDate == input.OrderDate ||
                    (this.OrderDate != null &&
                    this.OrderDate.Equals(input.OrderDate))
                ) && 
                (
                    this.BillTo == input.BillTo ||
                    (this.BillTo != null &&
                    this.BillTo.Equals(input.BillTo))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.ItemCount == input.ItemCount ||
                    (this.ItemCount != null &&
                    this.ItemCount.Equals(input.ItemCount))
                ) && 
                (
                    this.LoginName == input.LoginName ||
                    (this.LoginName != null &&
                    this.LoginName.Equals(input.LoginName))
                ) && 
                (
                    this.OrderStatus == input.OrderStatus ||
                    (this.OrderStatus != null &&
                    this.OrderStatus.Equals(input.OrderStatus))
                ) && 
                (
                    this.OrderTotal == input.OrderTotal ||
                    (this.OrderTotal != null &&
                    this.OrderTotal.Equals(input.OrderTotal))
                ) && 
                (
                    this.SapOrderNumber == input.SapOrderNumber ||
                    (this.SapOrderNumber != null &&
                    this.SapOrderNumber.Equals(input.SapOrderNumber))
                ) && 
                (
                    this.ShipTo == input.ShipTo ||
                    (this.ShipTo != null &&
                    this.ShipTo.Equals(input.ShipTo))
                ) && 
                (
                    this.WebOrderNumber == input.WebOrderNumber ||
                    (this.WebOrderNumber != null &&
                    this.WebOrderNumber.Equals(input.WebOrderNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderDate != null)
                    hashCode = hashCode * 59 + this.OrderDate.GetHashCode();
                if (this.BillTo != null)
                    hashCode = hashCode * 59 + this.BillTo.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.ItemCount != null)
                    hashCode = hashCode * 59 + this.ItemCount.GetHashCode();
                if (this.LoginName != null)
                    hashCode = hashCode * 59 + this.LoginName.GetHashCode();
                if (this.OrderStatus != null)
                    hashCode = hashCode * 59 + this.OrderStatus.GetHashCode();
                if (this.OrderTotal != null)
                    hashCode = hashCode * 59 + this.OrderTotal.GetHashCode();
                if (this.SapOrderNumber != null)
                    hashCode = hashCode * 59 + this.SapOrderNumber.GetHashCode();
                if (this.ShipTo != null)
                    hashCode = hashCode * 59 + this.ShipTo.GetHashCode();
                if (this.WebOrderNumber != null)
                    hashCode = hashCode * 59 + this.WebOrderNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
