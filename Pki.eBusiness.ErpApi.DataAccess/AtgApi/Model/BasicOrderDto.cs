/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// BasicOrderDto
    /// </summary>
    [DataContract]
    public partial class BasicOrderDto :  IEquatable<BasicOrderDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BasicOrderDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BasicOrderDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BasicOrderDto" /> class.
        /// </summary>
        /// <param name="CustomerEmail">CustomerEmail.</param>
        /// <param name="FirstName">FirstName.</param>
        /// <param name="LastName">LastName.</param>
        /// <param name="LoginId">LoginId.</param>
        /// <param name="Phone">Phone.</param>
        /// <param name="QuoteNumber">QuoteNumber.</param>
        /// <param name="Salutation">Salutation.</param>
        /// <param name="VatExempted">VatExempted.</param>
        /// <param name="ShippingGroup">ShippingGroup (required).</param>
        /// <param name="PurchaseOrderPayment">PurchaseOrderPayment.</param>
        /// <param name="CreditCardPayment">CreditCardPayment.</param>
        /// <param name="AdditionalEmailNotifications">AdditionalEmailNotifications.</param>
        /// <param name="FileMetaData">FileMetaData.</param>
        /// <param name="TierApproverDetails">TierApproverDetails.</param>
        public BasicOrderDto(string CustomerEmail = default(string), string FirstName = default(string), string LastName = default(string), string LoginId = default(string), string Phone = default(string), string QuoteNumber = default(string), string Salutation = default(string), bool? VatExempted = default(bool?), ShippingGroupDtoValidator ShippingGroup = default(ShippingGroupDtoValidator), PurchaseOrderPaymentDtoValidator PurchaseOrderPayment = default(PurchaseOrderPaymentDtoValidator), CreditCardPaymentDtoValidator CreditCardPayment = default(CreditCardPaymentDtoValidator), AdditionalEmailAddressDtoValidator AdditionalEmailNotifications = default(AdditionalEmailAddressDtoValidator), FileMetaDataDto FileMetaData = default(FileMetaDataDto), List<TierApproverDetailsDto> TierApproverDetails = default(List<TierApproverDetailsDto>))
        {
            // to ensure "ShippingGroup" is required (not null)
            if (ShippingGroup == null)
            {
                throw new InvalidDataException("ShippingGroup is a required property for BasicOrderDto and cannot be null");
            }
            else
            {
                this.ShippingGroup = ShippingGroup;
            }
            this.CustomerEmail = CustomerEmail;
            this.FirstName = FirstName;
            this.LastName = LastName;
            this.LoginId = LoginId;
            this.Phone = Phone;
            this.QuoteNumber = QuoteNumber;
            this.Salutation = Salutation;
            this.VatExempted = VatExempted;
            this.PurchaseOrderPayment = PurchaseOrderPayment;
            this.CreditCardPayment = CreditCardPayment;
            this.AdditionalEmailNotifications = AdditionalEmailNotifications;
            this.FileMetaData = FileMetaData;
            this.TierApproverDetails = TierApproverDetails;
        }
        
        /// <summary>
        /// Gets or Sets CustomerEmail
        /// </summary>
        [DataMember(Name="customerEmail", EmitDefaultValue=false)]
        public string CustomerEmail { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets LoginId
        /// </summary>
        [DataMember(Name="loginId", EmitDefaultValue=false)]
        public string LoginId { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets QuoteNumber
        /// </summary>
        [DataMember(Name="quoteNumber", EmitDefaultValue=false)]
        public string QuoteNumber { get; set; }

        /// <summary>
        /// Gets or Sets Salutation
        /// </summary>
        [DataMember(Name="salutation", EmitDefaultValue=false)]
        public string Salutation { get; set; }

        /// <summary>
        /// Gets or Sets VatExempted
        /// </summary>
        [DataMember(Name="vatExempted", EmitDefaultValue=false)]
        public bool? VatExempted { get; set; }

        /// <summary>
        /// Gets or Sets ShippingGroup
        /// </summary>
        [DataMember(Name="shippingGroup", EmitDefaultValue=false)]
        public ShippingGroupDtoValidator ShippingGroup { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseOrderPayment
        /// </summary>
        [DataMember(Name="purchaseOrderPayment", EmitDefaultValue=false)]
        public PurchaseOrderPaymentDtoValidator PurchaseOrderPayment { get; set; }

        /// <summary>
        /// Gets or Sets CreditCardPayment
        /// </summary>
        [DataMember(Name="creditCardPayment", EmitDefaultValue=false)]
        public CreditCardPaymentDtoValidator CreditCardPayment { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalEmailNotifications
        /// </summary>
        [DataMember(Name="additionalEmailNotifications", EmitDefaultValue=false)]
        public AdditionalEmailAddressDtoValidator AdditionalEmailNotifications { get; set; }

        /// <summary>
        /// Gets or Sets FileMetaData
        /// </summary>
        [DataMember(Name="fileMetaData", EmitDefaultValue=false)]
        public FileMetaDataDto FileMetaData { get; set; }

        /// <summary>
        /// Gets or Sets TierApproverDetails
        /// </summary>
        [DataMember(Name="tierApproverDetails", EmitDefaultValue=false)]
        public List<TierApproverDetailsDto> TierApproverDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BasicOrderDto {\n");
            sb.Append("  CustomerEmail: ").Append(CustomerEmail).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  LoginId: ").Append(LoginId).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  QuoteNumber: ").Append(QuoteNumber).Append("\n");
            sb.Append("  Salutation: ").Append(Salutation).Append("\n");
            sb.Append("  VatExempted: ").Append(VatExempted).Append("\n");
            sb.Append("  ShippingGroup: ").Append(ShippingGroup).Append("\n");
            sb.Append("  PurchaseOrderPayment: ").Append(PurchaseOrderPayment).Append("\n");
            sb.Append("  CreditCardPayment: ").Append(CreditCardPayment).Append("\n");
            sb.Append("  AdditionalEmailNotifications: ").Append(AdditionalEmailNotifications).Append("\n");
            sb.Append("  FileMetaData: ").Append(FileMetaData).Append("\n");
            sb.Append("  TierApproverDetails: ").Append(TierApproverDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BasicOrderDto);
        }

        /// <summary>
        /// Returns true if BasicOrderDto instances are equal
        /// </summary>
        /// <param name="input">Instance of BasicOrderDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BasicOrderDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomerEmail == input.CustomerEmail ||
                    (this.CustomerEmail != null &&
                    this.CustomerEmail.Equals(input.CustomerEmail))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.LoginId == input.LoginId ||
                    (this.LoginId != null &&
                    this.LoginId.Equals(input.LoginId))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.QuoteNumber == input.QuoteNumber ||
                    (this.QuoteNumber != null &&
                    this.QuoteNumber.Equals(input.QuoteNumber))
                ) && 
                (
                    this.Salutation == input.Salutation ||
                    (this.Salutation != null &&
                    this.Salutation.Equals(input.Salutation))
                ) && 
                (
                    this.VatExempted == input.VatExempted ||
                    (this.VatExempted != null &&
                    this.VatExempted.Equals(input.VatExempted))
                ) && 
                (
                    this.ShippingGroup == input.ShippingGroup ||
                    (this.ShippingGroup != null &&
                    this.ShippingGroup.Equals(input.ShippingGroup))
                ) && 
                (
                    this.PurchaseOrderPayment == input.PurchaseOrderPayment ||
                    (this.PurchaseOrderPayment != null &&
                    this.PurchaseOrderPayment.Equals(input.PurchaseOrderPayment))
                ) && 
                (
                    this.CreditCardPayment == input.CreditCardPayment ||
                    (this.CreditCardPayment != null &&
                    this.CreditCardPayment.Equals(input.CreditCardPayment))
                ) && 
                (
                    this.AdditionalEmailNotifications == input.AdditionalEmailNotifications ||
                    (this.AdditionalEmailNotifications != null &&
                    this.AdditionalEmailNotifications.Equals(input.AdditionalEmailNotifications))
                ) && 
                (
                    this.FileMetaData == input.FileMetaData ||
                    (this.FileMetaData != null &&
                    this.FileMetaData.Equals(input.FileMetaData))
                ) && 
                (
                    this.TierApproverDetails == input.TierApproverDetails ||
                    this.TierApproverDetails != null &&
                    this.TierApproverDetails.SequenceEqual(input.TierApproverDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerEmail != null)
                    hashCode = hashCode * 59 + this.CustomerEmail.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.LoginId != null)
                    hashCode = hashCode * 59 + this.LoginId.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.QuoteNumber != null)
                    hashCode = hashCode * 59 + this.QuoteNumber.GetHashCode();
                if (this.Salutation != null)
                    hashCode = hashCode * 59 + this.Salutation.GetHashCode();
                if (this.VatExempted != null)
                    hashCode = hashCode * 59 + this.VatExempted.GetHashCode();
                if (this.ShippingGroup != null)
                    hashCode = hashCode * 59 + this.ShippingGroup.GetHashCode();
                if (this.PurchaseOrderPayment != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderPayment.GetHashCode();
                if (this.CreditCardPayment != null)
                    hashCode = hashCode * 59 + this.CreditCardPayment.GetHashCode();
                if (this.AdditionalEmailNotifications != null)
                    hashCode = hashCode * 59 + this.AdditionalEmailNotifications.GetHashCode();
                if (this.FileMetaData != null)
                    hashCode = hashCode * 59 + this.FileMetaData.GetHashCode();
                if (this.TierApproverDetails != null)
                    hashCode = hashCode * 59 + this.TierApproverDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
