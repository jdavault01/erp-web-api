/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// ReplacementPartNumbDto
    /// </summary>
    [DataContract]
    public partial class ReplacementPartNumbDto :  IEquatable<ReplacementPartNumbDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplacementPartNumbDto" /> class.
        /// </summary>
        /// <param name="OriginalPartNumber">OriginalPartNumber.</param>
        /// <param name="ReplacementPartNumber">ReplacementPartNumber.</param>
        /// <param name="OriginalPartNumberTitle">OriginalPartNumberTitle.</param>
        /// <param name="Quantity">Quantity.</param>
        /// <param name="ReplacementPartNumberTitle">ReplacementPartNumberTitle.</param>
        public ReplacementPartNumbDto(string OriginalPartNumber = default(string), string ReplacementPartNumber = default(string), string OriginalPartNumberTitle = default(string), int? Quantity = default(int?), string ReplacementPartNumberTitle = default(string))
        {
            this.OriginalPartNumber = OriginalPartNumber;
            this.ReplacementPartNumber = ReplacementPartNumber;
            this.OriginalPartNumberTitle = OriginalPartNumberTitle;
            this.Quantity = Quantity;
            this.ReplacementPartNumberTitle = ReplacementPartNumberTitle;
        }
        
        /// <summary>
        /// Gets or Sets OriginalPartNumber
        /// </summary>
        [DataMember(Name="originalPartNumber", EmitDefaultValue=false)]
        public string OriginalPartNumber { get; set; }

        /// <summary>
        /// Gets or Sets ReplacementPartNumber
        /// </summary>
        [DataMember(Name="replacementPartNumber", EmitDefaultValue=false)]
        public string ReplacementPartNumber { get; set; }

        /// <summary>
        /// Gets or Sets OriginalPartNumberTitle
        /// </summary>
        [DataMember(Name="originalPartNumberTitle", EmitDefaultValue=false)]
        public string OriginalPartNumberTitle { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets ReplacementPartNumberTitle
        /// </summary>
        [DataMember(Name="replacementPartNumberTitle", EmitDefaultValue=false)]
        public string ReplacementPartNumberTitle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReplacementPartNumbDto {\n");
            sb.Append("  OriginalPartNumber: ").Append(OriginalPartNumber).Append("\n");
            sb.Append("  ReplacementPartNumber: ").Append(ReplacementPartNumber).Append("\n");
            sb.Append("  OriginalPartNumberTitle: ").Append(OriginalPartNumberTitle).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ReplacementPartNumberTitle: ").Append(ReplacementPartNumberTitle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReplacementPartNumbDto);
        }

        /// <summary>
        /// Returns true if ReplacementPartNumbDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ReplacementPartNumbDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReplacementPartNumbDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OriginalPartNumber == input.OriginalPartNumber ||
                    (this.OriginalPartNumber != null &&
                    this.OriginalPartNumber.Equals(input.OriginalPartNumber))
                ) && 
                (
                    this.ReplacementPartNumber == input.ReplacementPartNumber ||
                    (this.ReplacementPartNumber != null &&
                    this.ReplacementPartNumber.Equals(input.ReplacementPartNumber))
                ) && 
                (
                    this.OriginalPartNumberTitle == input.OriginalPartNumberTitle ||
                    (this.OriginalPartNumberTitle != null &&
                    this.OriginalPartNumberTitle.Equals(input.OriginalPartNumberTitle))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.ReplacementPartNumberTitle == input.ReplacementPartNumberTitle ||
                    (this.ReplacementPartNumberTitle != null &&
                    this.ReplacementPartNumberTitle.Equals(input.ReplacementPartNumberTitle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OriginalPartNumber != null)
                    hashCode = hashCode * 59 + this.OriginalPartNumber.GetHashCode();
                if (this.ReplacementPartNumber != null)
                    hashCode = hashCode * 59 + this.ReplacementPartNumber.GetHashCode();
                if (this.OriginalPartNumberTitle != null)
                    hashCode = hashCode * 59 + this.OriginalPartNumberTitle.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.ReplacementPartNumberTitle != null)
                    hashCode = hashCode * 59 + this.ReplacementPartNumberTitle.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
