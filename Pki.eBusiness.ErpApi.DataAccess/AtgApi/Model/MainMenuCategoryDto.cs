/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// MainMenuCategoryDto
    /// </summary>
    [DataContract]
    public partial class MainMenuCategoryDto :  IEquatable<MainMenuCategoryDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MainMenuCategoryDto" /> class.
        /// </summary>
        /// <param name="URL">URL.</param>
        /// <param name="EcommerceEnabled">EcommerceEnabled.</param>
        /// <param name="ExternalURL">ExternalURL.</param>
        /// <param name="LogoDescription">LogoDescription.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Target">Target.</param>
        /// <param name="TemplateId">TemplateId.</param>
        /// <param name="Title">Title.</param>
        /// <param name="ChildCategory">ChildCategory.</param>
        /// <param name="TitleChildCategory">TitleChildCategory.</param>
        /// <param name="ImageDetails">ImageDetails.</param>
        public MainMenuCategoryDto(string URL = default(string), bool? EcommerceEnabled = default(bool?), bool? ExternalURL = default(bool?), string LogoDescription = default(string), string Name = default(string), string Target = default(string), string TemplateId = default(string), string Title = default(string), List<MainMenuCategoryDto> ChildCategory = default(List<MainMenuCategoryDto>), List<MainMenuCategoryDto> TitleChildCategory = default(List<MainMenuCategoryDto>), ImageDto ImageDetails = default(ImageDto))
        {
            this.URL = URL;
            this.EcommerceEnabled = EcommerceEnabled;
            this.ExternalURL = ExternalURL;
            this.LogoDescription = LogoDescription;
            this.Name = Name;
            this.Target = Target;
            this.TemplateId = TemplateId;
            this.Title = Title;
            this.ChildCategory = ChildCategory;
            this.TitleChildCategory = TitleChildCategory;
            this.ImageDetails = ImageDetails;
        }
        
        /// <summary>
        /// Gets or Sets URL
        /// </summary>
        [DataMember(Name="URL", EmitDefaultValue=false)]
        public string URL { get; set; }

        /// <summary>
        /// Gets or Sets EcommerceEnabled
        /// </summary>
        [DataMember(Name="ecommerceEnabled", EmitDefaultValue=false)]
        public bool? EcommerceEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ExternalURL
        /// </summary>
        [DataMember(Name="externalURL", EmitDefaultValue=false)]
        public bool? ExternalURL { get; set; }

        /// <summary>
        /// Gets or Sets LogoDescription
        /// </summary>
        [DataMember(Name="logoDescription", EmitDefaultValue=false)]
        public string LogoDescription { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public string Target { get; set; }

        /// <summary>
        /// Gets or Sets TemplateId
        /// </summary>
        [DataMember(Name="templateId", EmitDefaultValue=false)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets ChildCategory
        /// </summary>
        [DataMember(Name="childCategory", EmitDefaultValue=false)]
        public List<MainMenuCategoryDto> ChildCategory { get; set; }

        /// <summary>
        /// Gets or Sets TitleChildCategory
        /// </summary>
        [DataMember(Name="titleChildCategory", EmitDefaultValue=false)]
        public List<MainMenuCategoryDto> TitleChildCategory { get; set; }

        /// <summary>
        /// Gets or Sets ImageDetails
        /// </summary>
        [DataMember(Name="imageDetails", EmitDefaultValue=false)]
        public ImageDto ImageDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MainMenuCategoryDto {\n");
            sb.Append("  URL: ").Append(URL).Append("\n");
            sb.Append("  EcommerceEnabled: ").Append(EcommerceEnabled).Append("\n");
            sb.Append("  ExternalURL: ").Append(ExternalURL).Append("\n");
            sb.Append("  LogoDescription: ").Append(LogoDescription).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  ChildCategory: ").Append(ChildCategory).Append("\n");
            sb.Append("  TitleChildCategory: ").Append(TitleChildCategory).Append("\n");
            sb.Append("  ImageDetails: ").Append(ImageDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MainMenuCategoryDto);
        }

        /// <summary>
        /// Returns true if MainMenuCategoryDto instances are equal
        /// </summary>
        /// <param name="input">Instance of MainMenuCategoryDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MainMenuCategoryDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.URL == input.URL ||
                    (this.URL != null &&
                    this.URL.Equals(input.URL))
                ) && 
                (
                    this.EcommerceEnabled == input.EcommerceEnabled ||
                    (this.EcommerceEnabled != null &&
                    this.EcommerceEnabled.Equals(input.EcommerceEnabled))
                ) && 
                (
                    this.ExternalURL == input.ExternalURL ||
                    (this.ExternalURL != null &&
                    this.ExternalURL.Equals(input.ExternalURL))
                ) && 
                (
                    this.LogoDescription == input.LogoDescription ||
                    (this.LogoDescription != null &&
                    this.LogoDescription.Equals(input.LogoDescription))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                ) && 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.ChildCategory == input.ChildCategory ||
                    this.ChildCategory != null &&
                    this.ChildCategory.SequenceEqual(input.ChildCategory)
                ) && 
                (
                    this.TitleChildCategory == input.TitleChildCategory ||
                    this.TitleChildCategory != null &&
                    this.TitleChildCategory.SequenceEqual(input.TitleChildCategory)
                ) && 
                (
                    this.ImageDetails == input.ImageDetails ||
                    (this.ImageDetails != null &&
                    this.ImageDetails.Equals(input.ImageDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.URL != null)
                    hashCode = hashCode * 59 + this.URL.GetHashCode();
                if (this.EcommerceEnabled != null)
                    hashCode = hashCode * 59 + this.EcommerceEnabled.GetHashCode();
                if (this.ExternalURL != null)
                    hashCode = hashCode * 59 + this.ExternalURL.GetHashCode();
                if (this.LogoDescription != null)
                    hashCode = hashCode * 59 + this.LogoDescription.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Target != null)
                    hashCode = hashCode * 59 + this.Target.GetHashCode();
                if (this.TemplateId != null)
                    hashCode = hashCode * 59 + this.TemplateId.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.ChildCategory != null)
                    hashCode = hashCode * 59 + this.ChildCategory.GetHashCode();
                if (this.TitleChildCategory != null)
                    hashCode = hashCode * 59 + this.TitleChildCategory.GetHashCode();
                if (this.ImageDetails != null)
                    hashCode = hashCode * 59 + this.ImageDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
