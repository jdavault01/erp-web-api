/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// ShippingNotificationOrderDto
    /// </summary>
    [DataContract]
    public partial class ShippingNotificationOrderDto :  IEquatable<ShippingNotificationOrderDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingNotificationOrderDto" /> class.
        /// </summary>
        /// <param name="CcLast4">CcLast4.</param>
        /// <param name="CcType">CcType.</param>
        /// <param name="CustomerPO">CustomerPO.</param>
        /// <param name="SapON">SapON.</param>
        /// <param name="ShipToAttn">ShipToAttn.</param>
        /// <param name="WebON">WebON.</param>
        /// <param name="OrderItems">OrderItems.</param>
        public ShippingNotificationOrderDto(string CcLast4 = default(string), string CcType = default(string), string CustomerPO = default(string), string SapON = default(string), string ShipToAttn = default(string), string WebON = default(string), ShippingNotificationValidator OrderItems = default(ShippingNotificationValidator))
        {
            this.CcLast4 = CcLast4;
            this.CcType = CcType;
            this.CustomerPO = CustomerPO;
            this.SapON = SapON;
            this.ShipToAttn = ShipToAttn;
            this.WebON = WebON;
            this.OrderItems = OrderItems;
        }
        
        /// <summary>
        /// Gets or Sets CcLast4
        /// </summary>
        [DataMember(Name="ccLast4", EmitDefaultValue=false)]
        public string CcLast4 { get; set; }

        /// <summary>
        /// Gets or Sets CcType
        /// </summary>
        [DataMember(Name="ccType", EmitDefaultValue=false)]
        public string CcType { get; set; }

        /// <summary>
        /// Gets or Sets CustomerPO
        /// </summary>
        [DataMember(Name="customerPO", EmitDefaultValue=false)]
        public string CustomerPO { get; set; }

        /// <summary>
        /// Gets or Sets SapON
        /// </summary>
        [DataMember(Name="sapON", EmitDefaultValue=false)]
        public string SapON { get; set; }

        /// <summary>
        /// Gets or Sets ShipToAttn
        /// </summary>
        [DataMember(Name="shipToAttn", EmitDefaultValue=false)]
        public string ShipToAttn { get; set; }

        /// <summary>
        /// Gets or Sets WebON
        /// </summary>
        [DataMember(Name="webON", EmitDefaultValue=false)]
        public string WebON { get; set; }

        /// <summary>
        /// Gets or Sets OrderItems
        /// </summary>
        [DataMember(Name="orderItems", EmitDefaultValue=false)]
        public ShippingNotificationValidator OrderItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShippingNotificationOrderDto {\n");
            sb.Append("  CcLast4: ").Append(CcLast4).Append("\n");
            sb.Append("  CcType: ").Append(CcType).Append("\n");
            sb.Append("  CustomerPO: ").Append(CustomerPO).Append("\n");
            sb.Append("  SapON: ").Append(SapON).Append("\n");
            sb.Append("  ShipToAttn: ").Append(ShipToAttn).Append("\n");
            sb.Append("  WebON: ").Append(WebON).Append("\n");
            sb.Append("  OrderItems: ").Append(OrderItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShippingNotificationOrderDto);
        }

        /// <summary>
        /// Returns true if ShippingNotificationOrderDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ShippingNotificationOrderDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShippingNotificationOrderDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CcLast4 == input.CcLast4 ||
                    (this.CcLast4 != null &&
                    this.CcLast4.Equals(input.CcLast4))
                ) && 
                (
                    this.CcType == input.CcType ||
                    (this.CcType != null &&
                    this.CcType.Equals(input.CcType))
                ) && 
                (
                    this.CustomerPO == input.CustomerPO ||
                    (this.CustomerPO != null &&
                    this.CustomerPO.Equals(input.CustomerPO))
                ) && 
                (
                    this.SapON == input.SapON ||
                    (this.SapON != null &&
                    this.SapON.Equals(input.SapON))
                ) && 
                (
                    this.ShipToAttn == input.ShipToAttn ||
                    (this.ShipToAttn != null &&
                    this.ShipToAttn.Equals(input.ShipToAttn))
                ) && 
                (
                    this.WebON == input.WebON ||
                    (this.WebON != null &&
                    this.WebON.Equals(input.WebON))
                ) && 
                (
                    this.OrderItems == input.OrderItems ||
                    (this.OrderItems != null &&
                    this.OrderItems.Equals(input.OrderItems))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CcLast4 != null)
                    hashCode = hashCode * 59 + this.CcLast4.GetHashCode();
                if (this.CcType != null)
                    hashCode = hashCode * 59 + this.CcType.GetHashCode();
                if (this.CustomerPO != null)
                    hashCode = hashCode * 59 + this.CustomerPO.GetHashCode();
                if (this.SapON != null)
                    hashCode = hashCode * 59 + this.SapON.GetHashCode();
                if (this.ShipToAttn != null)
                    hashCode = hashCode * 59 + this.ShipToAttn.GetHashCode();
                if (this.WebON != null)
                    hashCode = hashCode * 59 + this.WebON.GetHashCode();
                if (this.OrderItems != null)
                    hashCode = hashCode * 59 + this.OrderItems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
