/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// ContactUsDto
    /// </summary>
    [DataContract]
    public partial class ContactUsDto :  IEquatable<ContactUsDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactUsDto" /> class.
        /// </summary>
        /// <param name="URL">URL.</param>
        /// <param name="DisplayName">DisplayName.</param>
        /// <param name="Email">Email.</param>
        /// <param name="FormattedAddress">FormattedAddress.</param>
        /// <param name="LocationType">LocationType.</param>
        /// <param name="SeeMoreURL">SeeMoreURL.</param>
        /// <param name="Text">Text.</param>
        /// <param name="EmailAddresses">EmailAddresses.</param>
        /// <param name="PhoneNumbers">PhoneNumbers.</param>
        public ContactUsDto(string URL = default(string), string DisplayName = default(string), string Email = default(string), string FormattedAddress = default(string), string LocationType = default(string), string SeeMoreURL = default(string), string Text = default(string), List<Object> EmailAddresses = default(List<Object>), List<Object> PhoneNumbers = default(List<Object>))
        {
            this.URL = URL;
            this.DisplayName = DisplayName;
            this.Email = Email;
            this.FormattedAddress = FormattedAddress;
            this.LocationType = LocationType;
            this.SeeMoreURL = SeeMoreURL;
            this.Text = Text;
            this.EmailAddresses = EmailAddresses;
            this.PhoneNumbers = PhoneNumbers;
        }
        
        /// <summary>
        /// Gets or Sets URL
        /// </summary>
        [DataMember(Name="URL", EmitDefaultValue=false)]
        public string URL { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets FormattedAddress
        /// </summary>
        [DataMember(Name="formattedAddress", EmitDefaultValue=false)]
        public string FormattedAddress { get; set; }

        /// <summary>
        /// Gets or Sets LocationType
        /// </summary>
        [DataMember(Name="locationType", EmitDefaultValue=false)]
        public string LocationType { get; set; }

        /// <summary>
        /// Gets or Sets SeeMoreURL
        /// </summary>
        [DataMember(Name="seeMoreURL", EmitDefaultValue=false)]
        public string SeeMoreURL { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddresses
        /// </summary>
        [DataMember(Name="emailAddresses", EmitDefaultValue=false)]
        public List<Object> EmailAddresses { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumbers
        /// </summary>
        [DataMember(Name="phoneNumbers", EmitDefaultValue=false)]
        public List<Object> PhoneNumbers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactUsDto {\n");
            sb.Append("  URL: ").Append(URL).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FormattedAddress: ").Append(FormattedAddress).Append("\n");
            sb.Append("  LocationType: ").Append(LocationType).Append("\n");
            sb.Append("  SeeMoreURL: ").Append(SeeMoreURL).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  EmailAddresses: ").Append(EmailAddresses).Append("\n");
            sb.Append("  PhoneNumbers: ").Append(PhoneNumbers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContactUsDto);
        }

        /// <summary>
        /// Returns true if ContactUsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ContactUsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactUsDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.URL == input.URL ||
                    (this.URL != null &&
                    this.URL.Equals(input.URL))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FormattedAddress == input.FormattedAddress ||
                    (this.FormattedAddress != null &&
                    this.FormattedAddress.Equals(input.FormattedAddress))
                ) && 
                (
                    this.LocationType == input.LocationType ||
                    (this.LocationType != null &&
                    this.LocationType.Equals(input.LocationType))
                ) && 
                (
                    this.SeeMoreURL == input.SeeMoreURL ||
                    (this.SeeMoreURL != null &&
                    this.SeeMoreURL.Equals(input.SeeMoreURL))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.EmailAddresses == input.EmailAddresses ||
                    this.EmailAddresses != null &&
                    this.EmailAddresses.SequenceEqual(input.EmailAddresses)
                ) && 
                (
                    this.PhoneNumbers == input.PhoneNumbers ||
                    this.PhoneNumbers != null &&
                    this.PhoneNumbers.SequenceEqual(input.PhoneNumbers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.URL != null)
                    hashCode = hashCode * 59 + this.URL.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.FormattedAddress != null)
                    hashCode = hashCode * 59 + this.FormattedAddress.GetHashCode();
                if (this.LocationType != null)
                    hashCode = hashCode * 59 + this.LocationType.GetHashCode();
                if (this.SeeMoreURL != null)
                    hashCode = hashCode * 59 + this.SeeMoreURL.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.EmailAddresses != null)
                    hashCode = hashCode * 59 + this.EmailAddresses.GetHashCode();
                if (this.PhoneNumbers != null)
                    hashCode = hashCode * 59 + this.PhoneNumbers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
