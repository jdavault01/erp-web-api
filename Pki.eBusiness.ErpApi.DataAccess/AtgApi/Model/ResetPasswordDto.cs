/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// ResetPasswordDto
    /// </summary>
    [DataContract]
    public partial class ResetPasswordDto :  IEquatable<ResetPasswordDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResetPasswordDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResetPasswordDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResetPasswordDto" /> class.
        /// </summary>
        /// <param name="NewPassword">NewPassword (required).</param>
        /// <param name="ConfirmNewPassword">ConfirmNewPassword (required).</param>
        public ResetPasswordDto(string NewPassword = default(string), string ConfirmNewPassword = default(string))
        {
            // to ensure "NewPassword" is required (not null)
            if (NewPassword == null)
            {
                throw new InvalidDataException("NewPassword is a required property for ResetPasswordDto and cannot be null");
            }
            else
            {
                this.NewPassword = NewPassword;
            }
            // to ensure "ConfirmNewPassword" is required (not null)
            if (ConfirmNewPassword == null)
            {
                throw new InvalidDataException("ConfirmNewPassword is a required property for ResetPasswordDto and cannot be null");
            }
            else
            {
                this.ConfirmNewPassword = ConfirmNewPassword;
            }
        }
        
        /// <summary>
        /// Gets or Sets NewPassword
        /// </summary>
        [DataMember(Name="newPassword", EmitDefaultValue=false)]
        public string NewPassword { get; set; }

        /// <summary>
        /// Gets or Sets ConfirmNewPassword
        /// </summary>
        [DataMember(Name="confirmNewPassword", EmitDefaultValue=false)]
        public string ConfirmNewPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResetPasswordDto {\n");
            sb.Append("  NewPassword: ").Append(NewPassword).Append("\n");
            sb.Append("  ConfirmNewPassword: ").Append(ConfirmNewPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResetPasswordDto);
        }

        /// <summary>
        /// Returns true if ResetPasswordDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ResetPasswordDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResetPasswordDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NewPassword == input.NewPassword ||
                    (this.NewPassword != null &&
                    this.NewPassword.Equals(input.NewPassword))
                ) && 
                (
                    this.ConfirmNewPassword == input.ConfirmNewPassword ||
                    (this.ConfirmNewPassword != null &&
                    this.ConfirmNewPassword.Equals(input.ConfirmNewPassword))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NewPassword != null)
                    hashCode = hashCode * 59 + this.NewPassword.GetHashCode();
                if (this.ConfirmNewPassword != null)
                    hashCode = hashCode * 59 + this.ConfirmNewPassword.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
