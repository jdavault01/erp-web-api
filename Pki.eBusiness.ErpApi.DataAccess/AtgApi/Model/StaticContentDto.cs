/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// StaticContentDto
    /// </summary>
    [DataContract]
    public partial class StaticContentDto :  IEquatable<StaticContentDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StaticContentDto" /> class.
        /// </summary>
        /// <param name="KeyName">KeyName.</param>
        /// <param name="KeyValue">KeyValue.</param>
        /// <param name="TransValues">TransValues.</param>
        public StaticContentDto(string KeyName = default(string), string KeyValue = default(string), List<TranslationDto> TransValues = default(List<TranslationDto>))
        {
            this.KeyName = KeyName;
            this.KeyValue = KeyValue;
            this.TransValues = TransValues;
        }
        
        /// <summary>
        /// Gets or Sets KeyName
        /// </summary>
        [DataMember(Name="keyName", EmitDefaultValue=false)]
        public string KeyName { get; set; }

        /// <summary>
        /// Gets or Sets KeyValue
        /// </summary>
        [DataMember(Name="keyValue", EmitDefaultValue=false)]
        public string KeyValue { get; set; }

        /// <summary>
        /// Gets or Sets TransValues
        /// </summary>
        [DataMember(Name="transValues", EmitDefaultValue=false)]
        public List<TranslationDto> TransValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StaticContentDto {\n");
            sb.Append("  KeyName: ").Append(KeyName).Append("\n");
            sb.Append("  KeyValue: ").Append(KeyValue).Append("\n");
            sb.Append("  TransValues: ").Append(TransValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StaticContentDto);
        }

        /// <summary>
        /// Returns true if StaticContentDto instances are equal
        /// </summary>
        /// <param name="input">Instance of StaticContentDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StaticContentDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.KeyName == input.KeyName ||
                    (this.KeyName != null &&
                    this.KeyName.Equals(input.KeyName))
                ) && 
                (
                    this.KeyValue == input.KeyValue ||
                    (this.KeyValue != null &&
                    this.KeyValue.Equals(input.KeyValue))
                ) && 
                (
                    this.TransValues == input.TransValues ||
                    this.TransValues != null &&
                    this.TransValues.SequenceEqual(input.TransValues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.KeyName != null)
                    hashCode = hashCode * 59 + this.KeyName.GetHashCode();
                if (this.KeyValue != null)
                    hashCode = hashCode * 59 + this.KeyValue.GetHashCode();
                if (this.TransValues != null)
                    hashCode = hashCode * 59 + this.TransValues.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
