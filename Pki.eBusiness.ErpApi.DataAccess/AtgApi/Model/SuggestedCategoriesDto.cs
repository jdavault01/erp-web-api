/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// SuggestedCategoriesDto
    /// </summary>
    [DataContract]
    public partial class SuggestedCategoriesDto :  IEquatable<SuggestedCategoriesDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SuggestedCategoriesDto" /> class.
        /// </summary>
        /// <param name="SeoDisplayName">SeoDisplayName.</param>
        /// <param name="SeoUrl">SeoUrl.</param>
        /// <param name="Target">Target.</param>
        public SuggestedCategoriesDto(string SeoDisplayName = default(string), string SeoUrl = default(string), string Target = default(string))
        {
            this.SeoDisplayName = SeoDisplayName;
            this.SeoUrl = SeoUrl;
            this.Target = Target;
        }
        
        /// <summary>
        /// Gets or Sets SeoDisplayName
        /// </summary>
        [DataMember(Name="seoDisplayName", EmitDefaultValue=false)]
        public string SeoDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets SeoUrl
        /// </summary>
        [DataMember(Name="seoUrl", EmitDefaultValue=false)]
        public string SeoUrl { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public string Target { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SuggestedCategoriesDto {\n");
            sb.Append("  SeoDisplayName: ").Append(SeoDisplayName).Append("\n");
            sb.Append("  SeoUrl: ").Append(SeoUrl).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SuggestedCategoriesDto);
        }

        /// <summary>
        /// Returns true if SuggestedCategoriesDto instances are equal
        /// </summary>
        /// <param name="input">Instance of SuggestedCategoriesDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SuggestedCategoriesDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SeoDisplayName == input.SeoDisplayName ||
                    (this.SeoDisplayName != null &&
                    this.SeoDisplayName.Equals(input.SeoDisplayName))
                ) && 
                (
                    this.SeoUrl == input.SeoUrl ||
                    (this.SeoUrl != null &&
                    this.SeoUrl.Equals(input.SeoUrl))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SeoDisplayName != null)
                    hashCode = hashCode * 59 + this.SeoDisplayName.GetHashCode();
                if (this.SeoUrl != null)
                    hashCode = hashCode * 59 + this.SeoUrl.GetHashCode();
                if (this.Target != null)
                    hashCode = hashCode * 59 + this.Target.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
