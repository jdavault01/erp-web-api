/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// CreditCardPaymentDtoValidator
    /// </summary>
    [DataContract]
    public partial class CreditCardPaymentDtoValidator :  IEquatable<CreditCardPaymentDtoValidator>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditCardPaymentDtoValidator" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreditCardPaymentDtoValidator() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditCardPaymentDtoValidator" /> class.
        /// </summary>
        /// <param name="CreditCardNumber">CreditCardNumber (required).</param>
        /// <param name="ExpirationMonth">ExpirationMonth (required).</param>
        /// <param name="CardHolderName">CardHolderName.</param>
        /// <param name="CardVerificationNumber">CardVerificationNumber.</param>
        /// <param name="CreditCardType">CreditCardType.</param>
        /// <param name="ExpirationYear">ExpirationYear.</param>
        /// <param name="InternalPoNumber">InternalPoNumber.</param>
        /// <param name="PaymentType">PaymentType.</param>
        /// <param name="BillToAddress">BillToAddress.</param>
        public CreditCardPaymentDtoValidator(string CreditCardNumber = default(string), string ExpirationMonth = default(string), string CardHolderName = default(string), string CardVerificationNumber = default(string), string CreditCardType = default(string), string ExpirationYear = default(string), string InternalPoNumber = default(string), string PaymentType = default(string), AddressDtoValidator BillToAddress = default(AddressDtoValidator))
        {
            // to ensure "CreditCardNumber" is required (not null)
            if (CreditCardNumber == null)
            {
                throw new InvalidDataException("CreditCardNumber is a required property for CreditCardPaymentDtoValidator and cannot be null");
            }
            else
            {
                this.CreditCardNumber = CreditCardNumber;
            }
            // to ensure "ExpirationMonth" is required (not null)
            if (ExpirationMonth == null)
            {
                throw new InvalidDataException("ExpirationMonth is a required property for CreditCardPaymentDtoValidator and cannot be null");
            }
            else
            {
                this.ExpirationMonth = ExpirationMonth;
            }
            this.CardHolderName = CardHolderName;
            this.CardVerificationNumber = CardVerificationNumber;
            this.CreditCardType = CreditCardType;
            this.ExpirationYear = ExpirationYear;
            this.InternalPoNumber = InternalPoNumber;
            this.PaymentType = PaymentType;
            this.BillToAddress = BillToAddress;
        }
        
        /// <summary>
        /// Gets or Sets CreditCardNumber
        /// </summary>
        [DataMember(Name="creditCardNumber", EmitDefaultValue=false)]
        public string CreditCardNumber { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationMonth
        /// </summary>
        [DataMember(Name="expirationMonth", EmitDefaultValue=false)]
        public string ExpirationMonth { get; set; }

        /// <summary>
        /// Gets or Sets CardHolderName
        /// </summary>
        [DataMember(Name="cardHolderName", EmitDefaultValue=false)]
        public string CardHolderName { get; set; }

        /// <summary>
        /// Gets or Sets CardVerificationNumber
        /// </summary>
        [DataMember(Name="cardVerificationNumber", EmitDefaultValue=false)]
        public string CardVerificationNumber { get; set; }

        /// <summary>
        /// Gets or Sets CreditCardType
        /// </summary>
        [DataMember(Name="creditCardType", EmitDefaultValue=false)]
        public string CreditCardType { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationYear
        /// </summary>
        [DataMember(Name="expirationYear", EmitDefaultValue=false)]
        public string ExpirationYear { get; set; }

        /// <summary>
        /// Gets or Sets InternalPoNumber
        /// </summary>
        [DataMember(Name="internalPoNumber", EmitDefaultValue=false)]
        public string InternalPoNumber { get; set; }

        /// <summary>
        /// Gets or Sets PaymentType
        /// </summary>
        [DataMember(Name="paymentType", EmitDefaultValue=false)]
        public string PaymentType { get; set; }

        /// <summary>
        /// Gets or Sets BillToAddress
        /// </summary>
        [DataMember(Name="billToAddress", EmitDefaultValue=false)]
        public AddressDtoValidator BillToAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditCardPaymentDtoValidator {\n");
            sb.Append("  CreditCardNumber: ").Append(CreditCardNumber).Append("\n");
            sb.Append("  ExpirationMonth: ").Append(ExpirationMonth).Append("\n");
            sb.Append("  CardHolderName: ").Append(CardHolderName).Append("\n");
            sb.Append("  CardVerificationNumber: ").Append(CardVerificationNumber).Append("\n");
            sb.Append("  CreditCardType: ").Append(CreditCardType).Append("\n");
            sb.Append("  ExpirationYear: ").Append(ExpirationYear).Append("\n");
            sb.Append("  InternalPoNumber: ").Append(InternalPoNumber).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  BillToAddress: ").Append(BillToAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditCardPaymentDtoValidator);
        }

        /// <summary>
        /// Returns true if CreditCardPaymentDtoValidator instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditCardPaymentDtoValidator to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditCardPaymentDtoValidator input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreditCardNumber == input.CreditCardNumber ||
                    (this.CreditCardNumber != null &&
                    this.CreditCardNumber.Equals(input.CreditCardNumber))
                ) && 
                (
                    this.ExpirationMonth == input.ExpirationMonth ||
                    (this.ExpirationMonth != null &&
                    this.ExpirationMonth.Equals(input.ExpirationMonth))
                ) && 
                (
                    this.CardHolderName == input.CardHolderName ||
                    (this.CardHolderName != null &&
                    this.CardHolderName.Equals(input.CardHolderName))
                ) && 
                (
                    this.CardVerificationNumber == input.CardVerificationNumber ||
                    (this.CardVerificationNumber != null &&
                    this.CardVerificationNumber.Equals(input.CardVerificationNumber))
                ) && 
                (
                    this.CreditCardType == input.CreditCardType ||
                    (this.CreditCardType != null &&
                    this.CreditCardType.Equals(input.CreditCardType))
                ) && 
                (
                    this.ExpirationYear == input.ExpirationYear ||
                    (this.ExpirationYear != null &&
                    this.ExpirationYear.Equals(input.ExpirationYear))
                ) && 
                (
                    this.InternalPoNumber == input.InternalPoNumber ||
                    (this.InternalPoNumber != null &&
                    this.InternalPoNumber.Equals(input.InternalPoNumber))
                ) && 
                (
                    this.PaymentType == input.PaymentType ||
                    (this.PaymentType != null &&
                    this.PaymentType.Equals(input.PaymentType))
                ) && 
                (
                    this.BillToAddress == input.BillToAddress ||
                    (this.BillToAddress != null &&
                    this.BillToAddress.Equals(input.BillToAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreditCardNumber != null)
                    hashCode = hashCode * 59 + this.CreditCardNumber.GetHashCode();
                if (this.ExpirationMonth != null)
                    hashCode = hashCode * 59 + this.ExpirationMonth.GetHashCode();
                if (this.CardHolderName != null)
                    hashCode = hashCode * 59 + this.CardHolderName.GetHashCode();
                if (this.CardVerificationNumber != null)
                    hashCode = hashCode * 59 + this.CardVerificationNumber.GetHashCode();
                if (this.CreditCardType != null)
                    hashCode = hashCode * 59 + this.CreditCardType.GetHashCode();
                if (this.ExpirationYear != null)
                    hashCode = hashCode * 59 + this.ExpirationYear.GetHashCode();
                if (this.InternalPoNumber != null)
                    hashCode = hashCode * 59 + this.InternalPoNumber.GetHashCode();
                if (this.PaymentType != null)
                    hashCode = hashCode * 59 + this.PaymentType.GetHashCode();
                if (this.BillToAddress != null)
                    hashCode = hashCode * 59 + this.BillToAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
