/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// OrderPriceDto
    /// </summary>
    [DataContract]
    public partial class OrderPriceDto :  IEquatable<OrderPriceDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderPriceDto" /> class.
        /// </summary>
        /// <param name="Currency">Currency.</param>
        /// <param name="Discount">Discount.</param>
        /// <param name="OrderTotal">OrderTotal.</param>
        /// <param name="PromoCode">PromoCode.</param>
        /// <param name="PromoDescription">PromoDescription.</param>
        /// <param name="PromoSavingsAmount">PromoSavingsAmount.</param>
        /// <param name="ShippingCost">ShippingCost.</param>
        /// <param name="SubTotal">SubTotal.</param>
        /// <param name="TaxVAT">TaxVAT.</param>
        /// <param name="PriceAdjustment">PriceAdjustment.</param>
        public OrderPriceDto(string Currency = default(string), double? Discount = default(double?), double? OrderTotal = default(double?), string PromoCode = default(string), string PromoDescription = default(string), double? PromoSavingsAmount = default(double?), double? ShippingCost = default(double?), double? SubTotal = default(double?), double? TaxVAT = default(double?), List<PriceAdjustmentDto> PriceAdjustment = default(List<PriceAdjustmentDto>))
        {
            this.Currency = Currency;
            this.Discount = Discount;
            this.OrderTotal = OrderTotal;
            this.PromoCode = PromoCode;
            this.PromoDescription = PromoDescription;
            this.PromoSavingsAmount = PromoSavingsAmount;
            this.ShippingCost = ShippingCost;
            this.SubTotal = SubTotal;
            this.TaxVAT = TaxVAT;
            this.PriceAdjustment = PriceAdjustment;
        }
        
        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Discount
        /// </summary>
        [DataMember(Name="discount", EmitDefaultValue=false)]
        public double? Discount { get; set; }

        /// <summary>
        /// Gets or Sets OrderTotal
        /// </summary>
        [DataMember(Name="orderTotal", EmitDefaultValue=false)]
        public double? OrderTotal { get; set; }

        /// <summary>
        /// Gets or Sets PromoCode
        /// </summary>
        [DataMember(Name="promoCode", EmitDefaultValue=false)]
        public string PromoCode { get; set; }

        /// <summary>
        /// Gets or Sets PromoDescription
        /// </summary>
        [DataMember(Name="promoDescription", EmitDefaultValue=false)]
        public string PromoDescription { get; set; }

        /// <summary>
        /// Gets or Sets PromoSavingsAmount
        /// </summary>
        [DataMember(Name="promoSavingsAmount", EmitDefaultValue=false)]
        public double? PromoSavingsAmount { get; set; }

        /// <summary>
        /// Gets or Sets ShippingCost
        /// </summary>
        [DataMember(Name="shippingCost", EmitDefaultValue=false)]
        public double? ShippingCost { get; set; }

        /// <summary>
        /// Gets or Sets SubTotal
        /// </summary>
        [DataMember(Name="subTotal", EmitDefaultValue=false)]
        public double? SubTotal { get; set; }

        /// <summary>
        /// Gets or Sets TaxVAT
        /// </summary>
        [DataMember(Name="taxVAT", EmitDefaultValue=false)]
        public double? TaxVAT { get; set; }

        /// <summary>
        /// Gets or Sets PriceAdjustment
        /// </summary>
        [DataMember(Name="priceAdjustment", EmitDefaultValue=false)]
        public List<PriceAdjustmentDto> PriceAdjustment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderPriceDto {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  OrderTotal: ").Append(OrderTotal).Append("\n");
            sb.Append("  PromoCode: ").Append(PromoCode).Append("\n");
            sb.Append("  PromoDescription: ").Append(PromoDescription).Append("\n");
            sb.Append("  PromoSavingsAmount: ").Append(PromoSavingsAmount).Append("\n");
            sb.Append("  ShippingCost: ").Append(ShippingCost).Append("\n");
            sb.Append("  SubTotal: ").Append(SubTotal).Append("\n");
            sb.Append("  TaxVAT: ").Append(TaxVAT).Append("\n");
            sb.Append("  PriceAdjustment: ").Append(PriceAdjustment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderPriceDto);
        }

        /// <summary>
        /// Returns true if OrderPriceDto instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderPriceDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderPriceDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Discount == input.Discount ||
                    (this.Discount != null &&
                    this.Discount.Equals(input.Discount))
                ) && 
                (
                    this.OrderTotal == input.OrderTotal ||
                    (this.OrderTotal != null &&
                    this.OrderTotal.Equals(input.OrderTotal))
                ) && 
                (
                    this.PromoCode == input.PromoCode ||
                    (this.PromoCode != null &&
                    this.PromoCode.Equals(input.PromoCode))
                ) && 
                (
                    this.PromoDescription == input.PromoDescription ||
                    (this.PromoDescription != null &&
                    this.PromoDescription.Equals(input.PromoDescription))
                ) && 
                (
                    this.PromoSavingsAmount == input.PromoSavingsAmount ||
                    (this.PromoSavingsAmount != null &&
                    this.PromoSavingsAmount.Equals(input.PromoSavingsAmount))
                ) && 
                (
                    this.ShippingCost == input.ShippingCost ||
                    (this.ShippingCost != null &&
                    this.ShippingCost.Equals(input.ShippingCost))
                ) && 
                (
                    this.SubTotal == input.SubTotal ||
                    (this.SubTotal != null &&
                    this.SubTotal.Equals(input.SubTotal))
                ) && 
                (
                    this.TaxVAT == input.TaxVAT ||
                    (this.TaxVAT != null &&
                    this.TaxVAT.Equals(input.TaxVAT))
                ) && 
                (
                    this.PriceAdjustment == input.PriceAdjustment ||
                    this.PriceAdjustment != null &&
                    this.PriceAdjustment.SequenceEqual(input.PriceAdjustment)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Discount != null)
                    hashCode = hashCode * 59 + this.Discount.GetHashCode();
                if (this.OrderTotal != null)
                    hashCode = hashCode * 59 + this.OrderTotal.GetHashCode();
                if (this.PromoCode != null)
                    hashCode = hashCode * 59 + this.PromoCode.GetHashCode();
                if (this.PromoDescription != null)
                    hashCode = hashCode * 59 + this.PromoDescription.GetHashCode();
                if (this.PromoSavingsAmount != null)
                    hashCode = hashCode * 59 + this.PromoSavingsAmount.GetHashCode();
                if (this.ShippingCost != null)
                    hashCode = hashCode * 59 + this.ShippingCost.GetHashCode();
                if (this.SubTotal != null)
                    hashCode = hashCode * 59 + this.SubTotal.GetHashCode();
                if (this.TaxVAT != null)
                    hashCode = hashCode * 59 + this.TaxVAT.GetHashCode();
                if (this.PriceAdjustment != null)
                    hashCode = hashCode * 59 + this.PriceAdjustment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
