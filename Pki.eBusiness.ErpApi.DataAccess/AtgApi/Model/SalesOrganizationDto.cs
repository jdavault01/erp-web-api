/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// SalesOrganizationDto
    /// </summary>
    [DataContract]
    public partial class SalesOrganizationDto :  IEquatable<SalesOrganizationDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesOrganizationDto" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="ShowListPrice">ShowListPrice.</param>
        /// <param name="ShowListPriceForAnonymous">ShowListPriceForAnonymous.</param>
        /// <param name="ImagePath">ImagePath.</param>
        public SalesOrganizationDto(string Id = default(string), bool? ShowListPrice = default(bool?), bool? ShowListPriceForAnonymous = default(bool?), ImageDto ImagePath = default(ImageDto))
        {
            this.Id = Id;
            this.ShowListPrice = ShowListPrice;
            this.ShowListPriceForAnonymous = ShowListPriceForAnonymous;
            this.ImagePath = ImagePath;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ShowListPrice
        /// </summary>
        [DataMember(Name="showListPrice", EmitDefaultValue=false)]
        public bool? ShowListPrice { get; set; }

        /// <summary>
        /// Gets or Sets ShowListPriceForAnonymous
        /// </summary>
        [DataMember(Name="showListPriceForAnonymous", EmitDefaultValue=false)]
        public bool? ShowListPriceForAnonymous { get; set; }

        /// <summary>
        /// Gets or Sets ImagePath
        /// </summary>
        [DataMember(Name="imagePath", EmitDefaultValue=false)]
        public ImageDto ImagePath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SalesOrganizationDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ShowListPrice: ").Append(ShowListPrice).Append("\n");
            sb.Append("  ShowListPriceForAnonymous: ").Append(ShowListPriceForAnonymous).Append("\n");
            sb.Append("  ImagePath: ").Append(ImagePath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SalesOrganizationDto);
        }

        /// <summary>
        /// Returns true if SalesOrganizationDto instances are equal
        /// </summary>
        /// <param name="input">Instance of SalesOrganizationDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesOrganizationDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ShowListPrice == input.ShowListPrice ||
                    (this.ShowListPrice != null &&
                    this.ShowListPrice.Equals(input.ShowListPrice))
                ) && 
                (
                    this.ShowListPriceForAnonymous == input.ShowListPriceForAnonymous ||
                    (this.ShowListPriceForAnonymous != null &&
                    this.ShowListPriceForAnonymous.Equals(input.ShowListPriceForAnonymous))
                ) && 
                (
                    this.ImagePath == input.ImagePath ||
                    (this.ImagePath != null &&
                    this.ImagePath.Equals(input.ImagePath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ShowListPrice != null)
                    hashCode = hashCode * 59 + this.ShowListPrice.GetHashCode();
                if (this.ShowListPriceForAnonymous != null)
                    hashCode = hashCode * 59 + this.ShowListPriceForAnonymous.GetHashCode();
                if (this.ImagePath != null)
                    hashCode = hashCode * 59 + this.ImagePath.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
