/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// BasicUserDto
    /// </summary>
    [DataContract]
    public partial class BasicUserDto :  IEquatable<BasicUserDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BasicUserDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BasicUserDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BasicUserDto" /> class.
        /// </summary>
        /// <param name="Country">Country (required).</param>
        /// <param name="FirstName">FirstName (required).</param>
        /// <param name="LastName">LastName (required).</param>
        /// <param name="Email">Email (required).</param>
        /// <param name="Telephone">Telephone (required).</param>
        /// <param name="UserType">UserType (required).</param>
        /// <param name="BillTo">BillTo.</param>
        /// <param name="CertifiedDealerId">CertifiedDealerId.</param>
        /// <param name="Dealer">Dealer.</param>
        /// <param name="Pwd">Pwd.</param>
        /// <param name="ShipTo">ShipTo.</param>
        public BasicUserDto(string Country = default(string), string FirstName = default(string), string LastName = default(string), string Email = default(string), string Telephone = default(string), string UserType = default(string), string BillTo = default(string), string CertifiedDealerId = default(string), bool? Dealer = default(bool?), string Pwd = default(string), string ShipTo = default(string))
        {
            // to ensure "Country" is required (not null)
            if (Country == null)
            {
                throw new InvalidDataException("Country is a required property for BasicUserDto and cannot be null");
            }
            else
            {
                this.Country = Country;
            }
            // to ensure "FirstName" is required (not null)
            if (FirstName == null)
            {
                throw new InvalidDataException("FirstName is a required property for BasicUserDto and cannot be null");
            }
            else
            {
                this.FirstName = FirstName;
            }
            // to ensure "LastName" is required (not null)
            if (LastName == null)
            {
                throw new InvalidDataException("LastName is a required property for BasicUserDto and cannot be null");
            }
            else
            {
                this.LastName = LastName;
            }
            // to ensure "Email" is required (not null)
            if (Email == null)
            {
                throw new InvalidDataException("Email is a required property for BasicUserDto and cannot be null");
            }
            else
            {
                this.Email = Email;
            }
            // to ensure "Telephone" is required (not null)
            if (Telephone == null)
            {
                throw new InvalidDataException("Telephone is a required property for BasicUserDto and cannot be null");
            }
            else
            {
                this.Telephone = Telephone;
            }
            // to ensure "UserType" is required (not null)
            if (UserType == null)
            {
                throw new InvalidDataException("UserType is a required property for BasicUserDto and cannot be null");
            }
            else
            {
                this.UserType = UserType;
            }
            this.BillTo = BillTo;
            this.CertifiedDealerId = CertifiedDealerId;
            this.Dealer = Dealer;
            this.Pwd = Pwd;
            this.ShipTo = ShipTo;
        }
        
        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Telephone
        /// </summary>
        [DataMember(Name="telephone", EmitDefaultValue=false)]
        public string Telephone { get; set; }

        /// <summary>
        /// Gets or Sets UserType
        /// </summary>
        [DataMember(Name="userType", EmitDefaultValue=false)]
        public string UserType { get; set; }

        /// <summary>
        /// Gets or Sets BillTo
        /// </summary>
        [DataMember(Name="billTo", EmitDefaultValue=false)]
        public string BillTo { get; set; }

        /// <summary>
        /// Gets or Sets CertifiedDealerId
        /// </summary>
        [DataMember(Name="certifiedDealerId", EmitDefaultValue=false)]
        public string CertifiedDealerId { get; set; }

        /// <summary>
        /// Gets or Sets Dealer
        /// </summary>
        [DataMember(Name="dealer", EmitDefaultValue=false)]
        public bool? Dealer { get; set; }

        /// <summary>
        /// Gets or Sets Pwd
        /// </summary>
        [DataMember(Name="pwd", EmitDefaultValue=false)]
        public string Pwd { get; set; }

        /// <summary>
        /// Gets or Sets ShipTo
        /// </summary>
        [DataMember(Name="shipTo", EmitDefaultValue=false)]
        public string ShipTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BasicUserDto {\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Telephone: ").Append(Telephone).Append("\n");
            sb.Append("  UserType: ").Append(UserType).Append("\n");
            sb.Append("  BillTo: ").Append(BillTo).Append("\n");
            sb.Append("  CertifiedDealerId: ").Append(CertifiedDealerId).Append("\n");
            sb.Append("  Dealer: ").Append(Dealer).Append("\n");
            sb.Append("  Pwd: ").Append(Pwd).Append("\n");
            sb.Append("  ShipTo: ").Append(ShipTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BasicUserDto);
        }

        /// <summary>
        /// Returns true if BasicUserDto instances are equal
        /// </summary>
        /// <param name="input">Instance of BasicUserDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BasicUserDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Telephone == input.Telephone ||
                    (this.Telephone != null &&
                    this.Telephone.Equals(input.Telephone))
                ) && 
                (
                    this.UserType == input.UserType ||
                    (this.UserType != null &&
                    this.UserType.Equals(input.UserType))
                ) && 
                (
                    this.BillTo == input.BillTo ||
                    (this.BillTo != null &&
                    this.BillTo.Equals(input.BillTo))
                ) && 
                (
                    this.CertifiedDealerId == input.CertifiedDealerId ||
                    (this.CertifiedDealerId != null &&
                    this.CertifiedDealerId.Equals(input.CertifiedDealerId))
                ) && 
                (
                    this.Dealer == input.Dealer ||
                    (this.Dealer != null &&
                    this.Dealer.Equals(input.Dealer))
                ) && 
                (
                    this.Pwd == input.Pwd ||
                    (this.Pwd != null &&
                    this.Pwd.Equals(input.Pwd))
                ) && 
                (
                    this.ShipTo == input.ShipTo ||
                    (this.ShipTo != null &&
                    this.ShipTo.Equals(input.ShipTo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Telephone != null)
                    hashCode = hashCode * 59 + this.Telephone.GetHashCode();
                if (this.UserType != null)
                    hashCode = hashCode * 59 + this.UserType.GetHashCode();
                if (this.BillTo != null)
                    hashCode = hashCode * 59 + this.BillTo.GetHashCode();
                if (this.CertifiedDealerId != null)
                    hashCode = hashCode * 59 + this.CertifiedDealerId.GetHashCode();
                if (this.Dealer != null)
                    hashCode = hashCode * 59 + this.Dealer.GetHashCode();
                if (this.Pwd != null)
                    hashCode = hashCode * 59 + this.Pwd.GetHashCode();
                if (this.ShipTo != null)
                    hashCode = hashCode * 59 + this.ShipTo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
