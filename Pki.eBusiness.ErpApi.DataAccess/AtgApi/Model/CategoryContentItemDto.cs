/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// CategoryContentItemDto
    /// </summary>
    [DataContract]
    public partial class CategoryContentItemDto :  IEquatable<CategoryContentItemDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryContentItemDto" /> class.
        /// </summary>
        /// <param name="FirstRecordNumber">FirstRecordNumber.</param>
        /// <param name="LastRecordNumber">LastRecordNumber.</param>
        /// <param name="NavigationActionUrl">NavigationActionUrl.</param>
        /// <param name="OriginalSearchTerm">OriginalSearchTerm.</param>
        /// <param name="RecordPerPage">RecordPerPage.</param>
        /// <param name="RedirectUrl">RedirectUrl.</param>
        /// <param name="SocialShareEnabled">SocialShareEnabled.</param>
        /// <param name="TotalOtherContentNumbRec">TotalOtherContentNumbRec.</param>
        /// <param name="TotalRecordNumber">TotalRecordNumber.</param>
        /// <param name="BreadCrumb">BreadCrumb.</param>
        /// <param name="SortOptions">SortOptions.</param>
        /// <param name="SocialShareAttributes">SocialShareAttributes.</param>
        /// <param name="SEOAttributes">SEOAttributes.</param>
        /// <param name="AnalyticsAttributes">AnalyticsAttributes.</param>
        /// <param name="Category">Category.</param>
        /// <param name="MainPromoContents">MainPromoContents.</param>
        /// <param name="RefinementSubCategories">RefinementSubCategories.</param>
        /// <param name="RefinementDetails">RefinementDetails.</param>
        /// <param name="SelectedRefinements">SelectedRefinements.</param>
        /// <param name="BuyCategoryContents">BuyCategoryContents.</param>
        public CategoryContentItemDto(long? FirstRecordNumber = default(long?), long? LastRecordNumber = default(long?), string NavigationActionUrl = default(string), string OriginalSearchTerm = default(string), long? RecordPerPage = default(long?), string RedirectUrl = default(string), bool? SocialShareEnabled = default(bool?), long? TotalOtherContentNumbRec = default(long?), long? TotalRecordNumber = default(long?), BreadCrumbDto BreadCrumb = default(BreadCrumbDto), List<SortOptionDto> SortOptions = default(List<SortOptionDto>), List<AttributesDto> SocialShareAttributes = default(List<AttributesDto>), List<AttributesDto> SEOAttributes = default(List<AttributesDto>), List<AttributesDto> AnalyticsAttributes = default(List<AttributesDto>), CategoryDto Category = default(CategoryDto), List<PromoContentDto> MainPromoContents = default(List<PromoContentDto>), List<CategoryDto> RefinementSubCategories = default(List<CategoryDto>), List<RefinementItemDto> RefinementDetails = default(List<RefinementItemDto>), List<RefinementDto> SelectedRefinements = default(List<RefinementDto>), List<BuyCategoryContentDto> BuyCategoryContents = default(List<BuyCategoryContentDto>))
        {
            this.FirstRecordNumber = FirstRecordNumber;
            this.LastRecordNumber = LastRecordNumber;
            this.NavigationActionUrl = NavigationActionUrl;
            this.OriginalSearchTerm = OriginalSearchTerm;
            this.RecordPerPage = RecordPerPage;
            this.RedirectUrl = RedirectUrl;
            this.SocialShareEnabled = SocialShareEnabled;
            this.TotalOtherContentNumbRec = TotalOtherContentNumbRec;
            this.TotalRecordNumber = TotalRecordNumber;
            this.BreadCrumb = BreadCrumb;
            this.SortOptions = SortOptions;
            this.SocialShareAttributes = SocialShareAttributes;
            this.SEOAttributes = SEOAttributes;
            this.AnalyticsAttributes = AnalyticsAttributes;
            this.Category = Category;
            this.MainPromoContents = MainPromoContents;
            this.RefinementSubCategories = RefinementSubCategories;
            this.RefinementDetails = RefinementDetails;
            this.SelectedRefinements = SelectedRefinements;
            this.BuyCategoryContents = BuyCategoryContents;
        }
        
        /// <summary>
        /// Gets or Sets FirstRecordNumber
        /// </summary>
        [DataMember(Name="firstRecordNumber", EmitDefaultValue=false)]
        public long? FirstRecordNumber { get; set; }

        /// <summary>
        /// Gets or Sets LastRecordNumber
        /// </summary>
        [DataMember(Name="lastRecordNumber", EmitDefaultValue=false)]
        public long? LastRecordNumber { get; set; }

        /// <summary>
        /// Gets or Sets NavigationActionUrl
        /// </summary>
        [DataMember(Name="navigationActionUrl", EmitDefaultValue=false)]
        public string NavigationActionUrl { get; set; }

        /// <summary>
        /// Gets or Sets OriginalSearchTerm
        /// </summary>
        [DataMember(Name="originalSearchTerm", EmitDefaultValue=false)]
        public string OriginalSearchTerm { get; set; }

        /// <summary>
        /// Gets or Sets RecordPerPage
        /// </summary>
        [DataMember(Name="recordPerPage", EmitDefaultValue=false)]
        public long? RecordPerPage { get; set; }

        /// <summary>
        /// Gets or Sets RedirectUrl
        /// </summary>
        [DataMember(Name="redirectUrl", EmitDefaultValue=false)]
        public string RedirectUrl { get; set; }

        /// <summary>
        /// Gets or Sets SocialShareEnabled
        /// </summary>
        [DataMember(Name="socialShareEnabled", EmitDefaultValue=false)]
        public bool? SocialShareEnabled { get; set; }

        /// <summary>
        /// Gets or Sets TotalOtherContentNumbRec
        /// </summary>
        [DataMember(Name="totalOtherContentNumbRec", EmitDefaultValue=false)]
        public long? TotalOtherContentNumbRec { get; set; }

        /// <summary>
        /// Gets or Sets TotalRecordNumber
        /// </summary>
        [DataMember(Name="totalRecordNumber", EmitDefaultValue=false)]
        public long? TotalRecordNumber { get; set; }

        /// <summary>
        /// Gets or Sets BreadCrumb
        /// </summary>
        [DataMember(Name="breadCrumb", EmitDefaultValue=false)]
        public BreadCrumbDto BreadCrumb { get; set; }

        /// <summary>
        /// Gets or Sets SortOptions
        /// </summary>
        [DataMember(Name="sortOptions", EmitDefaultValue=false)]
        public List<SortOptionDto> SortOptions { get; set; }

        /// <summary>
        /// Gets or Sets SocialShareAttributes
        /// </summary>
        [DataMember(Name="socialShareAttributes", EmitDefaultValue=false)]
        public List<AttributesDto> SocialShareAttributes { get; set; }

        /// <summary>
        /// Gets or Sets SEOAttributes
        /// </summary>
        [DataMember(Name="SEOAttributes", EmitDefaultValue=false)]
        public List<AttributesDto> SEOAttributes { get; set; }

        /// <summary>
        /// Gets or Sets AnalyticsAttributes
        /// </summary>
        [DataMember(Name="analyticsAttributes", EmitDefaultValue=false)]
        public List<AttributesDto> AnalyticsAttributes { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public CategoryDto Category { get; set; }

        /// <summary>
        /// Gets or Sets MainPromoContents
        /// </summary>
        [DataMember(Name="mainPromoContents", EmitDefaultValue=false)]
        public List<PromoContentDto> MainPromoContents { get; set; }

        /// <summary>
        /// Gets or Sets RefinementSubCategories
        /// </summary>
        [DataMember(Name="refinementSubCategories", EmitDefaultValue=false)]
        public List<CategoryDto> RefinementSubCategories { get; set; }

        /// <summary>
        /// Gets or Sets RefinementDetails
        /// </summary>
        [DataMember(Name="refinementDetails", EmitDefaultValue=false)]
        public List<RefinementItemDto> RefinementDetails { get; set; }

        /// <summary>
        /// Gets or Sets SelectedRefinements
        /// </summary>
        [DataMember(Name="selectedRefinements", EmitDefaultValue=false)]
        public List<RefinementDto> SelectedRefinements { get; set; }

        /// <summary>
        /// Gets or Sets BuyCategoryContents
        /// </summary>
        [DataMember(Name="buyCategoryContents", EmitDefaultValue=false)]
        public List<BuyCategoryContentDto> BuyCategoryContents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CategoryContentItemDto {\n");
            sb.Append("  FirstRecordNumber: ").Append(FirstRecordNumber).Append("\n");
            sb.Append("  LastRecordNumber: ").Append(LastRecordNumber).Append("\n");
            sb.Append("  NavigationActionUrl: ").Append(NavigationActionUrl).Append("\n");
            sb.Append("  OriginalSearchTerm: ").Append(OriginalSearchTerm).Append("\n");
            sb.Append("  RecordPerPage: ").Append(RecordPerPage).Append("\n");
            sb.Append("  RedirectUrl: ").Append(RedirectUrl).Append("\n");
            sb.Append("  SocialShareEnabled: ").Append(SocialShareEnabled).Append("\n");
            sb.Append("  TotalOtherContentNumbRec: ").Append(TotalOtherContentNumbRec).Append("\n");
            sb.Append("  TotalRecordNumber: ").Append(TotalRecordNumber).Append("\n");
            sb.Append("  BreadCrumb: ").Append(BreadCrumb).Append("\n");
            sb.Append("  SortOptions: ").Append(SortOptions).Append("\n");
            sb.Append("  SocialShareAttributes: ").Append(SocialShareAttributes).Append("\n");
            sb.Append("  SEOAttributes: ").Append(SEOAttributes).Append("\n");
            sb.Append("  AnalyticsAttributes: ").Append(AnalyticsAttributes).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  MainPromoContents: ").Append(MainPromoContents).Append("\n");
            sb.Append("  RefinementSubCategories: ").Append(RefinementSubCategories).Append("\n");
            sb.Append("  RefinementDetails: ").Append(RefinementDetails).Append("\n");
            sb.Append("  SelectedRefinements: ").Append(SelectedRefinements).Append("\n");
            sb.Append("  BuyCategoryContents: ").Append(BuyCategoryContents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CategoryContentItemDto);
        }

        /// <summary>
        /// Returns true if CategoryContentItemDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CategoryContentItemDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CategoryContentItemDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FirstRecordNumber == input.FirstRecordNumber ||
                    (this.FirstRecordNumber != null &&
                    this.FirstRecordNumber.Equals(input.FirstRecordNumber))
                ) && 
                (
                    this.LastRecordNumber == input.LastRecordNumber ||
                    (this.LastRecordNumber != null &&
                    this.LastRecordNumber.Equals(input.LastRecordNumber))
                ) && 
                (
                    this.NavigationActionUrl == input.NavigationActionUrl ||
                    (this.NavigationActionUrl != null &&
                    this.NavigationActionUrl.Equals(input.NavigationActionUrl))
                ) && 
                (
                    this.OriginalSearchTerm == input.OriginalSearchTerm ||
                    (this.OriginalSearchTerm != null &&
                    this.OriginalSearchTerm.Equals(input.OriginalSearchTerm))
                ) && 
                (
                    this.RecordPerPage == input.RecordPerPage ||
                    (this.RecordPerPage != null &&
                    this.RecordPerPage.Equals(input.RecordPerPage))
                ) && 
                (
                    this.RedirectUrl == input.RedirectUrl ||
                    (this.RedirectUrl != null &&
                    this.RedirectUrl.Equals(input.RedirectUrl))
                ) && 
                (
                    this.SocialShareEnabled == input.SocialShareEnabled ||
                    (this.SocialShareEnabled != null &&
                    this.SocialShareEnabled.Equals(input.SocialShareEnabled))
                ) && 
                (
                    this.TotalOtherContentNumbRec == input.TotalOtherContentNumbRec ||
                    (this.TotalOtherContentNumbRec != null &&
                    this.TotalOtherContentNumbRec.Equals(input.TotalOtherContentNumbRec))
                ) && 
                (
                    this.TotalRecordNumber == input.TotalRecordNumber ||
                    (this.TotalRecordNumber != null &&
                    this.TotalRecordNumber.Equals(input.TotalRecordNumber))
                ) && 
                (
                    this.BreadCrumb == input.BreadCrumb ||
                    (this.BreadCrumb != null &&
                    this.BreadCrumb.Equals(input.BreadCrumb))
                ) && 
                (
                    this.SortOptions == input.SortOptions ||
                    this.SortOptions != null &&
                    this.SortOptions.SequenceEqual(input.SortOptions)
                ) && 
                (
                    this.SocialShareAttributes == input.SocialShareAttributes ||
                    this.SocialShareAttributes != null &&
                    this.SocialShareAttributes.SequenceEqual(input.SocialShareAttributes)
                ) && 
                (
                    this.SEOAttributes == input.SEOAttributes ||
                    this.SEOAttributes != null &&
                    this.SEOAttributes.SequenceEqual(input.SEOAttributes)
                ) && 
                (
                    this.AnalyticsAttributes == input.AnalyticsAttributes ||
                    this.AnalyticsAttributes != null &&
                    this.AnalyticsAttributes.SequenceEqual(input.AnalyticsAttributes)
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.MainPromoContents == input.MainPromoContents ||
                    this.MainPromoContents != null &&
                    this.MainPromoContents.SequenceEqual(input.MainPromoContents)
                ) && 
                (
                    this.RefinementSubCategories == input.RefinementSubCategories ||
                    this.RefinementSubCategories != null &&
                    this.RefinementSubCategories.SequenceEqual(input.RefinementSubCategories)
                ) && 
                (
                    this.RefinementDetails == input.RefinementDetails ||
                    this.RefinementDetails != null &&
                    this.RefinementDetails.SequenceEqual(input.RefinementDetails)
                ) && 
                (
                    this.SelectedRefinements == input.SelectedRefinements ||
                    this.SelectedRefinements != null &&
                    this.SelectedRefinements.SequenceEqual(input.SelectedRefinements)
                ) && 
                (
                    this.BuyCategoryContents == input.BuyCategoryContents ||
                    this.BuyCategoryContents != null &&
                    this.BuyCategoryContents.SequenceEqual(input.BuyCategoryContents)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FirstRecordNumber != null)
                    hashCode = hashCode * 59 + this.FirstRecordNumber.GetHashCode();
                if (this.LastRecordNumber != null)
                    hashCode = hashCode * 59 + this.LastRecordNumber.GetHashCode();
                if (this.NavigationActionUrl != null)
                    hashCode = hashCode * 59 + this.NavigationActionUrl.GetHashCode();
                if (this.OriginalSearchTerm != null)
                    hashCode = hashCode * 59 + this.OriginalSearchTerm.GetHashCode();
                if (this.RecordPerPage != null)
                    hashCode = hashCode * 59 + this.RecordPerPage.GetHashCode();
                if (this.RedirectUrl != null)
                    hashCode = hashCode * 59 + this.RedirectUrl.GetHashCode();
                if (this.SocialShareEnabled != null)
                    hashCode = hashCode * 59 + this.SocialShareEnabled.GetHashCode();
                if (this.TotalOtherContentNumbRec != null)
                    hashCode = hashCode * 59 + this.TotalOtherContentNumbRec.GetHashCode();
                if (this.TotalRecordNumber != null)
                    hashCode = hashCode * 59 + this.TotalRecordNumber.GetHashCode();
                if (this.BreadCrumb != null)
                    hashCode = hashCode * 59 + this.BreadCrumb.GetHashCode();
                if (this.SortOptions != null)
                    hashCode = hashCode * 59 + this.SortOptions.GetHashCode();
                if (this.SocialShareAttributes != null)
                    hashCode = hashCode * 59 + this.SocialShareAttributes.GetHashCode();
                if (this.SEOAttributes != null)
                    hashCode = hashCode * 59 + this.SEOAttributes.GetHashCode();
                if (this.AnalyticsAttributes != null)
                    hashCode = hashCode * 59 + this.AnalyticsAttributes.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.MainPromoContents != null)
                    hashCode = hashCode * 59 + this.MainPromoContents.GetHashCode();
                if (this.RefinementSubCategories != null)
                    hashCode = hashCode * 59 + this.RefinementSubCategories.GetHashCode();
                if (this.RefinementDetails != null)
                    hashCode = hashCode * 59 + this.RefinementDetails.GetHashCode();
                if (this.SelectedRefinements != null)
                    hashCode = hashCode * 59 + this.SelectedRefinements.GetHashCode();
                if (this.BuyCategoryContents != null)
                    hashCode = hashCode * 59 + this.BuyCategoryContents.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
