/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// AccountDto
    /// </summary>
    [DataContract]
    public partial class AccountDto :  IEquatable<AccountDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDto" /> class.
        /// </summary>
        /// <param name="AccountNumber">AccountNumber.</param>
        /// <param name="ApproverPurchaseOnly">ApproverPurchaseOnly.</param>
        /// <param name="RadApprovalRequired">RadApprovalRequired.</param>
        /// <param name="SendEmailsInParallel">SendEmailsInParallel.</param>
        /// <param name="Approvers">Approvers.</param>
        public AccountDto(string AccountNumber = default(string), bool? ApproverPurchaseOnly = default(bool?), bool? RadApprovalRequired = default(bool?), bool? SendEmailsInParallel = default(bool?), List<ApproverDto> Approvers = default(List<ApproverDto>))
        {
            this.AccountNumber = AccountNumber;
            this.ApproverPurchaseOnly = ApproverPurchaseOnly;
            this.RadApprovalRequired = RadApprovalRequired;
            this.SendEmailsInParallel = SendEmailsInParallel;
            this.Approvers = Approvers;
        }
        
        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name="accountNumber", EmitDefaultValue=false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets ApproverPurchaseOnly
        /// </summary>
        [DataMember(Name="approverPurchaseOnly", EmitDefaultValue=false)]
        public bool? ApproverPurchaseOnly { get; set; }

        /// <summary>
        /// Gets or Sets RadApprovalRequired
        /// </summary>
        [DataMember(Name="radApprovalRequired", EmitDefaultValue=false)]
        public bool? RadApprovalRequired { get; set; }

        /// <summary>
        /// Gets or Sets SendEmailsInParallel
        /// </summary>
        [DataMember(Name="sendEmailsInParallel", EmitDefaultValue=false)]
        public bool? SendEmailsInParallel { get; set; }

        /// <summary>
        /// Gets or Sets Approvers
        /// </summary>
        [DataMember(Name="approvers", EmitDefaultValue=false)]
        public List<ApproverDto> Approvers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountDto {\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  ApproverPurchaseOnly: ").Append(ApproverPurchaseOnly).Append("\n");
            sb.Append("  RadApprovalRequired: ").Append(RadApprovalRequired).Append("\n");
            sb.Append("  SendEmailsInParallel: ").Append(SendEmailsInParallel).Append("\n");
            sb.Append("  Approvers: ").Append(Approvers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountDto);
        }

        /// <summary>
        /// Returns true if AccountDto instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.ApproverPurchaseOnly == input.ApproverPurchaseOnly ||
                    (this.ApproverPurchaseOnly != null &&
                    this.ApproverPurchaseOnly.Equals(input.ApproverPurchaseOnly))
                ) && 
                (
                    this.RadApprovalRequired == input.RadApprovalRequired ||
                    (this.RadApprovalRequired != null &&
                    this.RadApprovalRequired.Equals(input.RadApprovalRequired))
                ) && 
                (
                    this.SendEmailsInParallel == input.SendEmailsInParallel ||
                    (this.SendEmailsInParallel != null &&
                    this.SendEmailsInParallel.Equals(input.SendEmailsInParallel))
                ) && 
                (
                    this.Approvers == input.Approvers ||
                    this.Approvers != null &&
                    this.Approvers.SequenceEqual(input.Approvers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.ApproverPurchaseOnly != null)
                    hashCode = hashCode * 59 + this.ApproverPurchaseOnly.GetHashCode();
                if (this.RadApprovalRequired != null)
                    hashCode = hashCode * 59 + this.RadApprovalRequired.GetHashCode();
                if (this.SendEmailsInParallel != null)
                    hashCode = hashCode * 59 + this.SendEmailsInParallel.GetHashCode();
                if (this.Approvers != null)
                    hashCode = hashCode * 59 + this.Approvers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
