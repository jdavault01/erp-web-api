/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// ShippingBillingAddressDto
    /// </summary>
    [DataContract]
    public partial class ShippingBillingAddressDto :  IEquatable<ShippingBillingAddressDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingBillingAddressDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShippingBillingAddressDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingBillingAddressDto" /> class.
        /// </summary>
        /// <param name="ShipToId">ShipToId (required).</param>
        /// <param name="BillToAddress">BillToAddress (required).</param>
        public ShippingBillingAddressDto(string ShipToId = default(string), BillToAddressDtoValidator BillToAddress = default(BillToAddressDtoValidator))
        {
            // to ensure "ShipToId" is required (not null)
            if (ShipToId == null)
            {
                throw new InvalidDataException("ShipToId is a required property for ShippingBillingAddressDto and cannot be null");
            }
            else
            {
                this.ShipToId = ShipToId;
            }
            // to ensure "BillToAddress" is required (not null)
            if (BillToAddress == null)
            {
                throw new InvalidDataException("BillToAddress is a required property for ShippingBillingAddressDto and cannot be null");
            }
            else
            {
                this.BillToAddress = BillToAddress;
            }
        }
        
        /// <summary>
        /// Gets or Sets ShipToId
        /// </summary>
        [DataMember(Name="shipToId", EmitDefaultValue=false)]
        public string ShipToId { get; set; }

        /// <summary>
        /// Gets or Sets BillToAddress
        /// </summary>
        [DataMember(Name="billToAddress", EmitDefaultValue=false)]
        public BillToAddressDtoValidator BillToAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShippingBillingAddressDto {\n");
            sb.Append("  ShipToId: ").Append(ShipToId).Append("\n");
            sb.Append("  BillToAddress: ").Append(BillToAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShippingBillingAddressDto);
        }

        /// <summary>
        /// Returns true if ShippingBillingAddressDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ShippingBillingAddressDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShippingBillingAddressDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ShipToId == input.ShipToId ||
                    (this.ShipToId != null &&
                    this.ShipToId.Equals(input.ShipToId))
                ) && 
                (
                    this.BillToAddress == input.BillToAddress ||
                    (this.BillToAddress != null &&
                    this.BillToAddress.Equals(input.BillToAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShipToId != null)
                    hashCode = hashCode * 59 + this.ShipToId.GetHashCode();
                if (this.BillToAddress != null)
                    hashCode = hashCode * 59 + this.BillToAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
