/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// UserRegistrationDto
    /// </summary>
    [DataContract]
    public partial class UserRegistrationDto :  IEquatable<UserRegistrationDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserRegistrationDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationDto" /> class.
        /// </summary>
        /// <param name="ActiveCountry">ActiveCountry (required).</param>
        /// <param name="FirstName">FirstName (required).</param>
        /// <param name="LastName">LastName (required).</param>
        /// <param name="LogonName">LogonName (required).</param>
        /// <param name="Password">Password (required).</param>
        /// <param name="AccountNumber">AccountNumber.</param>
        /// <param name="ActiveLanguage">ActiveLanguage.</param>
        /// <param name="BillTo">BillTo.</param>
        /// <param name="CertifiedDealerId">CertifiedDealerId.</param>
        /// <param name="Dealer">Dealer.</param>
        /// <param name="UserType">UserType.</param>
        /// <param name="CompanyAddress">CompanyAddress (required).</param>
        public UserRegistrationDto(string ActiveCountry = default(string), string FirstName = default(string), string LastName = default(string), string LogonName = default(string), string Password = default(string), string AccountNumber = default(string), string ActiveLanguage = default(string), string BillTo = default(string), string CertifiedDealerId = default(string), bool? Dealer = default(bool?), string UserType = default(string), CompanyAddressDtoValidator CompanyAddress = default(CompanyAddressDtoValidator))
        {
            // to ensure "ActiveCountry" is required (not null)
            if (ActiveCountry == null)
            {
                throw new InvalidDataException("ActiveCountry is a required property for UserRegistrationDto and cannot be null");
            }
            else
            {
                this.ActiveCountry = ActiveCountry;
            }
            // to ensure "FirstName" is required (not null)
            if (FirstName == null)
            {
                throw new InvalidDataException("FirstName is a required property for UserRegistrationDto and cannot be null");
            }
            else
            {
                this.FirstName = FirstName;
            }
            // to ensure "LastName" is required (not null)
            if (LastName == null)
            {
                throw new InvalidDataException("LastName is a required property for UserRegistrationDto and cannot be null");
            }
            else
            {
                this.LastName = LastName;
            }
            // to ensure "LogonName" is required (not null)
            if (LogonName == null)
            {
                throw new InvalidDataException("LogonName is a required property for UserRegistrationDto and cannot be null");
            }
            else
            {
                this.LogonName = LogonName;
            }
            // to ensure "Password" is required (not null)
            if (Password == null)
            {
                throw new InvalidDataException("Password is a required property for UserRegistrationDto and cannot be null");
            }
            else
            {
                this.Password = Password;
            }
            // to ensure "CompanyAddress" is required (not null)
            if (CompanyAddress == null)
            {
                throw new InvalidDataException("CompanyAddress is a required property for UserRegistrationDto and cannot be null");
            }
            else
            {
                this.CompanyAddress = CompanyAddress;
            }
            this.AccountNumber = AccountNumber;
            this.ActiveLanguage = ActiveLanguage;
            this.BillTo = BillTo;
            this.CertifiedDealerId = CertifiedDealerId;
            this.Dealer = Dealer;
            this.UserType = UserType;
        }
        
        /// <summary>
        /// Gets or Sets ActiveCountry
        /// </summary>
        [DataMember(Name="activeCountry", EmitDefaultValue=false)]
        public string ActiveCountry { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets LogonName
        /// </summary>
        [DataMember(Name="logonName", EmitDefaultValue=false)]
        public string LogonName { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name="accountNumber", EmitDefaultValue=false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets ActiveLanguage
        /// </summary>
        [DataMember(Name="activeLanguage", EmitDefaultValue=false)]
        public string ActiveLanguage { get; set; }

        /// <summary>
        /// Gets or Sets BillTo
        /// </summary>
        [DataMember(Name="billTo", EmitDefaultValue=false)]
        public string BillTo { get; set; }

        /// <summary>
        /// Gets or Sets CertifiedDealerId
        /// </summary>
        [DataMember(Name="certifiedDealerId", EmitDefaultValue=false)]
        public string CertifiedDealerId { get; set; }

        /// <summary>
        /// Gets or Sets Dealer
        /// </summary>
        [DataMember(Name="dealer", EmitDefaultValue=false)]
        public bool? Dealer { get; set; }

        /// <summary>
        /// Gets or Sets UserType
        /// </summary>
        [DataMember(Name="userType", EmitDefaultValue=false)]
        public string UserType { get; set; }

        /// <summary>
        /// Gets or Sets CompanyAddress
        /// </summary>
        [DataMember(Name="companyAddress", EmitDefaultValue=false)]
        public CompanyAddressDtoValidator CompanyAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserRegistrationDto {\n");
            sb.Append("  ActiveCountry: ").Append(ActiveCountry).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  LogonName: ").Append(LogonName).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  ActiveLanguage: ").Append(ActiveLanguage).Append("\n");
            sb.Append("  BillTo: ").Append(BillTo).Append("\n");
            sb.Append("  CertifiedDealerId: ").Append(CertifiedDealerId).Append("\n");
            sb.Append("  Dealer: ").Append(Dealer).Append("\n");
            sb.Append("  UserType: ").Append(UserType).Append("\n");
            sb.Append("  CompanyAddress: ").Append(CompanyAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserRegistrationDto);
        }

        /// <summary>
        /// Returns true if UserRegistrationDto instances are equal
        /// </summary>
        /// <param name="input">Instance of UserRegistrationDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserRegistrationDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActiveCountry == input.ActiveCountry ||
                    (this.ActiveCountry != null &&
                    this.ActiveCountry.Equals(input.ActiveCountry))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.LogonName == input.LogonName ||
                    (this.LogonName != null &&
                    this.LogonName.Equals(input.LogonName))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.ActiveLanguage == input.ActiveLanguage ||
                    (this.ActiveLanguage != null &&
                    this.ActiveLanguage.Equals(input.ActiveLanguage))
                ) && 
                (
                    this.BillTo == input.BillTo ||
                    (this.BillTo != null &&
                    this.BillTo.Equals(input.BillTo))
                ) && 
                (
                    this.CertifiedDealerId == input.CertifiedDealerId ||
                    (this.CertifiedDealerId != null &&
                    this.CertifiedDealerId.Equals(input.CertifiedDealerId))
                ) && 
                (
                    this.Dealer == input.Dealer ||
                    (this.Dealer != null &&
                    this.Dealer.Equals(input.Dealer))
                ) && 
                (
                    this.UserType == input.UserType ||
                    (this.UserType != null &&
                    this.UserType.Equals(input.UserType))
                ) && 
                (
                    this.CompanyAddress == input.CompanyAddress ||
                    (this.CompanyAddress != null &&
                    this.CompanyAddress.Equals(input.CompanyAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActiveCountry != null)
                    hashCode = hashCode * 59 + this.ActiveCountry.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.LogonName != null)
                    hashCode = hashCode * 59 + this.LogonName.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.ActiveLanguage != null)
                    hashCode = hashCode * 59 + this.ActiveLanguage.GetHashCode();
                if (this.BillTo != null)
                    hashCode = hashCode * 59 + this.BillTo.GetHashCode();
                if (this.CertifiedDealerId != null)
                    hashCode = hashCode * 59 + this.CertifiedDealerId.GetHashCode();
                if (this.Dealer != null)
                    hashCode = hashCode * 59 + this.Dealer.GetHashCode();
                if (this.UserType != null)
                    hashCode = hashCode * 59 + this.UserType.GetHashCode();
                if (this.CompanyAddress != null)
                    hashCode = hashCode * 59 + this.CompanyAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
