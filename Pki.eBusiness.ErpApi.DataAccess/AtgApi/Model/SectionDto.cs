/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// SectionDto
    /// </summary>
    [DataContract]
    public partial class SectionDto :  IEquatable<SectionDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SectionDto" /> class.
        /// </summary>
        /// <param name="Description">Description.</param>
        /// <param name="SectionType">SectionType.</param>
        /// <param name="SectionView">SectionView.</param>
        /// <param name="Title">Title.</param>
        /// <param name="Url">Url.</param>
        /// <param name="Image">Image.</param>
        /// <param name="SuggestedProducts">SuggestedProducts.</param>
        /// <param name="SuggestedContents">SuggestedContents.</param>
        /// <param name="SectionCategories">SectionCategories.</param>
        /// <param name="SectionBlogContent">SectionBlogContent.</param>
        /// <param name="Video">Video.</param>
        public SectionDto(string Description = default(string), string SectionType = default(string), string SectionView = default(string), string Title = default(string), string Url = default(string), ImageDto Image = default(ImageDto), List<BaseItemDto> SuggestedProducts = default(List<BaseItemDto>), List<BaseItemDto> SuggestedContents = default(List<BaseItemDto>), List<BaseItemDto> SectionCategories = default(List<BaseItemDto>), List<BaseItemDto> SectionBlogContent = default(List<BaseItemDto>), VideoDto Video = default(VideoDto))
        {
            this.Description = Description;
            this.SectionType = SectionType;
            this.SectionView = SectionView;
            this.Title = Title;
            this.Url = Url;
            this.Image = Image;
            this.SuggestedProducts = SuggestedProducts;
            this.SuggestedContents = SuggestedContents;
            this.SectionCategories = SectionCategories;
            this.SectionBlogContent = SectionBlogContent;
            this.Video = Video;
        }
        
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets SectionType
        /// </summary>
        [DataMember(Name="sectionType", EmitDefaultValue=false)]
        public string SectionType { get; set; }

        /// <summary>
        /// Gets or Sets SectionView
        /// </summary>
        [DataMember(Name="sectionView", EmitDefaultValue=false)]
        public string SectionView { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public ImageDto Image { get; set; }

        /// <summary>
        /// Gets or Sets SuggestedProducts
        /// </summary>
        [DataMember(Name="suggestedProducts", EmitDefaultValue=false)]
        public List<BaseItemDto> SuggestedProducts { get; set; }

        /// <summary>
        /// Gets or Sets SuggestedContents
        /// </summary>
        [DataMember(Name="suggestedContents", EmitDefaultValue=false)]
        public List<BaseItemDto> SuggestedContents { get; set; }

        /// <summary>
        /// Gets or Sets SectionCategories
        /// </summary>
        [DataMember(Name="sectionCategories", EmitDefaultValue=false)]
        public List<BaseItemDto> SectionCategories { get; set; }

        /// <summary>
        /// Gets or Sets SectionBlogContent
        /// </summary>
        [DataMember(Name="sectionBlogContent", EmitDefaultValue=false)]
        public List<BaseItemDto> SectionBlogContent { get; set; }

        /// <summary>
        /// Gets or Sets Video
        /// </summary>
        [DataMember(Name="video", EmitDefaultValue=false)]
        public VideoDto Video { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SectionDto {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SectionType: ").Append(SectionType).Append("\n");
            sb.Append("  SectionView: ").Append(SectionView).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  SuggestedProducts: ").Append(SuggestedProducts).Append("\n");
            sb.Append("  SuggestedContents: ").Append(SuggestedContents).Append("\n");
            sb.Append("  SectionCategories: ").Append(SectionCategories).Append("\n");
            sb.Append("  SectionBlogContent: ").Append(SectionBlogContent).Append("\n");
            sb.Append("  Video: ").Append(Video).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SectionDto);
        }

        /// <summary>
        /// Returns true if SectionDto instances are equal
        /// </summary>
        /// <param name="input">Instance of SectionDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SectionDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.SectionType == input.SectionType ||
                    (this.SectionType != null &&
                    this.SectionType.Equals(input.SectionType))
                ) && 
                (
                    this.SectionView == input.SectionView ||
                    (this.SectionView != null &&
                    this.SectionView.Equals(input.SectionView))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.SuggestedProducts == input.SuggestedProducts ||
                    this.SuggestedProducts != null &&
                    this.SuggestedProducts.SequenceEqual(input.SuggestedProducts)
                ) && 
                (
                    this.SuggestedContents == input.SuggestedContents ||
                    this.SuggestedContents != null &&
                    this.SuggestedContents.SequenceEqual(input.SuggestedContents)
                ) && 
                (
                    this.SectionCategories == input.SectionCategories ||
                    this.SectionCategories != null &&
                    this.SectionCategories.SequenceEqual(input.SectionCategories)
                ) && 
                (
                    this.SectionBlogContent == input.SectionBlogContent ||
                    this.SectionBlogContent != null &&
                    this.SectionBlogContent.SequenceEqual(input.SectionBlogContent)
                ) && 
                (
                    this.Video == input.Video ||
                    (this.Video != null &&
                    this.Video.Equals(input.Video))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.SectionType != null)
                    hashCode = hashCode * 59 + this.SectionType.GetHashCode();
                if (this.SectionView != null)
                    hashCode = hashCode * 59 + this.SectionView.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.SuggestedProducts != null)
                    hashCode = hashCode * 59 + this.SuggestedProducts.GetHashCode();
                if (this.SuggestedContents != null)
                    hashCode = hashCode * 59 + this.SuggestedContents.GetHashCode();
                if (this.SectionCategories != null)
                    hashCode = hashCode * 59 + this.SectionCategories.GetHashCode();
                if (this.SectionBlogContent != null)
                    hashCode = hashCode * 59 + this.SectionBlogContent.GetHashCode();
                if (this.Video != null)
                    hashCode = hashCode * 59 + this.Video.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
