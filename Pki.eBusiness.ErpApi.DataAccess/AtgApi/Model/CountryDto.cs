/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// CountryDto
    /// </summary>
    [DataContract]
    public partial class CountryDto :  IEquatable<CountryDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CountryDto" /> class.
        /// </summary>
        /// <param name="States">States.</param>
        /// <param name="CheckAvailability">CheckAvailability.</param>
        /// <param name="Continent">Continent.</param>
        /// <param name="CountryCode">CountryCode.</param>
        /// <param name="CountryDescription">CountryDescription.</param>
        /// <param name="CountryName">CountryName.</param>
        /// <param name="CreditCardEnabled">CreditCardEnabled.</param>
        /// <param name="Culture">Culture.</param>
        /// <param name="CurrencyCode">CurrencyCode.</param>
        /// <param name="DealerCountry">DealerCountry.</param>
        /// <param name="EcommerceType">EcommerceType.</param>
        /// <param name="McsBaseCatalogName">McsBaseCatalogName.</param>
        /// <param name="McsCatalogName">McsCatalogName.</param>
        /// <param name="MenuEnabled">MenuEnabled.</param>
        /// <param name="PriceAvailable">PriceAvailable.</param>
        /// <param name="RedirectURL">RedirectURL.</param>
        /// <param name="ShopRedirectURL">ShopRedirectURL.</param>
        /// <param name="VatEnabled">VatEnabled.</param>
        /// <param name="ImagePath">ImagePath.</param>
        /// <param name="CountryLanguage">CountryLanguage.</param>
        public CountryDto(List<string> States = default(List<string>), bool? CheckAvailability = default(bool?), string Continent = default(string), string CountryCode = default(string), string CountryDescription = default(string), string CountryName = default(string), bool? CreditCardEnabled = default(bool?), string Culture = default(string), string CurrencyCode = default(string), bool? DealerCountry = default(bool?), string EcommerceType = default(string), string McsBaseCatalogName = default(string), string McsCatalogName = default(string), bool? MenuEnabled = default(bool?), bool? PriceAvailable = default(bool?), string RedirectURL = default(string), string ShopRedirectURL = default(string), bool? VatEnabled = default(bool?), ImageDto ImagePath = default(ImageDto), LanguageDto CountryLanguage = default(LanguageDto))
        {
            this.States = States;
            this.CheckAvailability = CheckAvailability;
            this.Continent = Continent;
            this.CountryCode = CountryCode;
            this.CountryDescription = CountryDescription;
            this.CountryName = CountryName;
            this.CreditCardEnabled = CreditCardEnabled;
            this.Culture = Culture;
            this.CurrencyCode = CurrencyCode;
            this.DealerCountry = DealerCountry;
            this.EcommerceType = EcommerceType;
            this.McsBaseCatalogName = McsBaseCatalogName;
            this.McsCatalogName = McsCatalogName;
            this.MenuEnabled = MenuEnabled;
            this.PriceAvailable = PriceAvailable;
            this.RedirectURL = RedirectURL;
            this.ShopRedirectURL = ShopRedirectURL;
            this.VatEnabled = VatEnabled;
            this.ImagePath = ImagePath;
            this.CountryLanguage = CountryLanguage;
        }
        
        /// <summary>
        /// Gets or Sets States
        /// </summary>
        [DataMember(Name="states", EmitDefaultValue=false)]
        public List<string> States { get; set; }

        /// <summary>
        /// Gets or Sets CheckAvailability
        /// </summary>
        [DataMember(Name="checkAvailability", EmitDefaultValue=false)]
        public bool? CheckAvailability { get; set; }

        /// <summary>
        /// Gets or Sets Continent
        /// </summary>
        [DataMember(Name="continent", EmitDefaultValue=false)]
        public string Continent { get; set; }

        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name="countryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets CountryDescription
        /// </summary>
        [DataMember(Name="countryDescription", EmitDefaultValue=false)]
        public string CountryDescription { get; set; }

        /// <summary>
        /// Gets or Sets CountryName
        /// </summary>
        [DataMember(Name="countryName", EmitDefaultValue=false)]
        public string CountryName { get; set; }

        /// <summary>
        /// Gets or Sets CreditCardEnabled
        /// </summary>
        [DataMember(Name="creditCardEnabled", EmitDefaultValue=false)]
        public bool? CreditCardEnabled { get; set; }

        /// <summary>
        /// Gets or Sets Culture
        /// </summary>
        [DataMember(Name="culture", EmitDefaultValue=false)]
        public string Culture { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets DealerCountry
        /// </summary>
        [DataMember(Name="dealerCountry", EmitDefaultValue=false)]
        public bool? DealerCountry { get; set; }

        /// <summary>
        /// Gets or Sets EcommerceType
        /// </summary>
        [DataMember(Name="ecommerceType", EmitDefaultValue=false)]
        public string EcommerceType { get; set; }

        /// <summary>
        /// Gets or Sets McsBaseCatalogName
        /// </summary>
        [DataMember(Name="mcsBaseCatalogName", EmitDefaultValue=false)]
        public string McsBaseCatalogName { get; set; }

        /// <summary>
        /// Gets or Sets McsCatalogName
        /// </summary>
        [DataMember(Name="mcsCatalogName", EmitDefaultValue=false)]
        public string McsCatalogName { get; set; }

        /// <summary>
        /// Gets or Sets MenuEnabled
        /// </summary>
        [DataMember(Name="menuEnabled", EmitDefaultValue=false)]
        public bool? MenuEnabled { get; set; }

        /// <summary>
        /// Gets or Sets PriceAvailable
        /// </summary>
        [DataMember(Name="priceAvailable", EmitDefaultValue=false)]
        public bool? PriceAvailable { get; set; }

        /// <summary>
        /// Gets or Sets RedirectURL
        /// </summary>
        [DataMember(Name="redirectURL", EmitDefaultValue=false)]
        public string RedirectURL { get; set; }

        /// <summary>
        /// Gets or Sets ShopRedirectURL
        /// </summary>
        [DataMember(Name="shopRedirectURL", EmitDefaultValue=false)]
        public string ShopRedirectURL { get; set; }

        /// <summary>
        /// Gets or Sets VatEnabled
        /// </summary>
        [DataMember(Name="vatEnabled", EmitDefaultValue=false)]
        public bool? VatEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ImagePath
        /// </summary>
        [DataMember(Name="imagePath", EmitDefaultValue=false)]
        public ImageDto ImagePath { get; set; }

        /// <summary>
        /// Gets or Sets CountryLanguage
        /// </summary>
        [DataMember(Name="countryLanguage", EmitDefaultValue=false)]
        public LanguageDto CountryLanguage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CountryDto {\n");
            sb.Append("  States: ").Append(States).Append("\n");
            sb.Append("  CheckAvailability: ").Append(CheckAvailability).Append("\n");
            sb.Append("  Continent: ").Append(Continent).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CountryDescription: ").Append(CountryDescription).Append("\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  CreditCardEnabled: ").Append(CreditCardEnabled).Append("\n");
            sb.Append("  Culture: ").Append(Culture).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  DealerCountry: ").Append(DealerCountry).Append("\n");
            sb.Append("  EcommerceType: ").Append(EcommerceType).Append("\n");
            sb.Append("  McsBaseCatalogName: ").Append(McsBaseCatalogName).Append("\n");
            sb.Append("  McsCatalogName: ").Append(McsCatalogName).Append("\n");
            sb.Append("  MenuEnabled: ").Append(MenuEnabled).Append("\n");
            sb.Append("  PriceAvailable: ").Append(PriceAvailable).Append("\n");
            sb.Append("  RedirectURL: ").Append(RedirectURL).Append("\n");
            sb.Append("  ShopRedirectURL: ").Append(ShopRedirectURL).Append("\n");
            sb.Append("  VatEnabled: ").Append(VatEnabled).Append("\n");
            sb.Append("  ImagePath: ").Append(ImagePath).Append("\n");
            sb.Append("  CountryLanguage: ").Append(CountryLanguage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CountryDto);
        }

        /// <summary>
        /// Returns true if CountryDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CountryDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CountryDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.States == input.States ||
                    this.States != null &&
                    this.States.SequenceEqual(input.States)
                ) && 
                (
                    this.CheckAvailability == input.CheckAvailability ||
                    (this.CheckAvailability != null &&
                    this.CheckAvailability.Equals(input.CheckAvailability))
                ) && 
                (
                    this.Continent == input.Continent ||
                    (this.Continent != null &&
                    this.Continent.Equals(input.Continent))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.CountryDescription == input.CountryDescription ||
                    (this.CountryDescription != null &&
                    this.CountryDescription.Equals(input.CountryDescription))
                ) && 
                (
                    this.CountryName == input.CountryName ||
                    (this.CountryName != null &&
                    this.CountryName.Equals(input.CountryName))
                ) && 
                (
                    this.CreditCardEnabled == input.CreditCardEnabled ||
                    (this.CreditCardEnabled != null &&
                    this.CreditCardEnabled.Equals(input.CreditCardEnabled))
                ) && 
                (
                    this.Culture == input.Culture ||
                    (this.Culture != null &&
                    this.Culture.Equals(input.Culture))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.DealerCountry == input.DealerCountry ||
                    (this.DealerCountry != null &&
                    this.DealerCountry.Equals(input.DealerCountry))
                ) && 
                (
                    this.EcommerceType == input.EcommerceType ||
                    (this.EcommerceType != null &&
                    this.EcommerceType.Equals(input.EcommerceType))
                ) && 
                (
                    this.McsBaseCatalogName == input.McsBaseCatalogName ||
                    (this.McsBaseCatalogName != null &&
                    this.McsBaseCatalogName.Equals(input.McsBaseCatalogName))
                ) && 
                (
                    this.McsCatalogName == input.McsCatalogName ||
                    (this.McsCatalogName != null &&
                    this.McsCatalogName.Equals(input.McsCatalogName))
                ) && 
                (
                    this.MenuEnabled == input.MenuEnabled ||
                    (this.MenuEnabled != null &&
                    this.MenuEnabled.Equals(input.MenuEnabled))
                ) && 
                (
                    this.PriceAvailable == input.PriceAvailable ||
                    (this.PriceAvailable != null &&
                    this.PriceAvailable.Equals(input.PriceAvailable))
                ) && 
                (
                    this.RedirectURL == input.RedirectURL ||
                    (this.RedirectURL != null &&
                    this.RedirectURL.Equals(input.RedirectURL))
                ) && 
                (
                    this.ShopRedirectURL == input.ShopRedirectURL ||
                    (this.ShopRedirectURL != null &&
                    this.ShopRedirectURL.Equals(input.ShopRedirectURL))
                ) && 
                (
                    this.VatEnabled == input.VatEnabled ||
                    (this.VatEnabled != null &&
                    this.VatEnabled.Equals(input.VatEnabled))
                ) && 
                (
                    this.ImagePath == input.ImagePath ||
                    (this.ImagePath != null &&
                    this.ImagePath.Equals(input.ImagePath))
                ) && 
                (
                    this.CountryLanguage == input.CountryLanguage ||
                    (this.CountryLanguage != null &&
                    this.CountryLanguage.Equals(input.CountryLanguage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.States != null)
                    hashCode = hashCode * 59 + this.States.GetHashCode();
                if (this.CheckAvailability != null)
                    hashCode = hashCode * 59 + this.CheckAvailability.GetHashCode();
                if (this.Continent != null)
                    hashCode = hashCode * 59 + this.Continent.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.CountryDescription != null)
                    hashCode = hashCode * 59 + this.CountryDescription.GetHashCode();
                if (this.CountryName != null)
                    hashCode = hashCode * 59 + this.CountryName.GetHashCode();
                if (this.CreditCardEnabled != null)
                    hashCode = hashCode * 59 + this.CreditCardEnabled.GetHashCode();
                if (this.Culture != null)
                    hashCode = hashCode * 59 + this.Culture.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.DealerCountry != null)
                    hashCode = hashCode * 59 + this.DealerCountry.GetHashCode();
                if (this.EcommerceType != null)
                    hashCode = hashCode * 59 + this.EcommerceType.GetHashCode();
                if (this.McsBaseCatalogName != null)
                    hashCode = hashCode * 59 + this.McsBaseCatalogName.GetHashCode();
                if (this.McsCatalogName != null)
                    hashCode = hashCode * 59 + this.McsCatalogName.GetHashCode();
                if (this.MenuEnabled != null)
                    hashCode = hashCode * 59 + this.MenuEnabled.GetHashCode();
                if (this.PriceAvailable != null)
                    hashCode = hashCode * 59 + this.PriceAvailable.GetHashCode();
                if (this.RedirectURL != null)
                    hashCode = hashCode * 59 + this.RedirectURL.GetHashCode();
                if (this.ShopRedirectURL != null)
                    hashCode = hashCode * 59 + this.ShopRedirectURL.GetHashCode();
                if (this.VatEnabled != null)
                    hashCode = hashCode * 59 + this.VatEnabled.GetHashCode();
                if (this.ImagePath != null)
                    hashCode = hashCode * 59 + this.ImagePath.GetHashCode();
                if (this.CountryLanguage != null)
                    hashCode = hashCode * 59 + this.CountryLanguage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
