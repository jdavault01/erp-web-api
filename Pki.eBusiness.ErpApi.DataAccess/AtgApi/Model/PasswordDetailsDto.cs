/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Pki.eBusiness.ErpApi.DataAccess.Client.SwaggerDateConverter;

namespace Pki.eBusiness.ErpApi.DataAccess.Model
{
    /// <summary>
    /// PasswordDetailsDto
    /// </summary>
    [DataContract]
    public partial class PasswordDetailsDto :  IEquatable<PasswordDetailsDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PasswordDetailsDto" /> class.
        /// </summary>
        /// <param name="Enc">Enc.</param>
        /// <param name="HasherCode">HasherCode.</param>
        /// <param name="Salt">Salt.</param>
        /// <param name="UserName">UserName.</param>
        public PasswordDetailsDto(string Enc = default(string), int? HasherCode = default(int?), string Salt = default(string), string UserName = default(string))
        {
            this.Enc = Enc;
            this.HasherCode = HasherCode;
            this.Salt = Salt;
            this.UserName = UserName;
        }
        
        /// <summary>
        /// Gets or Sets Enc
        /// </summary>
        [DataMember(Name="enc", EmitDefaultValue=false)]
        public string Enc { get; set; }

        /// <summary>
        /// Gets or Sets HasherCode
        /// </summary>
        [DataMember(Name="hasherCode", EmitDefaultValue=false)]
        public int? HasherCode { get; set; }

        /// <summary>
        /// Gets or Sets Salt
        /// </summary>
        [DataMember(Name="salt", EmitDefaultValue=false)]
        public string Salt { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PasswordDetailsDto {\n");
            sb.Append("  Enc: ").Append(Enc).Append("\n");
            sb.Append("  HasherCode: ").Append(HasherCode).Append("\n");
            sb.Append("  Salt: ").Append(Salt).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PasswordDetailsDto);
        }

        /// <summary>
        /// Returns true if PasswordDetailsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of PasswordDetailsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PasswordDetailsDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enc == input.Enc ||
                    (this.Enc != null &&
                    this.Enc.Equals(input.Enc))
                ) && 
                (
                    this.HasherCode == input.HasherCode ||
                    (this.HasherCode != null &&
                    this.HasherCode.Equals(input.HasherCode))
                ) && 
                (
                    this.Salt == input.Salt ||
                    (this.Salt != null &&
                    this.Salt.Equals(input.Salt))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Enc != null)
                    hashCode = hashCode * 59 + this.Enc.GetHashCode();
                if (this.HasherCode != null)
                    hashCode = hashCode * 59 + this.HasherCode.GetHashCode();
                if (this.Salt != null)
                    hashCode = hashCode * 59 + this.Salt.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
