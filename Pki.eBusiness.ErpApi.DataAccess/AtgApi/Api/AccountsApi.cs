/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Pki.eBusiness.ErpApi.DataAccess.Client;
using Pki.eBusiness.ErpApi.DataAccess.Model;

namespace Pki.eBusiness.ErpApi.DataAccess.AtgApi
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// get the ship to level flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>AccountFlagsDto</returns>
        AccountFlagsDto Create (string accountNumber, AccountFlagsDto body = null);

        /// <summary>
        /// get the ship to level flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AccountFlagsDto</returns>
        ApiResponse<AccountFlagsDto> CreateWithHttpInfo (string accountNumber, AccountFlagsDto body = null);
        /// <summary>
        /// Email Preferences
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>AdditionalEmailNotificationDto</returns>
        AdditionalEmailNotificationDto CreateNotificationPreferences (string accountNumber, AdditionalEmailNotificationDto body = null);

        /// <summary>
        /// Email Preferences
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AdditionalEmailNotificationDto</returns>
        ApiResponse<AdditionalEmailNotificationDto> CreateNotificationPreferencesWithHttpInfo (string accountNumber, AdditionalEmailNotificationDto body = null);
        /// <summary>
        /// Create the account level approvals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>AccountDto</returns>
        AccountDto Create_0 (string accountNumber, AccountDto body = null);

        /// <summary>
        /// Create the account level approvals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AccountDto</returns>
        ApiResponse<AccountDto> Create_0WithHttpInfo (string accountNumber, AccountDto body = null);
        /// <summary>
        /// Create the service Part Flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>AccountServicePartFlagsDto</returns>
        AccountServicePartFlagsDto CreateservicePartFlags (string accountNumber, AccountServicePartFlagsDto body = null);

        /// <summary>
        /// Create the service Part Flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AccountServicePartFlagsDto</returns>
        ApiResponse<AccountServicePartFlagsDto> CreateservicePartFlagsWithHttpInfo (string accountNumber, AccountServicePartFlagsDto body = null);
        /// <summary>
        /// get the ship to level flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns></returns>
        void Delete (string accountNumber);

        /// <summary>
        /// get the ship to level flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo (string accountNumber);
        /// <summary>
        /// Remove the account level approvals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns></returns>
        void Delete_0 (string accountNumber);

        /// <summary>
        /// Remove the account level approvals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Delete_0WithHttpInfo (string accountNumber);
        /// <summary>
        /// get the ship to level flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ShipToLevelFlagsListDto</returns>
        ShipToLevelFlagsListDto Get ();

        /// <summary>
        /// get the ship to level flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ShipToLevelFlagsListDto</returns>
        ApiResponse<ShipToLevelFlagsListDto> GetWithHttpInfo ();
        /// <summary>
        /// Get all the approvalLevels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DisplayContentDtoList</returns>
        DisplayContentDtoList GetAccountApprovalLevels ();

        /// <summary>
        /// Get all the approvalLevels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DisplayContentDtoList</returns>
        ApiResponse<DisplayContentDtoList> GetAccountApprovalLevelsWithHttpInfo ();
        /// <summary>
        /// Get all the approvalTypes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DisplayContentDtoList</returns>
        DisplayContentDtoList GetAccountApprovalTypes ();

        /// <summary>
        /// Get all the approvalTypes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DisplayContentDtoList</returns>
        ApiResponse<DisplayContentDtoList> GetAccountApprovalTypesWithHttpInfo ();
        /// <summary>
        /// Get all the ship to account approvals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AccountDtoList</returns>
        AccountDtoList GetAccountApprovals ();

        /// <summary>
        /// Get all the ship to account approvals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AccountDtoList</returns>
        ApiResponse<AccountDtoList> GetAccountApprovalsWithHttpInfo ();
        /// <summary>
        /// returns all the service Part Flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AccountServicePartFlagsDtoList</returns>
        AccountServicePartFlagsDtoList GetAccountServicePartFlags ();

        /// <summary>
        /// returns all the service Part Flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AccountServicePartFlagsDtoList</returns>
        ApiResponse<AccountServicePartFlagsDtoList> GetAccountServicePartFlagsWithHttpInfo ();
        /// <summary>
        /// returns all the emailnotifications at account level
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AdditionalEmailNotificationListDto</returns>
        AdditionalEmailNotificationListDto GetEmailNotifications ();

        /// <summary>
        /// returns all the emailnotifications at account level
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AdditionalEmailNotificationListDto</returns>
        ApiResponse<AdditionalEmailNotificationListDto> GetEmailNotificationsWithHttpInfo ();
        /// <summary>
        /// returns all the notification preferences
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>AdditionalEmailNotificationDto</returns>
        AdditionalEmailNotificationDto GetNotificationPreferences (string accountNumber);

        /// <summary>
        /// returns all the notification preferences
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>ApiResponse of AdditionalEmailNotificationDto</returns>
        ApiResponse<AdditionalEmailNotificationDto> GetNotificationPreferencesWithHttpInfo (string accountNumber);
        /// <summary>
        /// get the ship to level flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="salesOrgId"></param>
        /// <returns>AccountPartnerInfoDto</returns>
        AccountPartnerInfoDto GetPartnerInfo (string accountNumber, string salesOrgId);

        /// <summary>
        /// get the ship to level flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="salesOrgId"></param>
        /// <returns>ApiResponse of AccountPartnerInfoDto</returns>
        ApiResponse<AccountPartnerInfoDto> GetPartnerInfoWithHttpInfo (string accountNumber, string salesOrgId);
        /// <summary>
        /// returns all the service Part Flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DisplayContentDtoList</returns>
        DisplayContentDtoList GetServicePartFlags ();

        /// <summary>
        /// returns all the service Part Flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DisplayContentDtoList</returns>
        ApiResponse<DisplayContentDtoList> GetServicePartFlagsWithHttpInfo ();
        /// <summary>
        /// returns all the service Part Flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>AccountServicePartFlagsDto</returns>
        AccountServicePartFlagsDto GetServicePartFlags_0 (string accountNumber);

        /// <summary>
        /// returns all the service Part Flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>ApiResponse of AccountServicePartFlagsDto</returns>
        ApiResponse<AccountServicePartFlagsDto> GetServicePartFlags_0WithHttpInfo (string accountNumber);
        /// <summary>
        /// returns all the users info for the given account number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>CustomerInfoDtoList</returns>
        CustomerInfoDtoList GetUsers (string accountNumber);

        /// <summary>
        /// returns all the users info for the given account number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>ApiResponse of CustomerInfoDtoList</returns>
        ApiResponse<CustomerInfoDtoList> GetUsersWithHttpInfo (string accountNumber);
        /// <summary>
        /// get the ship to level flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>AccountFlagsDto</returns>
        AccountFlagsDto Get_0 (string accountNumber);

        /// <summary>
        /// get the ship to level flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>ApiResponse of AccountFlagsDto</returns>
        ApiResponse<AccountFlagsDto> Get_0WithHttpInfo (string accountNumber);
        /// <summary>
        /// Get the approvals for a given account number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>AccountDto</returns>
        AccountDto Get_1 (string accountNumber);

        /// <summary>
        /// Get the approvals for a given account number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>ApiResponse of AccountDto</returns>
        ApiResponse<AccountDto> Get_1WithHttpInfo (string accountNumber);
        /// <summary>
        /// remove Notification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns></returns>
        void RemoveNotificationPreference (string accountNumber);

        /// <summary>
        /// remove Notification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveNotificationPreferenceWithHttpInfo (string accountNumber);
        /// <summary>
        /// remove the service Part Flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns></returns>
        void RemoveservicePartFlags (string accountNumber);

        /// <summary>
        /// remove the service Part Flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveservicePartFlagsWithHttpInfo (string accountNumber);
        /// <summary>
        /// get the ship to level flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>AccountFlagsDto</returns>
        AccountFlagsDto Update (string accountNumber, AccountFlagsDto body = null);

        /// <summary>
        /// get the ship to level flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AccountFlagsDto</returns>
        ApiResponse<AccountFlagsDto> UpdateWithHttpInfo (string accountNumber, AccountFlagsDto body = null);
        /// <summary>
        /// Email Preferences
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>AdditionalEmailNotificationDto</returns>
        AdditionalEmailNotificationDto UpdateNotificationPreferences (string accountNumber, AdditionalEmailNotificationDto body = null);

        /// <summary>
        /// Email Preferences
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AdditionalEmailNotificationDto</returns>
        ApiResponse<AdditionalEmailNotificationDto> UpdateNotificationPreferencesWithHttpInfo (string accountNumber, AdditionalEmailNotificationDto body = null);
        /// <summary>
        /// Update the account level approvals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void Update_0 (string accountNumber, AccountDto body = null);

        /// <summary>
        /// Update the account level approvals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Update_0WithHttpInfo (string accountNumber, AccountDto body = null);
        /// <summary>
        /// Update the service Part Flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>AccountServicePartFlagsDto</returns>
        AccountServicePartFlagsDto UpdateservicePartFlags (string accountNumber, AccountServicePartFlagsDto body = null);

        /// <summary>
        /// Update the service Part Flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AccountServicePartFlagsDto</returns>
        ApiResponse<AccountServicePartFlagsDto> UpdateservicePartFlagsWithHttpInfo (string accountNumber, AccountServicePartFlagsDto body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// get the ship to level flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AccountFlagsDto</returns>
        System.Threading.Tasks.Task<AccountFlagsDto> CreateAsync (string accountNumber, AccountFlagsDto body = null);

        /// <summary>
        /// get the ship to level flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountFlagsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountFlagsDto>> CreateAsyncWithHttpInfo (string accountNumber, AccountFlagsDto body = null);
        /// <summary>
        /// Email Preferences
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AdditionalEmailNotificationDto</returns>
        System.Threading.Tasks.Task<AdditionalEmailNotificationDto> CreateNotificationPreferencesAsync (string accountNumber, AdditionalEmailNotificationDto body = null);

        /// <summary>
        /// Email Preferences
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AdditionalEmailNotificationDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdditionalEmailNotificationDto>> CreateNotificationPreferencesAsyncWithHttpInfo (string accountNumber, AdditionalEmailNotificationDto body = null);
        /// <summary>
        /// Create the account level approvals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AccountDto</returns>
        System.Threading.Tasks.Task<AccountDto> Create_0Async (string accountNumber, AccountDto body = null);

        /// <summary>
        /// Create the account level approvals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountDto>> Create_0AsyncWithHttpInfo (string accountNumber, AccountDto body = null);
        /// <summary>
        /// Create the service Part Flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AccountServicePartFlagsDto</returns>
        System.Threading.Tasks.Task<AccountServicePartFlagsDto> CreateservicePartFlagsAsync (string accountNumber, AccountServicePartFlagsDto body = null);

        /// <summary>
        /// Create the service Part Flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountServicePartFlagsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountServicePartFlagsDto>> CreateservicePartFlagsAsyncWithHttpInfo (string accountNumber, AccountServicePartFlagsDto body = null);
        /// <summary>
        /// get the ship to level flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync (string accountNumber);

        /// <summary>
        /// get the ship to level flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (string accountNumber);
        /// <summary>
        /// Remove the account level approvals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Delete_0Async (string accountNumber);

        /// <summary>
        /// Remove the account level approvals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Delete_0AsyncWithHttpInfo (string accountNumber);
        /// <summary>
        /// get the ship to level flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ShipToLevelFlagsListDto</returns>
        System.Threading.Tasks.Task<ShipToLevelFlagsListDto> GetAsync ();

        /// <summary>
        /// get the ship to level flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ShipToLevelFlagsListDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShipToLevelFlagsListDto>> GetAsyncWithHttpInfo ();
        /// <summary>
        /// Get all the approvalLevels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DisplayContentDtoList</returns>
        System.Threading.Tasks.Task<DisplayContentDtoList> GetAccountApprovalLevelsAsync ();

        /// <summary>
        /// Get all the approvalLevels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DisplayContentDtoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<DisplayContentDtoList>> GetAccountApprovalLevelsAsyncWithHttpInfo ();
        /// <summary>
        /// Get all the approvalTypes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DisplayContentDtoList</returns>
        System.Threading.Tasks.Task<DisplayContentDtoList> GetAccountApprovalTypesAsync ();

        /// <summary>
        /// Get all the approvalTypes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DisplayContentDtoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<DisplayContentDtoList>> GetAccountApprovalTypesAsyncWithHttpInfo ();
        /// <summary>
        /// Get all the ship to account approvals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AccountDtoList</returns>
        System.Threading.Tasks.Task<AccountDtoList> GetAccountApprovalsAsync ();

        /// <summary>
        /// Get all the ship to account approvals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AccountDtoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountDtoList>> GetAccountApprovalsAsyncWithHttpInfo ();
        /// <summary>
        /// returns all the service Part Flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AccountServicePartFlagsDtoList</returns>
        System.Threading.Tasks.Task<AccountServicePartFlagsDtoList> GetAccountServicePartFlagsAsync ();

        /// <summary>
        /// returns all the service Part Flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AccountServicePartFlagsDtoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountServicePartFlagsDtoList>> GetAccountServicePartFlagsAsyncWithHttpInfo ();
        /// <summary>
        /// returns all the emailnotifications at account level
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AdditionalEmailNotificationListDto</returns>
        System.Threading.Tasks.Task<AdditionalEmailNotificationListDto> GetEmailNotificationsAsync ();

        /// <summary>
        /// returns all the emailnotifications at account level
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AdditionalEmailNotificationListDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdditionalEmailNotificationListDto>> GetEmailNotificationsAsyncWithHttpInfo ();
        /// <summary>
        /// returns all the notification preferences
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of AdditionalEmailNotificationDto</returns>
        System.Threading.Tasks.Task<AdditionalEmailNotificationDto> GetNotificationPreferencesAsync (string accountNumber);

        /// <summary>
        /// returns all the notification preferences
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of ApiResponse (AdditionalEmailNotificationDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdditionalEmailNotificationDto>> GetNotificationPreferencesAsyncWithHttpInfo (string accountNumber);
        /// <summary>
        /// get the ship to level flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="salesOrgId"></param>
        /// <returns>Task of AccountPartnerInfoDto</returns>
        System.Threading.Tasks.Task<AccountPartnerInfoDto> GetPartnerInfoAsync (string accountNumber, string salesOrgId);

        /// <summary>
        /// get the ship to level flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="salesOrgId"></param>
        /// <returns>Task of ApiResponse (AccountPartnerInfoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountPartnerInfoDto>> GetPartnerInfoAsyncWithHttpInfo (string accountNumber, string salesOrgId);
        /// <summary>
        /// returns all the service Part Flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DisplayContentDtoList</returns>
        System.Threading.Tasks.Task<DisplayContentDtoList> GetServicePartFlagsAsync ();

        /// <summary>
        /// returns all the service Part Flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DisplayContentDtoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<DisplayContentDtoList>> GetServicePartFlagsAsyncWithHttpInfo ();
        /// <summary>
        /// returns all the service Part Flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of AccountServicePartFlagsDto</returns>
        System.Threading.Tasks.Task<AccountServicePartFlagsDto> GetServicePartFlags_0Async (string accountNumber);

        /// <summary>
        /// returns all the service Part Flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of ApiResponse (AccountServicePartFlagsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountServicePartFlagsDto>> GetServicePartFlags_0AsyncWithHttpInfo (string accountNumber);
        /// <summary>
        /// returns all the users info for the given account number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of CustomerInfoDtoList</returns>
        System.Threading.Tasks.Task<CustomerInfoDtoList> GetUsersAsync (string accountNumber);

        /// <summary>
        /// returns all the users info for the given account number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of ApiResponse (CustomerInfoDtoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerInfoDtoList>> GetUsersAsyncWithHttpInfo (string accountNumber);
        /// <summary>
        /// get the ship to level flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of AccountFlagsDto</returns>
        System.Threading.Tasks.Task<AccountFlagsDto> Get_0Async (string accountNumber);

        /// <summary>
        /// get the ship to level flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of ApiResponse (AccountFlagsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountFlagsDto>> Get_0AsyncWithHttpInfo (string accountNumber);
        /// <summary>
        /// Get the approvals for a given account number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of AccountDto</returns>
        System.Threading.Tasks.Task<AccountDto> Get_1Async (string accountNumber);

        /// <summary>
        /// Get the approvals for a given account number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of ApiResponse (AccountDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountDto>> Get_1AsyncWithHttpInfo (string accountNumber);
        /// <summary>
        /// remove Notification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveNotificationPreferenceAsync (string accountNumber);

        /// <summary>
        /// remove Notification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveNotificationPreferenceAsyncWithHttpInfo (string accountNumber);
        /// <summary>
        /// remove the service Part Flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveservicePartFlagsAsync (string accountNumber);

        /// <summary>
        /// remove the service Part Flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveservicePartFlagsAsyncWithHttpInfo (string accountNumber);
        /// <summary>
        /// get the ship to level flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AccountFlagsDto</returns>
        System.Threading.Tasks.Task<AccountFlagsDto> UpdateAsync (string accountNumber, AccountFlagsDto body = null);

        /// <summary>
        /// get the ship to level flags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountFlagsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountFlagsDto>> UpdateAsyncWithHttpInfo (string accountNumber, AccountFlagsDto body = null);
        /// <summary>
        /// Email Preferences
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AdditionalEmailNotificationDto</returns>
        System.Threading.Tasks.Task<AdditionalEmailNotificationDto> UpdateNotificationPreferencesAsync (string accountNumber, AdditionalEmailNotificationDto body = null);

        /// <summary>
        /// Email Preferences
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AdditionalEmailNotificationDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdditionalEmailNotificationDto>> UpdateNotificationPreferencesAsyncWithHttpInfo (string accountNumber, AdditionalEmailNotificationDto body = null);
        /// <summary>
        /// Update the account level approvals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Update_0Async (string accountNumber, AccountDto body = null);

        /// <summary>
        /// Update the account level approvals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Update_0AsyncWithHttpInfo (string accountNumber, AccountDto body = null);
        /// <summary>
        /// Update the service Part Flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AccountServicePartFlagsDto</returns>
        System.Threading.Tasks.Task<AccountServicePartFlagsDto> UpdateservicePartFlagsAsync (string accountNumber, AccountServicePartFlagsDto body = null);

        /// <summary>
        /// Update the service Part Flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountServicePartFlagsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountServicePartFlagsDto>> UpdateservicePartFlagsAsyncWithHttpInfo (string accountNumber, AccountServicePartFlagsDto body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountsApi : IAccountsApi
    {
        private Pki.eBusiness.ErpApi.DataAccess.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Pki.eBusiness.ErpApi.DataAccess.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Pki.eBusiness.ErpApi.DataAccess.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Pki.eBusiness.ErpApi.DataAccess.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// get the ship to level flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>AccountFlagsDto</returns>
        public AccountFlagsDto Create (string accountNumber, AccountFlagsDto body = null)
        {
             ApiResponse<AccountFlagsDto> localVarResponse = CreateWithHttpInfo(accountNumber, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get the ship to level flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AccountFlagsDto</returns>
        public ApiResponse< AccountFlagsDto > CreateWithHttpInfo (string accountNumber, AccountFlagsDto body = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->Create");

            var localVarPath = "/accounts/accountflags/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountFlagsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountFlagsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountFlagsDto)));
        }

        /// <summary>
        /// get the ship to level flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AccountFlagsDto</returns>
        public async System.Threading.Tasks.Task<AccountFlagsDto> CreateAsync (string accountNumber, AccountFlagsDto body = null)
        {
             ApiResponse<AccountFlagsDto> localVarResponse = await CreateAsyncWithHttpInfo(accountNumber, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get the ship to level flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountFlagsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountFlagsDto>> CreateAsyncWithHttpInfo (string accountNumber, AccountFlagsDto body = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->Create");

            var localVarPath = "/accounts/accountflags/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountFlagsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountFlagsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountFlagsDto)));
        }

        /// <summary>
        /// Email Preferences 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>AdditionalEmailNotificationDto</returns>
        public AdditionalEmailNotificationDto CreateNotificationPreferences (string accountNumber, AdditionalEmailNotificationDto body = null)
        {
             ApiResponse<AdditionalEmailNotificationDto> localVarResponse = CreateNotificationPreferencesWithHttpInfo(accountNumber, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Email Preferences 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AdditionalEmailNotificationDto</returns>
        public ApiResponse< AdditionalEmailNotificationDto > CreateNotificationPreferencesWithHttpInfo (string accountNumber, AdditionalEmailNotificationDto body = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->CreateNotificationPreferences");

            var localVarPath = "/accounts/emailnotification/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNotificationPreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdditionalEmailNotificationDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdditionalEmailNotificationDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdditionalEmailNotificationDto)));
        }

        /// <summary>
        /// Email Preferences 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AdditionalEmailNotificationDto</returns>
        public async System.Threading.Tasks.Task<AdditionalEmailNotificationDto> CreateNotificationPreferencesAsync (string accountNumber, AdditionalEmailNotificationDto body = null)
        {
             ApiResponse<AdditionalEmailNotificationDto> localVarResponse = await CreateNotificationPreferencesAsyncWithHttpInfo(accountNumber, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Email Preferences 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AdditionalEmailNotificationDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdditionalEmailNotificationDto>> CreateNotificationPreferencesAsyncWithHttpInfo (string accountNumber, AdditionalEmailNotificationDto body = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->CreateNotificationPreferences");

            var localVarPath = "/accounts/emailnotification/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNotificationPreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdditionalEmailNotificationDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdditionalEmailNotificationDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdditionalEmailNotificationDto)));
        }

        /// <summary>
        /// Create the account level approvals 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>AccountDto</returns>
        public AccountDto Create_0 (string accountNumber, AccountDto body = null)
        {
             ApiResponse<AccountDto> localVarResponse = Create_0WithHttpInfo(accountNumber, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create the account level approvals 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AccountDto</returns>
        public ApiResponse< AccountDto > Create_0WithHttpInfo (string accountNumber, AccountDto body = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->Create_0");

            var localVarPath = "/accounts/{accountNumber}/approval";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountDto)));
        }

        /// <summary>
        /// Create the account level approvals 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AccountDto</returns>
        public async System.Threading.Tasks.Task<AccountDto> Create_0Async (string accountNumber, AccountDto body = null)
        {
             ApiResponse<AccountDto> localVarResponse = await Create_0AsyncWithHttpInfo(accountNumber, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create the account level approvals 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountDto>> Create_0AsyncWithHttpInfo (string accountNumber, AccountDto body = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->Create_0");

            var localVarPath = "/accounts/{accountNumber}/approval";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountDto)));
        }

        /// <summary>
        /// Create the service Part Flag 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>AccountServicePartFlagsDto</returns>
        public AccountServicePartFlagsDto CreateservicePartFlags (string accountNumber, AccountServicePartFlagsDto body = null)
        {
             ApiResponse<AccountServicePartFlagsDto> localVarResponse = CreateservicePartFlagsWithHttpInfo(accountNumber, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create the service Part Flag 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AccountServicePartFlagsDto</returns>
        public ApiResponse< AccountServicePartFlagsDto > CreateservicePartFlagsWithHttpInfo (string accountNumber, AccountServicePartFlagsDto body = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->CreateservicePartFlags");

            var localVarPath = "/accounts/servicePartFlags/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateservicePartFlags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountServicePartFlagsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountServicePartFlagsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountServicePartFlagsDto)));
        }

        /// <summary>
        /// Create the service Part Flag 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AccountServicePartFlagsDto</returns>
        public async System.Threading.Tasks.Task<AccountServicePartFlagsDto> CreateservicePartFlagsAsync (string accountNumber, AccountServicePartFlagsDto body = null)
        {
             ApiResponse<AccountServicePartFlagsDto> localVarResponse = await CreateservicePartFlagsAsyncWithHttpInfo(accountNumber, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create the service Part Flag 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountServicePartFlagsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountServicePartFlagsDto>> CreateservicePartFlagsAsyncWithHttpInfo (string accountNumber, AccountServicePartFlagsDto body = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->CreateservicePartFlags");

            var localVarPath = "/accounts/servicePartFlags/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateservicePartFlags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountServicePartFlagsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountServicePartFlagsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountServicePartFlagsDto)));
        }

        /// <summary>
        /// get the ship to level flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns></returns>
        public void Delete (string accountNumber)
        {
             DeleteWithHttpInfo(accountNumber);
        }

        /// <summary>
        /// get the ship to level flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWithHttpInfo (string accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->Delete");

            var localVarPath = "/accounts/accountflags/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// get the ship to level flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync (string accountNumber)
        {
             await DeleteAsyncWithHttpInfo(accountNumber);

        }

        /// <summary>
        /// get the ship to level flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (string accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->Delete");

            var localVarPath = "/accounts/accountflags/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove the account level approvals 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns></returns>
        public void Delete_0 (string accountNumber)
        {
             Delete_0WithHttpInfo(accountNumber);
        }

        /// <summary>
        /// Remove the account level approvals 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Delete_0WithHttpInfo (string accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->Delete_0");

            var localVarPath = "/accounts/{accountNumber}/approval";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove the account level approvals 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Delete_0Async (string accountNumber)
        {
             await Delete_0AsyncWithHttpInfo(accountNumber);

        }

        /// <summary>
        /// Remove the account level approvals 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Delete_0AsyncWithHttpInfo (string accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->Delete_0");

            var localVarPath = "/accounts/{accountNumber}/approval";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// get the ship to level flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ShipToLevelFlagsListDto</returns>
        public ShipToLevelFlagsListDto Get ()
        {
             ApiResponse<ShipToLevelFlagsListDto> localVarResponse = GetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// get the ship to level flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ShipToLevelFlagsListDto</returns>
        public ApiResponse< ShipToLevelFlagsListDto > GetWithHttpInfo ()
        {

            var localVarPath = "/accounts/accountflags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShipToLevelFlagsListDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShipToLevelFlagsListDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShipToLevelFlagsListDto)));
        }

        /// <summary>
        /// get the ship to level flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ShipToLevelFlagsListDto</returns>
        public async System.Threading.Tasks.Task<ShipToLevelFlagsListDto> GetAsync ()
        {
             ApiResponse<ShipToLevelFlagsListDto> localVarResponse = await GetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// get the ship to level flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ShipToLevelFlagsListDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShipToLevelFlagsListDto>> GetAsyncWithHttpInfo ()
        {

            var localVarPath = "/accounts/accountflags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShipToLevelFlagsListDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShipToLevelFlagsListDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShipToLevelFlagsListDto)));
        }

        /// <summary>
        /// Get all the approvalLevels 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DisplayContentDtoList</returns>
        public DisplayContentDtoList GetAccountApprovalLevels ()
        {
             ApiResponse<DisplayContentDtoList> localVarResponse = GetAccountApprovalLevelsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the approvalLevels 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DisplayContentDtoList</returns>
        public ApiResponse< DisplayContentDtoList > GetAccountApprovalLevelsWithHttpInfo ()
        {

            var localVarPath = "/accounts/approvalLevels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountApprovalLevels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DisplayContentDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DisplayContentDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DisplayContentDtoList)));
        }

        /// <summary>
        /// Get all the approvalLevels 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DisplayContentDtoList</returns>
        public async System.Threading.Tasks.Task<DisplayContentDtoList> GetAccountApprovalLevelsAsync ()
        {
             ApiResponse<DisplayContentDtoList> localVarResponse = await GetAccountApprovalLevelsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the approvalLevels 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DisplayContentDtoList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DisplayContentDtoList>> GetAccountApprovalLevelsAsyncWithHttpInfo ()
        {

            var localVarPath = "/accounts/approvalLevels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountApprovalLevels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DisplayContentDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DisplayContentDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DisplayContentDtoList)));
        }

        /// <summary>
        /// Get all the approvalTypes 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DisplayContentDtoList</returns>
        public DisplayContentDtoList GetAccountApprovalTypes ()
        {
             ApiResponse<DisplayContentDtoList> localVarResponse = GetAccountApprovalTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the approvalTypes 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DisplayContentDtoList</returns>
        public ApiResponse< DisplayContentDtoList > GetAccountApprovalTypesWithHttpInfo ()
        {

            var localVarPath = "/accounts/approvalTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountApprovalTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DisplayContentDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DisplayContentDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DisplayContentDtoList)));
        }

        /// <summary>
        /// Get all the approvalTypes 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DisplayContentDtoList</returns>
        public async System.Threading.Tasks.Task<DisplayContentDtoList> GetAccountApprovalTypesAsync ()
        {
             ApiResponse<DisplayContentDtoList> localVarResponse = await GetAccountApprovalTypesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the approvalTypes 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DisplayContentDtoList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DisplayContentDtoList>> GetAccountApprovalTypesAsyncWithHttpInfo ()
        {

            var localVarPath = "/accounts/approvalTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountApprovalTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DisplayContentDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DisplayContentDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DisplayContentDtoList)));
        }

        /// <summary>
        /// Get all the ship to account approvals 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AccountDtoList</returns>
        public AccountDtoList GetAccountApprovals ()
        {
             ApiResponse<AccountDtoList> localVarResponse = GetAccountApprovalsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the ship to account approvals 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AccountDtoList</returns>
        public ApiResponse< AccountDtoList > GetAccountApprovalsWithHttpInfo ()
        {

            var localVarPath = "/accounts/approvals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountApprovals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountDtoList)));
        }

        /// <summary>
        /// Get all the ship to account approvals 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AccountDtoList</returns>
        public async System.Threading.Tasks.Task<AccountDtoList> GetAccountApprovalsAsync ()
        {
             ApiResponse<AccountDtoList> localVarResponse = await GetAccountApprovalsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the ship to account approvals 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AccountDtoList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountDtoList>> GetAccountApprovalsAsyncWithHttpInfo ()
        {

            var localVarPath = "/accounts/approvals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountApprovals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountDtoList)));
        }

        /// <summary>
        /// returns all the service Part Flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AccountServicePartFlagsDtoList</returns>
        public AccountServicePartFlagsDtoList GetAccountServicePartFlags ()
        {
             ApiResponse<AccountServicePartFlagsDtoList> localVarResponse = GetAccountServicePartFlagsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// returns all the service Part Flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AccountServicePartFlagsDtoList</returns>
        public ApiResponse< AccountServicePartFlagsDtoList > GetAccountServicePartFlagsWithHttpInfo ()
        {

            var localVarPath = "/accounts/servicePartFlags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountServicePartFlags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountServicePartFlagsDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountServicePartFlagsDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountServicePartFlagsDtoList)));
        }

        /// <summary>
        /// returns all the service Part Flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AccountServicePartFlagsDtoList</returns>
        public async System.Threading.Tasks.Task<AccountServicePartFlagsDtoList> GetAccountServicePartFlagsAsync ()
        {
             ApiResponse<AccountServicePartFlagsDtoList> localVarResponse = await GetAccountServicePartFlagsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// returns all the service Part Flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AccountServicePartFlagsDtoList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountServicePartFlagsDtoList>> GetAccountServicePartFlagsAsyncWithHttpInfo ()
        {

            var localVarPath = "/accounts/servicePartFlags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountServicePartFlags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountServicePartFlagsDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountServicePartFlagsDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountServicePartFlagsDtoList)));
        }

        /// <summary>
        /// returns all the emailnotifications at account level 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AdditionalEmailNotificationListDto</returns>
        public AdditionalEmailNotificationListDto GetEmailNotifications ()
        {
             ApiResponse<AdditionalEmailNotificationListDto> localVarResponse = GetEmailNotificationsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// returns all the emailnotifications at account level 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AdditionalEmailNotificationListDto</returns>
        public ApiResponse< AdditionalEmailNotificationListDto > GetEmailNotificationsWithHttpInfo ()
        {

            var localVarPath = "/accounts/emailnotification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdditionalEmailNotificationListDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdditionalEmailNotificationListDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdditionalEmailNotificationListDto)));
        }

        /// <summary>
        /// returns all the emailnotifications at account level 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AdditionalEmailNotificationListDto</returns>
        public async System.Threading.Tasks.Task<AdditionalEmailNotificationListDto> GetEmailNotificationsAsync ()
        {
             ApiResponse<AdditionalEmailNotificationListDto> localVarResponse = await GetEmailNotificationsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// returns all the emailnotifications at account level 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AdditionalEmailNotificationListDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdditionalEmailNotificationListDto>> GetEmailNotificationsAsyncWithHttpInfo ()
        {

            var localVarPath = "/accounts/emailnotification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdditionalEmailNotificationListDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdditionalEmailNotificationListDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdditionalEmailNotificationListDto)));
        }

        /// <summary>
        /// returns all the notification preferences 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>AdditionalEmailNotificationDto</returns>
        public AdditionalEmailNotificationDto GetNotificationPreferences (string accountNumber)
        {
             ApiResponse<AdditionalEmailNotificationDto> localVarResponse = GetNotificationPreferencesWithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// returns all the notification preferences 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>ApiResponse of AdditionalEmailNotificationDto</returns>
        public ApiResponse< AdditionalEmailNotificationDto > GetNotificationPreferencesWithHttpInfo (string accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->GetNotificationPreferences");

            var localVarPath = "/accounts/emailnotification/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNotificationPreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdditionalEmailNotificationDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdditionalEmailNotificationDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdditionalEmailNotificationDto)));
        }

        /// <summary>
        /// returns all the notification preferences 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of AdditionalEmailNotificationDto</returns>
        public async System.Threading.Tasks.Task<AdditionalEmailNotificationDto> GetNotificationPreferencesAsync (string accountNumber)
        {
             ApiResponse<AdditionalEmailNotificationDto> localVarResponse = await GetNotificationPreferencesAsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// returns all the notification preferences 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of ApiResponse (AdditionalEmailNotificationDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdditionalEmailNotificationDto>> GetNotificationPreferencesAsyncWithHttpInfo (string accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->GetNotificationPreferences");

            var localVarPath = "/accounts/emailnotification/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNotificationPreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdditionalEmailNotificationDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdditionalEmailNotificationDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdditionalEmailNotificationDto)));
        }

        /// <summary>
        /// get the ship to level flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="salesOrgId"></param>
        /// <returns>AccountPartnerInfoDto</returns>
        public AccountPartnerInfoDto GetPartnerInfo (string accountNumber, string salesOrgId)
        {
             ApiResponse<AccountPartnerInfoDto> localVarResponse = GetPartnerInfoWithHttpInfo(accountNumber, salesOrgId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get the ship to level flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="salesOrgId"></param>
        /// <returns>ApiResponse of AccountPartnerInfoDto</returns>
        public ApiResponse< AccountPartnerInfoDto > GetPartnerInfoWithHttpInfo (string accountNumber, string salesOrgId)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->GetPartnerInfo");
            // verify the required parameter 'salesOrgId' is set
            if (salesOrgId == null)
                throw new ApiException(400, "Missing required parameter 'salesOrgId' when calling AccountsApi->GetPartnerInfo");

            var localVarPath = "/accounts/partnerInfo/{accountNumber}/{salesOrgId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (salesOrgId != null) localVarPathParams.Add("salesOrgId", Configuration.ApiClient.ParameterToString(salesOrgId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPartnerInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountPartnerInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountPartnerInfoDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountPartnerInfoDto)));
        }

        /// <summary>
        /// get the ship to level flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="salesOrgId"></param>
        /// <returns>Task of AccountPartnerInfoDto</returns>
        public async System.Threading.Tasks.Task<AccountPartnerInfoDto> GetPartnerInfoAsync (string accountNumber, string salesOrgId)
        {
             ApiResponse<AccountPartnerInfoDto> localVarResponse = await GetPartnerInfoAsyncWithHttpInfo(accountNumber, salesOrgId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get the ship to level flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="salesOrgId"></param>
        /// <returns>Task of ApiResponse (AccountPartnerInfoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountPartnerInfoDto>> GetPartnerInfoAsyncWithHttpInfo (string accountNumber, string salesOrgId)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->GetPartnerInfo");
            // verify the required parameter 'salesOrgId' is set
            if (salesOrgId == null)
                throw new ApiException(400, "Missing required parameter 'salesOrgId' when calling AccountsApi->GetPartnerInfo");

            var localVarPath = "/accounts/partnerInfo/{accountNumber}/{salesOrgId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (salesOrgId != null) localVarPathParams.Add("salesOrgId", Configuration.ApiClient.ParameterToString(salesOrgId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPartnerInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountPartnerInfoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountPartnerInfoDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountPartnerInfoDto)));
        }

        /// <summary>
        /// returns all the service Part Flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DisplayContentDtoList</returns>
        public DisplayContentDtoList GetServicePartFlags ()
        {
             ApiResponse<DisplayContentDtoList> localVarResponse = GetServicePartFlagsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// returns all the service Part Flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DisplayContentDtoList</returns>
        public ApiResponse< DisplayContentDtoList > GetServicePartFlagsWithHttpInfo ()
        {

            var localVarPath = "/accounts/listServiceParts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServicePartFlags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DisplayContentDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DisplayContentDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DisplayContentDtoList)));
        }

        /// <summary>
        /// returns all the service Part Flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DisplayContentDtoList</returns>
        public async System.Threading.Tasks.Task<DisplayContentDtoList> GetServicePartFlagsAsync ()
        {
             ApiResponse<DisplayContentDtoList> localVarResponse = await GetServicePartFlagsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// returns all the service Part Flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DisplayContentDtoList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DisplayContentDtoList>> GetServicePartFlagsAsyncWithHttpInfo ()
        {

            var localVarPath = "/accounts/listServiceParts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServicePartFlags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DisplayContentDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DisplayContentDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DisplayContentDtoList)));
        }

        /// <summary>
        /// returns all the service Part Flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>AccountServicePartFlagsDto</returns>
        public AccountServicePartFlagsDto GetServicePartFlags_0 (string accountNumber)
        {
             ApiResponse<AccountServicePartFlagsDto> localVarResponse = GetServicePartFlags_0WithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// returns all the service Part Flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>ApiResponse of AccountServicePartFlagsDto</returns>
        public ApiResponse< AccountServicePartFlagsDto > GetServicePartFlags_0WithHttpInfo (string accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->GetServicePartFlags_0");

            var localVarPath = "/accounts/servicePartFlags/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServicePartFlags_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountServicePartFlagsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountServicePartFlagsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountServicePartFlagsDto)));
        }

        /// <summary>
        /// returns all the service Part Flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of AccountServicePartFlagsDto</returns>
        public async System.Threading.Tasks.Task<AccountServicePartFlagsDto> GetServicePartFlags_0Async (string accountNumber)
        {
             ApiResponse<AccountServicePartFlagsDto> localVarResponse = await GetServicePartFlags_0AsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// returns all the service Part Flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of ApiResponse (AccountServicePartFlagsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountServicePartFlagsDto>> GetServicePartFlags_0AsyncWithHttpInfo (string accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->GetServicePartFlags_0");

            var localVarPath = "/accounts/servicePartFlags/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServicePartFlags_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountServicePartFlagsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountServicePartFlagsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountServicePartFlagsDto)));
        }

        /// <summary>
        /// returns all the users info for the given account number 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>CustomerInfoDtoList</returns>
        public CustomerInfoDtoList GetUsers (string accountNumber)
        {
             ApiResponse<CustomerInfoDtoList> localVarResponse = GetUsersWithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// returns all the users info for the given account number 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>ApiResponse of CustomerInfoDtoList</returns>
        public ApiResponse< CustomerInfoDtoList > GetUsersWithHttpInfo (string accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->GetUsers");

            var localVarPath = "/accounts/{accountNumber}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerInfoDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerInfoDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerInfoDtoList)));
        }

        /// <summary>
        /// returns all the users info for the given account number 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of CustomerInfoDtoList</returns>
        public async System.Threading.Tasks.Task<CustomerInfoDtoList> GetUsersAsync (string accountNumber)
        {
             ApiResponse<CustomerInfoDtoList> localVarResponse = await GetUsersAsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// returns all the users info for the given account number 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of ApiResponse (CustomerInfoDtoList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerInfoDtoList>> GetUsersAsyncWithHttpInfo (string accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->GetUsers");

            var localVarPath = "/accounts/{accountNumber}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerInfoDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomerInfoDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerInfoDtoList)));
        }

        /// <summary>
        /// get the ship to level flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>AccountFlagsDto</returns>
        public AccountFlagsDto Get_0 (string accountNumber)
        {
             ApiResponse<AccountFlagsDto> localVarResponse = Get_0WithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get the ship to level flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>ApiResponse of AccountFlagsDto</returns>
        public ApiResponse< AccountFlagsDto > Get_0WithHttpInfo (string accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->Get_0");

            var localVarPath = "/accounts/accountflags/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountFlagsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountFlagsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountFlagsDto)));
        }

        /// <summary>
        /// get the ship to level flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of AccountFlagsDto</returns>
        public async System.Threading.Tasks.Task<AccountFlagsDto> Get_0Async (string accountNumber)
        {
             ApiResponse<AccountFlagsDto> localVarResponse = await Get_0AsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get the ship to level flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of ApiResponse (AccountFlagsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountFlagsDto>> Get_0AsyncWithHttpInfo (string accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->Get_0");

            var localVarPath = "/accounts/accountflags/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountFlagsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountFlagsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountFlagsDto)));
        }

        /// <summary>
        /// Get the approvals for a given account number 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>AccountDto</returns>
        public AccountDto Get_1 (string accountNumber)
        {
             ApiResponse<AccountDto> localVarResponse = Get_1WithHttpInfo(accountNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the approvals for a given account number 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>ApiResponse of AccountDto</returns>
        public ApiResponse< AccountDto > Get_1WithHttpInfo (string accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->Get_1");

            var localVarPath = "/accounts/{accountNumber}/approval";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get_1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountDto)));
        }

        /// <summary>
        /// Get the approvals for a given account number 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of AccountDto</returns>
        public async System.Threading.Tasks.Task<AccountDto> Get_1Async (string accountNumber)
        {
             ApiResponse<AccountDto> localVarResponse = await Get_1AsyncWithHttpInfo(accountNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the approvals for a given account number 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of ApiResponse (AccountDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountDto>> Get_1AsyncWithHttpInfo (string accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->Get_1");

            var localVarPath = "/accounts/{accountNumber}/approval";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get_1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountDto)));
        }

        /// <summary>
        /// remove Notification 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns></returns>
        public void RemoveNotificationPreference (string accountNumber)
        {
             RemoveNotificationPreferenceWithHttpInfo(accountNumber);
        }

        /// <summary>
        /// remove Notification 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveNotificationPreferenceWithHttpInfo (string accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->RemoveNotificationPreference");

            var localVarPath = "/accounts/emailnotification/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveNotificationPreference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// remove Notification 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveNotificationPreferenceAsync (string accountNumber)
        {
             await RemoveNotificationPreferenceAsyncWithHttpInfo(accountNumber);

        }

        /// <summary>
        /// remove Notification 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveNotificationPreferenceAsyncWithHttpInfo (string accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->RemoveNotificationPreference");

            var localVarPath = "/accounts/emailnotification/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveNotificationPreference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// remove the service Part Flag 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns></returns>
        public void RemoveservicePartFlags (string accountNumber)
        {
             RemoveservicePartFlagsWithHttpInfo(accountNumber);
        }

        /// <summary>
        /// remove the service Part Flag 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveservicePartFlagsWithHttpInfo (string accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->RemoveservicePartFlags");

            var localVarPath = "/accounts/servicePartFlags/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveservicePartFlags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// remove the service Part Flag 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveservicePartFlagsAsync (string accountNumber)
        {
             await RemoveservicePartFlagsAsyncWithHttpInfo(accountNumber);

        }

        /// <summary>
        /// remove the service Part Flag 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveservicePartFlagsAsyncWithHttpInfo (string accountNumber)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->RemoveservicePartFlags");

            var localVarPath = "/accounts/servicePartFlags/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveservicePartFlags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// get the ship to level flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>AccountFlagsDto</returns>
        public AccountFlagsDto Update (string accountNumber, AccountFlagsDto body = null)
        {
             ApiResponse<AccountFlagsDto> localVarResponse = UpdateWithHttpInfo(accountNumber, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get the ship to level flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AccountFlagsDto</returns>
        public ApiResponse< AccountFlagsDto > UpdateWithHttpInfo (string accountNumber, AccountFlagsDto body = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->Update");

            var localVarPath = "/accounts/accountflags/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountFlagsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountFlagsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountFlagsDto)));
        }

        /// <summary>
        /// get the ship to level flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AccountFlagsDto</returns>
        public async System.Threading.Tasks.Task<AccountFlagsDto> UpdateAsync (string accountNumber, AccountFlagsDto body = null)
        {
             ApiResponse<AccountFlagsDto> localVarResponse = await UpdateAsyncWithHttpInfo(accountNumber, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get the ship to level flags 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountFlagsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountFlagsDto>> UpdateAsyncWithHttpInfo (string accountNumber, AccountFlagsDto body = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->Update");

            var localVarPath = "/accounts/accountflags/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountFlagsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountFlagsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountFlagsDto)));
        }

        /// <summary>
        /// Email Preferences 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>AdditionalEmailNotificationDto</returns>
        public AdditionalEmailNotificationDto UpdateNotificationPreferences (string accountNumber, AdditionalEmailNotificationDto body = null)
        {
             ApiResponse<AdditionalEmailNotificationDto> localVarResponse = UpdateNotificationPreferencesWithHttpInfo(accountNumber, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Email Preferences 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AdditionalEmailNotificationDto</returns>
        public ApiResponse< AdditionalEmailNotificationDto > UpdateNotificationPreferencesWithHttpInfo (string accountNumber, AdditionalEmailNotificationDto body = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->UpdateNotificationPreferences");

            var localVarPath = "/accounts/emailnotification/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNotificationPreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdditionalEmailNotificationDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdditionalEmailNotificationDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdditionalEmailNotificationDto)));
        }

        /// <summary>
        /// Email Preferences 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AdditionalEmailNotificationDto</returns>
        public async System.Threading.Tasks.Task<AdditionalEmailNotificationDto> UpdateNotificationPreferencesAsync (string accountNumber, AdditionalEmailNotificationDto body = null)
        {
             ApiResponse<AdditionalEmailNotificationDto> localVarResponse = await UpdateNotificationPreferencesAsyncWithHttpInfo(accountNumber, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Email Preferences 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AdditionalEmailNotificationDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdditionalEmailNotificationDto>> UpdateNotificationPreferencesAsyncWithHttpInfo (string accountNumber, AdditionalEmailNotificationDto body = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->UpdateNotificationPreferences");

            var localVarPath = "/accounts/emailnotification/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNotificationPreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdditionalEmailNotificationDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdditionalEmailNotificationDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdditionalEmailNotificationDto)));
        }

        /// <summary>
        /// Update the account level approvals 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void Update_0 (string accountNumber, AccountDto body = null)
        {
             Update_0WithHttpInfo(accountNumber, body);
        }

        /// <summary>
        /// Update the account level approvals 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Update_0WithHttpInfo (string accountNumber, AccountDto body = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->Update_0");

            var localVarPath = "/accounts/{accountNumber}/approval";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update the account level approvals 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Update_0Async (string accountNumber, AccountDto body = null)
        {
             await Update_0AsyncWithHttpInfo(accountNumber, body);

        }

        /// <summary>
        /// Update the account level approvals 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Update_0AsyncWithHttpInfo (string accountNumber, AccountDto body = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->Update_0");

            var localVarPath = "/accounts/{accountNumber}/approval";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update the service Part Flag 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>AccountServicePartFlagsDto</returns>
        public AccountServicePartFlagsDto UpdateservicePartFlags (string accountNumber, AccountServicePartFlagsDto body = null)
        {
             ApiResponse<AccountServicePartFlagsDto> localVarResponse = UpdateservicePartFlagsWithHttpInfo(accountNumber, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the service Part Flag 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AccountServicePartFlagsDto</returns>
        public ApiResponse< AccountServicePartFlagsDto > UpdateservicePartFlagsWithHttpInfo (string accountNumber, AccountServicePartFlagsDto body = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->UpdateservicePartFlags");

            var localVarPath = "/accounts/servicePartFlags/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateservicePartFlags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountServicePartFlagsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountServicePartFlagsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountServicePartFlagsDto)));
        }

        /// <summary>
        /// Update the service Part Flag 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AccountServicePartFlagsDto</returns>
        public async System.Threading.Tasks.Task<AccountServicePartFlagsDto> UpdateservicePartFlagsAsync (string accountNumber, AccountServicePartFlagsDto body = null)
        {
             ApiResponse<AccountServicePartFlagsDto> localVarResponse = await UpdateservicePartFlagsAsyncWithHttpInfo(accountNumber, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the service Part Flag 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNumber"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AccountServicePartFlagsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountServicePartFlagsDto>> UpdateservicePartFlagsAsyncWithHttpInfo (string accountNumber, AccountServicePartFlagsDto body = null)
        {
            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new ApiException(400, "Missing required parameter 'accountNumber' when calling AccountsApi->UpdateservicePartFlags");

            var localVarPath = "/accounts/servicePartFlags/{accountNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountNumber != null) localVarPathParams.Add("accountNumber", Configuration.ApiClient.ParameterToString(accountNumber)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateservicePartFlags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountServicePartFlagsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountServicePartFlagsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountServicePartFlagsDto)));
        }

    }
}
