/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Pki.eBusiness.ErpApi.DataAccess.Client;
using Pki.eBusiness.ErpApi.DataAccess.Model;

namespace Pki.eBusiness.ErpApi.DataAccess.AtgApi
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get other search details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>OtherContentItemDto</returns>
        OtherContentItemDto GetSearchOtherContentResult (string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null, string searchTerm = null);

        /// <summary>
        /// Get other search details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>ApiResponse of OtherContentItemDto</returns>
        ApiResponse<OtherContentItemDto> GetSearchOtherContentResultWithHttpInfo (string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null, string searchTerm = null);
        /// <summary>
        /// Get search details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>CategoryContentItemDto</returns>
        CategoryContentItemDto GetSearchResults (string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null, string searchTerm = null);

        /// <summary>
        /// Get search details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>ApiResponse of CategoryContentItemDto</returns>
        ApiResponse<CategoryContentItemDto> GetSearchResultsWithHttpInfo (string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null, string searchTerm = null);
        /// <summary>
        /// Get search results for the search term
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="resultSize"> (optional)</param>
        /// <returns>SearchTermDto</returns>
        SearchTermDto PartNumbersTypeAheadSearch (string userId = null, string countryName = null, string searchTerm = null, int? resultSize = null);

        /// <summary>
        /// Get search results for the search term
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="resultSize"> (optional)</param>
        /// <returns>ApiResponse of SearchTermDto</returns>
        ApiResponse<SearchTermDto> PartNumbersTypeAheadSearchWithHttpInfo (string userId = null, string countryName = null, string searchTerm = null, int? resultSize = null);
        /// <summary>
        /// Get search results for the search term
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryName"> (optional)</param>
        /// <returns>ResourcesTypeDimensions</returns>
        ResourcesTypeDimensions ResourcesTypeDimensions (string countryName = null);

        /// <summary>
        /// Get search results for the search term
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryName"> (optional)</param>
        /// <returns>ApiResponse of ResourcesTypeDimensions</returns>
        ApiResponse<ResourcesTypeDimensions> ResourcesTypeDimensionsWithHttpInfo (string countryName = null);
        /// <summary>
        /// Get search results for the search term
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm"></param>
        /// <returns>SearchTermDto</returns>
        SearchTermDto TermsAndConditionsTypeAhead (string searchTerm);

        /// <summary>
        /// Get search results for the search term
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm"></param>
        /// <returns>ApiResponse of SearchTermDto</returns>
        ApiResponse<SearchTermDto> TermsAndConditionsTypeAheadWithHttpInfo (string searchTerm);
        /// <summary>
        /// Get search results for the keyword
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchKeyword"></param>
        /// <returns>TypeAheadResponseDtoList</returns>
        TypeAheadResponseDtoList TypeAheadNameAndNumber (string searchKeyword);

        /// <summary>
        /// Get search results for the keyword
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchKeyword"></param>
        /// <returns>ApiResponse of TypeAheadResponseDtoList</returns>
        ApiResponse<TypeAheadResponseDtoList> TypeAheadNameAndNumberWithHttpInfo (string searchKeyword);
        /// <summary>
        /// Get search results for the search term
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>SearchContentItemDto</returns>
        SearchContentItemDto TypeAheadSearch (string userId = null, string countryName = null, string searchTerm = null);

        /// <summary>
        /// Get search results for the search term
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>ApiResponse of SearchContentItemDto</returns>
        ApiResponse<SearchContentItemDto> TypeAheadSearchWithHttpInfo (string userId = null, string countryName = null, string searchTerm = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get other search details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>Task of OtherContentItemDto</returns>
        System.Threading.Tasks.Task<OtherContentItemDto> GetSearchOtherContentResultAsync (string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null, string searchTerm = null);

        /// <summary>
        /// Get other search details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>Task of ApiResponse (OtherContentItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OtherContentItemDto>> GetSearchOtherContentResultAsyncWithHttpInfo (string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null, string searchTerm = null);
        /// <summary>
        /// Get search details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>Task of CategoryContentItemDto</returns>
        System.Threading.Tasks.Task<CategoryContentItemDto> GetSearchResultsAsync (string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null, string searchTerm = null);

        /// <summary>
        /// Get search details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>Task of ApiResponse (CategoryContentItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryContentItemDto>> GetSearchResultsAsyncWithHttpInfo (string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null, string searchTerm = null);
        /// <summary>
        /// Get search results for the search term
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="resultSize"> (optional)</param>
        /// <returns>Task of SearchTermDto</returns>
        System.Threading.Tasks.Task<SearchTermDto> PartNumbersTypeAheadSearchAsync (string userId = null, string countryName = null, string searchTerm = null, int? resultSize = null);

        /// <summary>
        /// Get search results for the search term
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="resultSize"> (optional)</param>
        /// <returns>Task of ApiResponse (SearchTermDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchTermDto>> PartNumbersTypeAheadSearchAsyncWithHttpInfo (string userId = null, string countryName = null, string searchTerm = null, int? resultSize = null);
        /// <summary>
        /// Get search results for the search term
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of ResourcesTypeDimensions</returns>
        System.Threading.Tasks.Task<ResourcesTypeDimensions> ResourcesTypeDimensionsAsync (string countryName = null);

        /// <summary>
        /// Get search results for the search term
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of ApiResponse (ResourcesTypeDimensions)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourcesTypeDimensions>> ResourcesTypeDimensionsAsyncWithHttpInfo (string countryName = null);
        /// <summary>
        /// Get search results for the search term
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm"></param>
        /// <returns>Task of SearchTermDto</returns>
        System.Threading.Tasks.Task<SearchTermDto> TermsAndConditionsTypeAheadAsync (string searchTerm);

        /// <summary>
        /// Get search results for the search term
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm"></param>
        /// <returns>Task of ApiResponse (SearchTermDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchTermDto>> TermsAndConditionsTypeAheadAsyncWithHttpInfo (string searchTerm);
        /// <summary>
        /// Get search results for the keyword
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchKeyword"></param>
        /// <returns>Task of TypeAheadResponseDtoList</returns>
        System.Threading.Tasks.Task<TypeAheadResponseDtoList> TypeAheadNameAndNumberAsync (string searchKeyword);

        /// <summary>
        /// Get search results for the keyword
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchKeyword"></param>
        /// <returns>Task of ApiResponse (TypeAheadResponseDtoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TypeAheadResponseDtoList>> TypeAheadNameAndNumberAsyncWithHttpInfo (string searchKeyword);
        /// <summary>
        /// Get search results for the search term
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>Task of SearchContentItemDto</returns>
        System.Threading.Tasks.Task<SearchContentItemDto> TypeAheadSearchAsync (string userId = null, string countryName = null, string searchTerm = null);

        /// <summary>
        /// Get search results for the search term
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>Task of ApiResponse (SearchContentItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchContentItemDto>> TypeAheadSearchAsyncWithHttpInfo (string userId = null, string countryName = null, string searchTerm = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SearchApi : ISearchApi
    {
        private Pki.eBusiness.ErpApi.DataAccess.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Pki.eBusiness.ErpApi.DataAccess.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Pki.eBusiness.ErpApi.DataAccess.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Pki.eBusiness.ErpApi.DataAccess.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get other search details 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>OtherContentItemDto</returns>
        public OtherContentItemDto GetSearchOtherContentResult (string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null, string searchTerm = null)
        {
             ApiResponse<OtherContentItemDto> localVarResponse = GetSearchOtherContentResultWithHttpInfo(userId, countryName, pageSize, sortOption, pageNumber, navState, buyOnline, resourceType, featured, refinment, resultsSize, searchTerm);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get other search details 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>ApiResponse of OtherContentItemDto</returns>
        public ApiResponse< OtherContentItemDto > GetSearchOtherContentResultWithHttpInfo (string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null, string searchTerm = null)
        {

            var localVarPath = "/search/searchContent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (sortOption != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOption", sortOption)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (navState != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "navState", navState)); // query parameter
            if (buyOnline != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "buyOnline", buyOnline)); // query parameter
            if (resourceType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceType", resourceType)); // query parameter
            if (featured != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "featured", featured)); // query parameter
            if (refinment != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "refinment", refinment)); // query parameter
            if (resultsSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "resultsSize", resultsSize)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSearchOtherContentResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OtherContentItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OtherContentItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OtherContentItemDto)));
        }

        /// <summary>
        /// Get other search details 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>Task of OtherContentItemDto</returns>
        public async System.Threading.Tasks.Task<OtherContentItemDto> GetSearchOtherContentResultAsync (string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null, string searchTerm = null)
        {
             ApiResponse<OtherContentItemDto> localVarResponse = await GetSearchOtherContentResultAsyncWithHttpInfo(userId, countryName, pageSize, sortOption, pageNumber, navState, buyOnline, resourceType, featured, refinment, resultsSize, searchTerm);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get other search details 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>Task of ApiResponse (OtherContentItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OtherContentItemDto>> GetSearchOtherContentResultAsyncWithHttpInfo (string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null, string searchTerm = null)
        {

            var localVarPath = "/search/searchContent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (sortOption != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOption", sortOption)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (navState != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "navState", navState)); // query parameter
            if (buyOnline != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "buyOnline", buyOnline)); // query parameter
            if (resourceType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceType", resourceType)); // query parameter
            if (featured != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "featured", featured)); // query parameter
            if (refinment != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "refinment", refinment)); // query parameter
            if (resultsSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "resultsSize", resultsSize)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSearchOtherContentResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OtherContentItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OtherContentItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OtherContentItemDto)));
        }

        /// <summary>
        /// Get search details 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>CategoryContentItemDto</returns>
        public CategoryContentItemDto GetSearchResults (string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null, string searchTerm = null)
        {
             ApiResponse<CategoryContentItemDto> localVarResponse = GetSearchResultsWithHttpInfo(userId, countryName, pageSize, sortOption, pageNumber, navState, buyOnline, resourceType, featured, refinment, resultsSize, searchTerm);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get search details 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>ApiResponse of CategoryContentItemDto</returns>
        public ApiResponse< CategoryContentItemDto > GetSearchResultsWithHttpInfo (string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null, string searchTerm = null)
        {

            var localVarPath = "/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (sortOption != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOption", sortOption)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (navState != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "navState", navState)); // query parameter
            if (buyOnline != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "buyOnline", buyOnline)); // query parameter
            if (resourceType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceType", resourceType)); // query parameter
            if (featured != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "featured", featured)); // query parameter
            if (refinment != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "refinment", refinment)); // query parameter
            if (resultsSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "resultsSize", resultsSize)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSearchResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CategoryContentItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CategoryContentItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryContentItemDto)));
        }

        /// <summary>
        /// Get search details 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>Task of CategoryContentItemDto</returns>
        public async System.Threading.Tasks.Task<CategoryContentItemDto> GetSearchResultsAsync (string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null, string searchTerm = null)
        {
             ApiResponse<CategoryContentItemDto> localVarResponse = await GetSearchResultsAsyncWithHttpInfo(userId, countryName, pageSize, sortOption, pageNumber, navState, buyOnline, resourceType, featured, refinment, resultsSize, searchTerm);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get search details 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>Task of ApiResponse (CategoryContentItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CategoryContentItemDto>> GetSearchResultsAsyncWithHttpInfo (string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null, string searchTerm = null)
        {

            var localVarPath = "/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (sortOption != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOption", sortOption)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (navState != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "navState", navState)); // query parameter
            if (buyOnline != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "buyOnline", buyOnline)); // query parameter
            if (resourceType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceType", resourceType)); // query parameter
            if (featured != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "featured", featured)); // query parameter
            if (refinment != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "refinment", refinment)); // query parameter
            if (resultsSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "resultsSize", resultsSize)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSearchResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CategoryContentItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CategoryContentItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryContentItemDto)));
        }

        /// <summary>
        /// Get search results for the search term 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="resultSize"> (optional)</param>
        /// <returns>SearchTermDto</returns>
        public SearchTermDto PartNumbersTypeAheadSearch (string userId = null, string countryName = null, string searchTerm = null, int? resultSize = null)
        {
             ApiResponse<SearchTermDto> localVarResponse = PartNumbersTypeAheadSearchWithHttpInfo(userId, countryName, searchTerm, resultSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get search results for the search term 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="resultSize"> (optional)</param>
        /// <returns>ApiResponse of SearchTermDto</returns>
        public ApiResponse< SearchTermDto > PartNumbersTypeAheadSearchWithHttpInfo (string userId = null, string countryName = null, string searchTerm = null, int? resultSize = null)
        {

            var localVarPath = "/search/partNumbersTypeAheadSearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter
            if (resultSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "resultSize", resultSize)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartNumbersTypeAheadSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchTermDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchTermDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchTermDto)));
        }

        /// <summary>
        /// Get search results for the search term 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="resultSize"> (optional)</param>
        /// <returns>Task of SearchTermDto</returns>
        public async System.Threading.Tasks.Task<SearchTermDto> PartNumbersTypeAheadSearchAsync (string userId = null, string countryName = null, string searchTerm = null, int? resultSize = null)
        {
             ApiResponse<SearchTermDto> localVarResponse = await PartNumbersTypeAheadSearchAsyncWithHttpInfo(userId, countryName, searchTerm, resultSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get search results for the search term 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <param name="resultSize"> (optional)</param>
        /// <returns>Task of ApiResponse (SearchTermDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchTermDto>> PartNumbersTypeAheadSearchAsyncWithHttpInfo (string userId = null, string countryName = null, string searchTerm = null, int? resultSize = null)
        {

            var localVarPath = "/search/partNumbersTypeAheadSearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter
            if (resultSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "resultSize", resultSize)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartNumbersTypeAheadSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchTermDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchTermDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchTermDto)));
        }

        /// <summary>
        /// Get search results for the search term 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryName"> (optional)</param>
        /// <returns>ResourcesTypeDimensions</returns>
        public ResourcesTypeDimensions ResourcesTypeDimensions (string countryName = null)
        {
             ApiResponse<ResourcesTypeDimensions> localVarResponse = ResourcesTypeDimensionsWithHttpInfo(countryName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get search results for the search term 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryName"> (optional)</param>
        /// <returns>ApiResponse of ResourcesTypeDimensions</returns>
        public ApiResponse< ResourcesTypeDimensions > ResourcesTypeDimensionsWithHttpInfo (string countryName = null)
        {

            var localVarPath = "/search/resourcesTypeDimensions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourcesTypeDimensions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourcesTypeDimensions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourcesTypeDimensions) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourcesTypeDimensions)));
        }

        /// <summary>
        /// Get search results for the search term 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of ResourcesTypeDimensions</returns>
        public async System.Threading.Tasks.Task<ResourcesTypeDimensions> ResourcesTypeDimensionsAsync (string countryName = null)
        {
             ApiResponse<ResourcesTypeDimensions> localVarResponse = await ResourcesTypeDimensionsAsyncWithHttpInfo(countryName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get search results for the search term 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of ApiResponse (ResourcesTypeDimensions)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourcesTypeDimensions>> ResourcesTypeDimensionsAsyncWithHttpInfo (string countryName = null)
        {

            var localVarPath = "/search/resourcesTypeDimensions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResourcesTypeDimensions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourcesTypeDimensions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourcesTypeDimensions) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourcesTypeDimensions)));
        }

        /// <summary>
        /// Get search results for the search term 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm"></param>
        /// <returns>SearchTermDto</returns>
        public SearchTermDto TermsAndConditionsTypeAhead (string searchTerm)
        {
             ApiResponse<SearchTermDto> localVarResponse = TermsAndConditionsTypeAheadWithHttpInfo(searchTerm);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get search results for the search term 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm"></param>
        /// <returns>ApiResponse of SearchTermDto</returns>
        public ApiResponse< SearchTermDto > TermsAndConditionsTypeAheadWithHttpInfo (string searchTerm)
        {
            // verify the required parameter 'searchTerm' is set
            if (searchTerm == null)
                throw new ApiException(400, "Missing required parameter 'searchTerm' when calling SearchApi->TermsAndConditionsTypeAhead");

            var localVarPath = "/search/termsAndConditionsTypeAhead/{searchTerm}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchTerm != null) localVarPathParams.Add("searchTerm", Configuration.ApiClient.ParameterToString(searchTerm)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TermsAndConditionsTypeAhead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchTermDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchTermDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchTermDto)));
        }

        /// <summary>
        /// Get search results for the search term 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm"></param>
        /// <returns>Task of SearchTermDto</returns>
        public async System.Threading.Tasks.Task<SearchTermDto> TermsAndConditionsTypeAheadAsync (string searchTerm)
        {
             ApiResponse<SearchTermDto> localVarResponse = await TermsAndConditionsTypeAheadAsyncWithHttpInfo(searchTerm);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get search results for the search term 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm"></param>
        /// <returns>Task of ApiResponse (SearchTermDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchTermDto>> TermsAndConditionsTypeAheadAsyncWithHttpInfo (string searchTerm)
        {
            // verify the required parameter 'searchTerm' is set
            if (searchTerm == null)
                throw new ApiException(400, "Missing required parameter 'searchTerm' when calling SearchApi->TermsAndConditionsTypeAhead");

            var localVarPath = "/search/termsAndConditionsTypeAhead/{searchTerm}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchTerm != null) localVarPathParams.Add("searchTerm", Configuration.ApiClient.ParameterToString(searchTerm)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TermsAndConditionsTypeAhead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchTermDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchTermDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchTermDto)));
        }

        /// <summary>
        /// Get search results for the keyword 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchKeyword"></param>
        /// <returns>TypeAheadResponseDtoList</returns>
        public TypeAheadResponseDtoList TypeAheadNameAndNumber (string searchKeyword)
        {
             ApiResponse<TypeAheadResponseDtoList> localVarResponse = TypeAheadNameAndNumberWithHttpInfo(searchKeyword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get search results for the keyword 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchKeyword"></param>
        /// <returns>ApiResponse of TypeAheadResponseDtoList</returns>
        public ApiResponse< TypeAheadResponseDtoList > TypeAheadNameAndNumberWithHttpInfo (string searchKeyword)
        {
            // verify the required parameter 'searchKeyword' is set
            if (searchKeyword == null)
                throw new ApiException(400, "Missing required parameter 'searchKeyword' when calling SearchApi->TypeAheadNameAndNumber");

            var localVarPath = "/search/typeAheadNameAndNumber/{searchKeyword}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchKeyword != null) localVarPathParams.Add("searchKeyword", Configuration.ApiClient.ParameterToString(searchKeyword)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TypeAheadNameAndNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TypeAheadResponseDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TypeAheadResponseDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TypeAheadResponseDtoList)));
        }

        /// <summary>
        /// Get search results for the keyword 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchKeyword"></param>
        /// <returns>Task of TypeAheadResponseDtoList</returns>
        public async System.Threading.Tasks.Task<TypeAheadResponseDtoList> TypeAheadNameAndNumberAsync (string searchKeyword)
        {
             ApiResponse<TypeAheadResponseDtoList> localVarResponse = await TypeAheadNameAndNumberAsyncWithHttpInfo(searchKeyword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get search results for the keyword 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchKeyword"></param>
        /// <returns>Task of ApiResponse (TypeAheadResponseDtoList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TypeAheadResponseDtoList>> TypeAheadNameAndNumberAsyncWithHttpInfo (string searchKeyword)
        {
            // verify the required parameter 'searchKeyword' is set
            if (searchKeyword == null)
                throw new ApiException(400, "Missing required parameter 'searchKeyword' when calling SearchApi->TypeAheadNameAndNumber");

            var localVarPath = "/search/typeAheadNameAndNumber/{searchKeyword}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchKeyword != null) localVarPathParams.Add("searchKeyword", Configuration.ApiClient.ParameterToString(searchKeyword)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TypeAheadNameAndNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TypeAheadResponseDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TypeAheadResponseDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TypeAheadResponseDtoList)));
        }

        /// <summary>
        /// Get search results for the search term 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>SearchContentItemDto</returns>
        public SearchContentItemDto TypeAheadSearch (string userId = null, string countryName = null, string searchTerm = null)
        {
             ApiResponse<SearchContentItemDto> localVarResponse = TypeAheadSearchWithHttpInfo(userId, countryName, searchTerm);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get search results for the search term 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>ApiResponse of SearchContentItemDto</returns>
        public ApiResponse< SearchContentItemDto > TypeAheadSearchWithHttpInfo (string userId = null, string countryName = null, string searchTerm = null)
        {

            var localVarPath = "/search/typeAheadSearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TypeAheadSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchContentItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchContentItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchContentItemDto)));
        }

        /// <summary>
        /// Get search results for the search term 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>Task of SearchContentItemDto</returns>
        public async System.Threading.Tasks.Task<SearchContentItemDto> TypeAheadSearchAsync (string userId = null, string countryName = null, string searchTerm = null)
        {
             ApiResponse<SearchContentItemDto> localVarResponse = await TypeAheadSearchAsyncWithHttpInfo(userId, countryName, searchTerm);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get search results for the search term 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="searchTerm"> (optional)</param>
        /// <returns>Task of ApiResponse (SearchContentItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchContentItemDto>> TypeAheadSearchAsyncWithHttpInfo (string userId = null, string countryName = null, string searchTerm = null)
        {

            var localVarPath = "/search/typeAheadSearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter
            if (searchTerm != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "searchTerm", searchTerm)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TypeAheadSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchContentItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchContentItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchContentItemDto)));
        }

    }
}
