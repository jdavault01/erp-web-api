/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Pki.eBusiness.ErpApi.DataAccess.Client;
using Pki.eBusiness.ErpApi.DataAccess.Model;

namespace Pki.eBusiness.ErpApi.DataAccess.AtgApi
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICartApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add item to cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>AddToCartUserCartCountDto</returns>
        AddToCartUserCartCountDto AddToCart (string userId, AddToCartRequestDto body = null);

        /// <summary>
        /// Add item to cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AddToCartUserCartCountDto</returns>
        ApiResponse<AddToCartUserCartCountDto> AddToCartWithHttpInfo (string userId, AddToCartRequestDto body = null);
        /// <summary>
        /// Retrieve the current lineItems from the cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="miniCart"> (optional)</param>
        /// <param name="checkOut"> (optional, default to false)</param>
        /// <returns>CartDto</returns>
        CartDto GetCart (string userId, bool? miniCart = null, bool? checkOut = null);

        /// <summary>
        /// Retrieve the current lineItems from the cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="miniCart"> (optional)</param>
        /// <param name="checkOut"> (optional, default to false)</param>
        /// <returns>ApiResponse of CartDto</returns>
        ApiResponse<CartDto> GetCartWithHttpInfo (string userId, bool? miniCart = null, bool? checkOut = null);
        /// <summary>
        /// Get mini Cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>MiniCartDto</returns>
        MiniCartDto MiniCart (string userId);

        /// <summary>
        /// Get mini Cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of MiniCartDto</returns>
        ApiResponse<MiniCartDto> MiniCartWithHttpInfo (string userId);
        /// <summary>
        /// delete the specific Items from the cart or empty the entire Cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="lineItemId"> (optional)</param>
        /// <param name="shipmentDate"> (optional)</param>
        /// <returns>CartDto</returns>
        CartDto RemoveCart (string userId, string lineItemId = null, string shipmentDate = null);

        /// <summary>
        /// delete the specific Items from the cart or empty the entire Cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="lineItemId"> (optional)</param>
        /// <param name="shipmentDate"> (optional)</param>
        /// <returns>ApiResponse of CartDto</returns>
        ApiResponse<CartDto> RemoveCartWithHttpInfo (string userId, string lineItemId = null, string shipmentDate = null);
        /// <summary>
        /// Replace the current lineItems in the cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="replacement"> (optional)</param>
        /// <returns>CartDto</returns>
        CartDto ReplaceCart (string userId, bool? replacement = null);

        /// <summary>
        /// Replace the current lineItems in the cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="replacement"> (optional)</param>
        /// <returns>ApiResponse of CartDto</returns>
        ApiResponse<CartDto> ReplaceCartWithHttpInfo (string userId, bool? replacement = null);
        /// <summary>
        /// Updates the Item Quantity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>CartDto</returns>
        CartDto UpdateCart (string userId, UpdateCartRequestDto body = null);

        /// <summary>
        /// Updates the Item Quantity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CartDto</returns>
        ApiResponse<CartDto> UpdateCartWithHttpInfo (string userId, UpdateCartRequestDto body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add item to cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AddToCartUserCartCountDto</returns>
        System.Threading.Tasks.Task<AddToCartUserCartCountDto> AddToCartAsync (string userId, AddToCartRequestDto body = null);

        /// <summary>
        /// Add item to cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AddToCartUserCartCountDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddToCartUserCartCountDto>> AddToCartAsyncWithHttpInfo (string userId, AddToCartRequestDto body = null);
        /// <summary>
        /// Retrieve the current lineItems from the cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="miniCart"> (optional)</param>
        /// <param name="checkOut"> (optional, default to false)</param>
        /// <returns>Task of CartDto</returns>
        System.Threading.Tasks.Task<CartDto> GetCartAsync (string userId, bool? miniCart = null, bool? checkOut = null);

        /// <summary>
        /// Retrieve the current lineItems from the cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="miniCart"> (optional)</param>
        /// <param name="checkOut"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (CartDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartDto>> GetCartAsyncWithHttpInfo (string userId, bool? miniCart = null, bool? checkOut = null);
        /// <summary>
        /// Get mini Cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of MiniCartDto</returns>
        System.Threading.Tasks.Task<MiniCartDto> MiniCartAsync (string userId);

        /// <summary>
        /// Get mini Cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (MiniCartDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<MiniCartDto>> MiniCartAsyncWithHttpInfo (string userId);
        /// <summary>
        /// delete the specific Items from the cart or empty the entire Cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="lineItemId"> (optional)</param>
        /// <param name="shipmentDate"> (optional)</param>
        /// <returns>Task of CartDto</returns>
        System.Threading.Tasks.Task<CartDto> RemoveCartAsync (string userId, string lineItemId = null, string shipmentDate = null);

        /// <summary>
        /// delete the specific Items from the cart or empty the entire Cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="lineItemId"> (optional)</param>
        /// <param name="shipmentDate"> (optional)</param>
        /// <returns>Task of ApiResponse (CartDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartDto>> RemoveCartAsyncWithHttpInfo (string userId, string lineItemId = null, string shipmentDate = null);
        /// <summary>
        /// Replace the current lineItems in the cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="replacement"> (optional)</param>
        /// <returns>Task of CartDto</returns>
        System.Threading.Tasks.Task<CartDto> ReplaceCartAsync (string userId, bool? replacement = null);

        /// <summary>
        /// Replace the current lineItems in the cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="replacement"> (optional)</param>
        /// <returns>Task of ApiResponse (CartDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartDto>> ReplaceCartAsyncWithHttpInfo (string userId, bool? replacement = null);
        /// <summary>
        /// Updates the Item Quantity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CartDto</returns>
        System.Threading.Tasks.Task<CartDto> UpdateCartAsync (string userId, UpdateCartRequestDto body = null);

        /// <summary>
        /// Updates the Item Quantity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CartDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartDto>> UpdateCartAsyncWithHttpInfo (string userId, UpdateCartRequestDto body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CartApi : ICartApi
    {
        private Pki.eBusiness.ErpApi.DataAccess.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CartApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CartApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Pki.eBusiness.ErpApi.DataAccess.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CartApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CartApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Pki.eBusiness.ErpApi.DataAccess.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Pki.eBusiness.ErpApi.DataAccess.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add item to cart. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>AddToCartUserCartCountDto</returns>
        public AddToCartUserCartCountDto AddToCart (string userId, AddToCartRequestDto body = null)
        {
             ApiResponse<AddToCartUserCartCountDto> localVarResponse = AddToCartWithHttpInfo(userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add item to cart. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AddToCartUserCartCountDto</returns>
        public ApiResponse< AddToCartUserCartCountDto > AddToCartWithHttpInfo (string userId, AddToCartRequestDto body = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CartApi->AddToCart");

            var localVarPath = "/cart/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddToCart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddToCartUserCartCountDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddToCartUserCartCountDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddToCartUserCartCountDto)));
        }

        /// <summary>
        /// Add item to cart. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AddToCartUserCartCountDto</returns>
        public async System.Threading.Tasks.Task<AddToCartUserCartCountDto> AddToCartAsync (string userId, AddToCartRequestDto body = null)
        {
             ApiResponse<AddToCartUserCartCountDto> localVarResponse = await AddToCartAsyncWithHttpInfo(userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add item to cart. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AddToCartUserCartCountDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddToCartUserCartCountDto>> AddToCartAsyncWithHttpInfo (string userId, AddToCartRequestDto body = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CartApi->AddToCart");

            var localVarPath = "/cart/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddToCart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddToCartUserCartCountDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddToCartUserCartCountDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddToCartUserCartCountDto)));
        }

        /// <summary>
        /// Retrieve the current lineItems from the cart. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="miniCart"> (optional)</param>
        /// <param name="checkOut"> (optional, default to false)</param>
        /// <returns>CartDto</returns>
        public CartDto GetCart (string userId, bool? miniCart = null, bool? checkOut = null)
        {
             ApiResponse<CartDto> localVarResponse = GetCartWithHttpInfo(userId, miniCart, checkOut);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the current lineItems from the cart. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="miniCart"> (optional)</param>
        /// <param name="checkOut"> (optional, default to false)</param>
        /// <returns>ApiResponse of CartDto</returns>
        public ApiResponse< CartDto > GetCartWithHttpInfo (string userId, bool? miniCart = null, bool? checkOut = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CartApi->GetCart");

            var localVarPath = "/cart/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (miniCart != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "miniCart", miniCart)); // query parameter
            if (checkOut != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "checkOut", checkOut)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartDto)));
        }

        /// <summary>
        /// Retrieve the current lineItems from the cart. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="miniCart"> (optional)</param>
        /// <param name="checkOut"> (optional, default to false)</param>
        /// <returns>Task of CartDto</returns>
        public async System.Threading.Tasks.Task<CartDto> GetCartAsync (string userId, bool? miniCart = null, bool? checkOut = null)
        {
             ApiResponse<CartDto> localVarResponse = await GetCartAsyncWithHttpInfo(userId, miniCart, checkOut);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the current lineItems from the cart. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="miniCart"> (optional)</param>
        /// <param name="checkOut"> (optional, default to false)</param>
        /// <returns>Task of ApiResponse (CartDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CartDto>> GetCartAsyncWithHttpInfo (string userId, bool? miniCart = null, bool? checkOut = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CartApi->GetCart");

            var localVarPath = "/cart/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (miniCart != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "miniCart", miniCart)); // query parameter
            if (checkOut != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "checkOut", checkOut)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartDto)));
        }

        /// <summary>
        /// Get mini Cart. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>MiniCartDto</returns>
        public MiniCartDto MiniCart (string userId)
        {
             ApiResponse<MiniCartDto> localVarResponse = MiniCartWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get mini Cart. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of MiniCartDto</returns>
        public ApiResponse< MiniCartDto > MiniCartWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CartApi->MiniCart");

            var localVarPath = "/cart/miniCart/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MiniCart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MiniCartDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MiniCartDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MiniCartDto)));
        }

        /// <summary>
        /// Get mini Cart. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of MiniCartDto</returns>
        public async System.Threading.Tasks.Task<MiniCartDto> MiniCartAsync (string userId)
        {
             ApiResponse<MiniCartDto> localVarResponse = await MiniCartAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get mini Cart. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (MiniCartDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MiniCartDto>> MiniCartAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CartApi->MiniCart");

            var localVarPath = "/cart/miniCart/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MiniCart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MiniCartDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MiniCartDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MiniCartDto)));
        }

        /// <summary>
        /// delete the specific Items from the cart or empty the entire Cart. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="lineItemId"> (optional)</param>
        /// <param name="shipmentDate"> (optional)</param>
        /// <returns>CartDto</returns>
        public CartDto RemoveCart (string userId, string lineItemId = null, string shipmentDate = null)
        {
             ApiResponse<CartDto> localVarResponse = RemoveCartWithHttpInfo(userId, lineItemId, shipmentDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// delete the specific Items from the cart or empty the entire Cart. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="lineItemId"> (optional)</param>
        /// <param name="shipmentDate"> (optional)</param>
        /// <returns>ApiResponse of CartDto</returns>
        public ApiResponse< CartDto > RemoveCartWithHttpInfo (string userId, string lineItemId = null, string shipmentDate = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CartApi->RemoveCart");

            var localVarPath = "/cart/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (lineItemId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lineItemId", lineItemId)); // query parameter
            if (shipmentDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "shipmentDate", shipmentDate)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveCart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartDto)));
        }

        /// <summary>
        /// delete the specific Items from the cart or empty the entire Cart. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="lineItemId"> (optional)</param>
        /// <param name="shipmentDate"> (optional)</param>
        /// <returns>Task of CartDto</returns>
        public async System.Threading.Tasks.Task<CartDto> RemoveCartAsync (string userId, string lineItemId = null, string shipmentDate = null)
        {
             ApiResponse<CartDto> localVarResponse = await RemoveCartAsyncWithHttpInfo(userId, lineItemId, shipmentDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// delete the specific Items from the cart or empty the entire Cart. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="lineItemId"> (optional)</param>
        /// <param name="shipmentDate"> (optional)</param>
        /// <returns>Task of ApiResponse (CartDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CartDto>> RemoveCartAsyncWithHttpInfo (string userId, string lineItemId = null, string shipmentDate = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CartApi->RemoveCart");

            var localVarPath = "/cart/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (lineItemId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lineItemId", lineItemId)); // query parameter
            if (shipmentDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "shipmentDate", shipmentDate)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveCart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartDto)));
        }

        /// <summary>
        /// Replace the current lineItems in the cart. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="replacement"> (optional)</param>
        /// <returns>CartDto</returns>
        public CartDto ReplaceCart (string userId, bool? replacement = null)
        {
             ApiResponse<CartDto> localVarResponse = ReplaceCartWithHttpInfo(userId, replacement);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace the current lineItems in the cart. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="replacement"> (optional)</param>
        /// <returns>ApiResponse of CartDto</returns>
        public ApiResponse< CartDto > ReplaceCartWithHttpInfo (string userId, bool? replacement = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CartApi->ReplaceCart");

            var localVarPath = "/cart/replace/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (replacement != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "replacement", replacement)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceCart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartDto)));
        }

        /// <summary>
        /// Replace the current lineItems in the cart. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="replacement"> (optional)</param>
        /// <returns>Task of CartDto</returns>
        public async System.Threading.Tasks.Task<CartDto> ReplaceCartAsync (string userId, bool? replacement = null)
        {
             ApiResponse<CartDto> localVarResponse = await ReplaceCartAsyncWithHttpInfo(userId, replacement);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace the current lineItems in the cart. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="replacement"> (optional)</param>
        /// <returns>Task of ApiResponse (CartDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CartDto>> ReplaceCartAsyncWithHttpInfo (string userId, bool? replacement = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CartApi->ReplaceCart");

            var localVarPath = "/cart/replace/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (replacement != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "replacement", replacement)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceCart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartDto)));
        }

        /// <summary>
        /// Updates the Item Quantity. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>CartDto</returns>
        public CartDto UpdateCart (string userId, UpdateCartRequestDto body = null)
        {
             ApiResponse<CartDto> localVarResponse = UpdateCartWithHttpInfo(userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the Item Quantity. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of CartDto</returns>
        public ApiResponse< CartDto > UpdateCartWithHttpInfo (string userId, UpdateCartRequestDto body = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CartApi->UpdateCart");

            var localVarPath = "/cart/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartDto)));
        }

        /// <summary>
        /// Updates the Item Quantity. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of CartDto</returns>
        public async System.Threading.Tasks.Task<CartDto> UpdateCartAsync (string userId, UpdateCartRequestDto body = null)
        {
             ApiResponse<CartDto> localVarResponse = await UpdateCartAsyncWithHttpInfo(userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the Item Quantity. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (CartDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CartDto>> UpdateCartAsyncWithHttpInfo (string userId, UpdateCartRequestDto body = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling CartApi->UpdateCart");

            var localVarPath = "/cart/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCart", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CartDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CartDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CartDto)));
        }

    }
}
