/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Pki.eBusiness.ErpApi.DataAccess.Client;
using Pki.eBusiness.ErpApi.DataAccess.Model;

namespace Pki.eBusiness.ErpApi.DataAccess.AtgApi
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInventoryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves delivery Instructructions for given shippingPoint &amp; Country.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shippingPoint"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>DeliveryInsDto</returns>
        DeliveryInsDto GetDeliveryInstructructions (string shippingPoint = null, string countryName = null);

        /// <summary>
        /// Retrieves delivery Instructructions for given shippingPoint &amp; Country.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shippingPoint"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>ApiResponse of DeliveryInsDto</returns>
        ApiResponse<DeliveryInsDto> GetDeliveryInstructructionsWithHttpInfo (string shippingPoint = null, string countryName = null);
        /// <summary>
        /// Retrieve Fresh Lot Dates for given partNumber.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partNumber"></param>
        /// <returns>FreshLotDates</returns>
        FreshLotDates GetFreshLotDates (string partNumber);

        /// <summary>
        /// Retrieve Fresh Lot Dates for given partNumber.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partNumber"></param>
        /// <returns>ApiResponse of FreshLotDates</returns>
        ApiResponse<FreshLotDates> GetFreshLotDatesWithHttpInfo (string partNumber);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves delivery Instructructions for given shippingPoint &amp; Country.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shippingPoint"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of DeliveryInsDto</returns>
        System.Threading.Tasks.Task<DeliveryInsDto> GetDeliveryInstructructionsAsync (string shippingPoint = null, string countryName = null);

        /// <summary>
        /// Retrieves delivery Instructructions for given shippingPoint &amp; Country.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shippingPoint"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of ApiResponse (DeliveryInsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeliveryInsDto>> GetDeliveryInstructructionsAsyncWithHttpInfo (string shippingPoint = null, string countryName = null);
        /// <summary>
        /// Retrieve Fresh Lot Dates for given partNumber.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partNumber"></param>
        /// <returns>Task of FreshLotDates</returns>
        System.Threading.Tasks.Task<FreshLotDates> GetFreshLotDatesAsync (string partNumber);

        /// <summary>
        /// Retrieve Fresh Lot Dates for given partNumber.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partNumber"></param>
        /// <returns>Task of ApiResponse (FreshLotDates)</returns>
        System.Threading.Tasks.Task<ApiResponse<FreshLotDates>> GetFreshLotDatesAsyncWithHttpInfo (string partNumber);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InventoryApi : IInventoryApi
    {
        private Pki.eBusiness.ErpApi.DataAccess.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InventoryApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Pki.eBusiness.ErpApi.DataAccess.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InventoryApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Pki.eBusiness.ErpApi.DataAccess.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Pki.eBusiness.ErpApi.DataAccess.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieves delivery Instructructions for given shippingPoint &amp; Country. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shippingPoint"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>DeliveryInsDto</returns>
        public DeliveryInsDto GetDeliveryInstructructions (string shippingPoint = null, string countryName = null)
        {
             ApiResponse<DeliveryInsDto> localVarResponse = GetDeliveryInstructructionsWithHttpInfo(shippingPoint, countryName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves delivery Instructructions for given shippingPoint &amp; Country. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shippingPoint"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>ApiResponse of DeliveryInsDto</returns>
        public ApiResponse< DeliveryInsDto > GetDeliveryInstructructionsWithHttpInfo (string shippingPoint = null, string countryName = null)
        {

            var localVarPath = "/inventory/deliveryInstructructions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shippingPoint != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "shippingPoint", shippingPoint)); // query parameter
            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeliveryInstructructions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeliveryInsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeliveryInsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeliveryInsDto)));
        }

        /// <summary>
        /// Retrieves delivery Instructructions for given shippingPoint &amp; Country. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shippingPoint"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of DeliveryInsDto</returns>
        public async System.Threading.Tasks.Task<DeliveryInsDto> GetDeliveryInstructructionsAsync (string shippingPoint = null, string countryName = null)
        {
             ApiResponse<DeliveryInsDto> localVarResponse = await GetDeliveryInstructructionsAsyncWithHttpInfo(shippingPoint, countryName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves delivery Instructructions for given shippingPoint &amp; Country. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shippingPoint"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of ApiResponse (DeliveryInsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeliveryInsDto>> GetDeliveryInstructructionsAsyncWithHttpInfo (string shippingPoint = null, string countryName = null)
        {

            var localVarPath = "/inventory/deliveryInstructructions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shippingPoint != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "shippingPoint", shippingPoint)); // query parameter
            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeliveryInstructructions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeliveryInsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeliveryInsDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeliveryInsDto)));
        }

        /// <summary>
        /// Retrieve Fresh Lot Dates for given partNumber. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partNumber"></param>
        /// <returns>FreshLotDates</returns>
        public FreshLotDates GetFreshLotDates (string partNumber)
        {
             ApiResponse<FreshLotDates> localVarResponse = GetFreshLotDatesWithHttpInfo(partNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Fresh Lot Dates for given partNumber. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partNumber"></param>
        /// <returns>ApiResponse of FreshLotDates</returns>
        public ApiResponse< FreshLotDates > GetFreshLotDatesWithHttpInfo (string partNumber)
        {
            // verify the required parameter 'partNumber' is set
            if (partNumber == null)
                throw new ApiException(400, "Missing required parameter 'partNumber' when calling InventoryApi->GetFreshLotDates");

            var localVarPath = "/inventory/freshlotdates/{partNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (partNumber != null) localVarPathParams.Add("partNumber", Configuration.ApiClient.ParameterToString(partNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFreshLotDates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FreshLotDates>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FreshLotDates) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FreshLotDates)));
        }

        /// <summary>
        /// Retrieve Fresh Lot Dates for given partNumber. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partNumber"></param>
        /// <returns>Task of FreshLotDates</returns>
        public async System.Threading.Tasks.Task<FreshLotDates> GetFreshLotDatesAsync (string partNumber)
        {
             ApiResponse<FreshLotDates> localVarResponse = await GetFreshLotDatesAsyncWithHttpInfo(partNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Fresh Lot Dates for given partNumber. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partNumber"></param>
        /// <returns>Task of ApiResponse (FreshLotDates)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FreshLotDates>> GetFreshLotDatesAsyncWithHttpInfo (string partNumber)
        {
            // verify the required parameter 'partNumber' is set
            if (partNumber == null)
                throw new ApiException(400, "Missing required parameter 'partNumber' when calling InventoryApi->GetFreshLotDates");

            var localVarPath = "/inventory/freshlotdates/{partNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (partNumber != null) localVarPathParams.Add("partNumber", Configuration.ApiClient.ParameterToString(partNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFreshLotDates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FreshLotDates>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FreshLotDates) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FreshLotDates)));
        }

    }
}
