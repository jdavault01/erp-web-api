/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Pki.eBusiness.ErpApi.DataAccess.Client;
using Pki.eBusiness.ErpApi.DataAccess.Model;

namespace Pki.eBusiness.ErpApi.DataAccess.AtgApi
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Approve the given order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="orderId"></param>
        /// <returns>OrderHistoryDtoList</returns>
        OrderHistoryDtoList ApproveOrder (string userId, string orderId);

        /// <summary>
        /// Approve the given order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="orderId"></param>
        /// <returns>ApiResponse of OrderHistoryDtoList</returns>
        ApiResponse<OrderHistoryDtoList> ApproveOrderWithHttpInfo (string userId, string orderId);
        /// <summary>
        /// PunchOut Order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderMessageDto</returns>
        OrderMessageDto Checkout (string userId, PunchoutOrderRequestDto body = null);

        /// <summary>
        /// PunchOut Order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderMessageDto</returns>
        ApiResponse<OrderMessageDto> CheckoutWithHttpInfo (string userId, PunchoutOrderRequestDto body = null);
        /// <summary>
        /// Place an order based on the current cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderDto</returns>
        OrderDto Create (string userId, BasicOrderDto body = null);

        /// <summary>
        /// Place an order based on the current cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderDto</returns>
        ApiResponse<OrderDto> CreateWithHttpInfo (string userId, BasicOrderDto body = null);
        /// <summary>
        /// Returns pending order Count.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>PendingOrderCountDto</returns>
        PendingOrderCountDto GetCount (string userId);

        /// <summary>
        /// Returns pending order Count.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of PendingOrderCountDto</returns>
        ApiResponse<PendingOrderCountDto> GetCountWithHttpInfo (string userId);
        /// <summary>
        /// Order Details with WebOrder or ERPOrderNumber .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <returns>OrderDto</returns>
        OrderDto GetOrder (string orderId);

        /// <summary>
        /// Order Details with WebOrder or ERPOrderNumber .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <returns>ApiResponse of OrderDto</returns>
        ApiResponse<OrderDto> GetOrderWithHttpInfo (string orderId);
        /// <summary>
        /// Order Details with WebOrder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <returns>OrderDto</returns>
        OrderDto GetOrderDetails (string orderId);

        /// <summary>
        /// Order Details with WebOrder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <returns>ApiResponse of OrderDto</returns>
        ApiResponse<OrderDto> GetOrderDetailsWithHttpInfo (string orderId);
        /// <summary>
        /// Get order states.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DisplayContentDtoList</returns>
        DisplayContentDtoList GetOrderStates ();

        /// <summary>
        /// Get order states.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DisplayContentDtoList</returns>
        ApiResponse<DisplayContentDtoList> GetOrderStatesWithHttpInfo ();
        /// <summary>
        /// Get order types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DisplayContentDtoList</returns>
        DisplayContentDtoList GetOrderTypes ();

        /// <summary>
        /// Get order types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DisplayContentDtoList</returns>
        ApiResponse<DisplayContentDtoList> GetOrderTypesWithHttpInfo ();
        /// <summary>
        /// Order History.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>OrderHistoryDtoList</returns>
        OrderHistoryDtoList GetOrders (string userId);

        /// <summary>
        /// Order History.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of OrderHistoryDtoList</returns>
        ApiResponse<OrderHistoryDtoList> GetOrdersWithHttpInfo (string userId);
        /// <summary>
        /// Pending Orders for Approvals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>OrderHistoryDtoList</returns>
        OrderHistoryDtoList GetPendingOrders (string userId);

        /// <summary>
        /// Pending Orders for Approvals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of OrderHistoryDtoList</returns>
        ApiResponse<OrderHistoryDtoList> GetPendingOrdersWithHttpInfo (string userId);
        /// <summary>
        /// Get Orders by filter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderHistoryDtoList</returns>
        OrderHistoryDtoList GetSearchOrders (OrderSearchDto body = null);

        /// <summary>
        /// Get Orders by filter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderHistoryDtoList</returns>
        ApiResponse<OrderHistoryDtoList> GetSearchOrdersWithHttpInfo (OrderSearchDto body = null);
        /// <summary>
        /// Po Valid.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="po"> (optional)</param>
        /// <returns>POValidDto</returns>
        POValidDto IsPOValid (string po = null);

        /// <summary>
        /// Po Valid.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="po"> (optional)</param>
        /// <returns>ApiResponse of POValidDto</returns>
        ApiResponse<POValidDto> IsPOValidWithHttpInfo (string po = null);
        /// <summary>
        /// PunchOut Order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>OrderCountDto</returns>
        OrderCountDto OrderCount (string userId);

        /// <summary>
        /// PunchOut Order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of OrderCountDto</returns>
        ApiResponse<OrderCountDto> OrderCountWithHttpInfo (string userId);
        /// <summary>
        /// Reject the given order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="orderId"></param>
        /// <returns>OrderHistoryDtoList</returns>
        OrderHistoryDtoList RejectOrder (string userId, string orderId);

        /// <summary>
        /// Reject the given order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="orderId"></param>
        /// <returns>ApiResponse of OrderHistoryDtoList</returns>
        ApiResponse<OrderHistoryDtoList> RejectOrderWithHttpInfo (string userId, string orderId);
        /// <summary>
        /// Search for Non web orders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber"></param>
        /// <returns>OrderDto</returns>
        OrderDto SearchOrder (string orderNumber);

        /// <summary>
        /// Search for Non web orders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber"></param>
        /// <returns>ApiResponse of OrderDto</returns>
        ApiResponse<OrderDto> SearchOrderWithHttpInfo (string orderNumber);
        /// <summary>
        /// Send shipping notifications.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ShippingNotificationOrderDto</returns>
        String SendShippingNotifications (ShippingNotificationOrderDto body = null);

        /// <summary>
        /// Send shipping notifications.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ShippingNotificationOrderDto</returns>
        //ApiResponse<ShippingNotificationOrderDto> SendShippingNotificationsWithHttpInfo (ShippingNotificationOrderDto body = null);
        ApiResponse<string> SendShippingNotificationsWithHttpInfo (ShippingNotificationOrderDto body = null);
        /// <summary>
        /// Update erpOrdernumber to the given web order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderNumberDto</returns>
        OrderNumberDto UpdateErpOrderNumber (OrderNumberDto body = null);

        /// <summary>
        /// Update erpOrdernumber to the given web order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderNumberDto</returns>
        ApiResponse<OrderNumberDto> UpdateErpOrderNumberWithHttpInfo (OrderNumberDto body = null);
        /// <summary>
        /// Update order status to the given web order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateOrderStatus (OrderStatusDto body = null);

        /// <summary>
        /// Update order status to the given web order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateOrderStatusWithHttpInfo (OrderStatusDto body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Approve the given order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="orderId"></param>
        /// <returns>Task of OrderHistoryDtoList</returns>
        System.Threading.Tasks.Task<OrderHistoryDtoList> ApproveOrderAsync (string userId, string orderId);

        /// <summary>
        /// Approve the given order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="orderId"></param>
        /// <returns>Task of ApiResponse (OrderHistoryDtoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderHistoryDtoList>> ApproveOrderAsyncWithHttpInfo (string userId, string orderId);
        /// <summary>
        /// PunchOut Order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of OrderMessageDto</returns>
        System.Threading.Tasks.Task<OrderMessageDto> CheckoutAsync (string userId, PunchoutOrderRequestDto body = null);

        /// <summary>
        /// PunchOut Order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (OrderMessageDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderMessageDto>> CheckoutAsyncWithHttpInfo (string userId, PunchoutOrderRequestDto body = null);
        /// <summary>
        /// Place an order based on the current cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of OrderDto</returns>
        System.Threading.Tasks.Task<OrderDto> CreateAsync (string userId, BasicOrderDto body = null);

        /// <summary>
        /// Place an order based on the current cart.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (OrderDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderDto>> CreateAsyncWithHttpInfo (string userId, BasicOrderDto body = null);
        /// <summary>
        /// Returns pending order Count.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of PendingOrderCountDto</returns>
        System.Threading.Tasks.Task<PendingOrderCountDto> GetCountAsync (string userId);

        /// <summary>
        /// Returns pending order Count.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (PendingOrderCountDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PendingOrderCountDto>> GetCountAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Order Details with WebOrder or ERPOrderNumber .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <returns>Task of OrderDto</returns>
        System.Threading.Tasks.Task<OrderDto> GetOrderAsync (string orderId);

        /// <summary>
        /// Order Details with WebOrder or ERPOrderNumber .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <returns>Task of ApiResponse (OrderDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderDto>> GetOrderAsyncWithHttpInfo (string orderId);
        /// <summary>
        /// Order Details with WebOrder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <returns>Task of OrderDto</returns>
        System.Threading.Tasks.Task<OrderDto> GetOrderDetailsAsync (string orderId);

        /// <summary>
        /// Order Details with WebOrder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <returns>Task of ApiResponse (OrderDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderDto>> GetOrderDetailsAsyncWithHttpInfo (string orderId);
        /// <summary>
        /// Get order states.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DisplayContentDtoList</returns>
        System.Threading.Tasks.Task<DisplayContentDtoList> GetOrderStatesAsync ();

        /// <summary>
        /// Get order states.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DisplayContentDtoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<DisplayContentDtoList>> GetOrderStatesAsyncWithHttpInfo ();
        /// <summary>
        /// Get order types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DisplayContentDtoList</returns>
        System.Threading.Tasks.Task<DisplayContentDtoList> GetOrderTypesAsync ();

        /// <summary>
        /// Get order types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DisplayContentDtoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<DisplayContentDtoList>> GetOrderTypesAsyncWithHttpInfo ();
        /// <summary>
        /// Order History.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of OrderHistoryDtoList</returns>
        System.Threading.Tasks.Task<OrderHistoryDtoList> GetOrdersAsync (string userId);

        /// <summary>
        /// Order History.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (OrderHistoryDtoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderHistoryDtoList>> GetOrdersAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Pending Orders for Approvals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of OrderHistoryDtoList</returns>
        System.Threading.Tasks.Task<OrderHistoryDtoList> GetPendingOrdersAsync (string userId);

        /// <summary>
        /// Pending Orders for Approvals.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (OrderHistoryDtoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderHistoryDtoList>> GetPendingOrdersAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Get Orders by filter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of OrderHistoryDtoList</returns>
        System.Threading.Tasks.Task<OrderHistoryDtoList> GetSearchOrdersAsync (OrderSearchDto body = null);

        /// <summary>
        /// Get Orders by filter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (OrderHistoryDtoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderHistoryDtoList>> GetSearchOrdersAsyncWithHttpInfo (OrderSearchDto body = null);
        /// <summary>
        /// Po Valid.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="po"> (optional)</param>
        /// <returns>Task of POValidDto</returns>
        System.Threading.Tasks.Task<POValidDto> IsPOValidAsync (string po = null);

        /// <summary>
        /// Po Valid.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="po"> (optional)</param>
        /// <returns>Task of ApiResponse (POValidDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<POValidDto>> IsPOValidAsyncWithHttpInfo (string po = null);
        /// <summary>
        /// PunchOut Order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of OrderCountDto</returns>
        System.Threading.Tasks.Task<OrderCountDto> OrderCountAsync (string userId);

        /// <summary>
        /// PunchOut Order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (OrderCountDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderCountDto>> OrderCountAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Reject the given order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="orderId"></param>
        /// <returns>Task of OrderHistoryDtoList</returns>
        System.Threading.Tasks.Task<OrderHistoryDtoList> RejectOrderAsync (string userId, string orderId);

        /// <summary>
        /// Reject the given order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="orderId"></param>
        /// <returns>Task of ApiResponse (OrderHistoryDtoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderHistoryDtoList>> RejectOrderAsyncWithHttpInfo (string userId, string orderId);
        /// <summary>
        /// Search for Non web orders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber"></param>
        /// <returns>Task of OrderDto</returns>
        System.Threading.Tasks.Task<OrderDto> SearchOrderAsync (string orderNumber);

        /// <summary>
        /// Search for Non web orders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber"></param>
        /// <returns>Task of ApiResponse (OrderDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderDto>> SearchOrderAsyncWithHttpInfo (string orderNumber);
        /// <summary>
        /// Send shipping notifications.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ShippingNotificationOrderDto</returns>
        System.Threading.Tasks.Task<ShippingNotificationOrderDto> SendShippingNotificationsAsync (ShippingNotificationOrderDto body = null);

        /// <summary>
        /// Send shipping notifications.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ShippingNotificationOrderDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShippingNotificationOrderDto>> SendShippingNotificationsAsyncWithHttpInfo (ShippingNotificationOrderDto body = null);
        /// <summary>
        /// Update erpOrdernumber to the given web order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of OrderNumberDto</returns>
        System.Threading.Tasks.Task<OrderNumberDto> UpdateErpOrderNumberAsync (OrderNumberDto body = null);

        /// <summary>
        /// Update erpOrdernumber to the given web order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (OrderNumberDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderNumberDto>> UpdateErpOrderNumberAsyncWithHttpInfo (OrderNumberDto body = null);
        /// <summary>
        /// Update order status to the given web order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateOrderStatusAsync (OrderStatusDto body = null);

        /// <summary>
        /// Update order status to the given web order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateOrderStatusAsyncWithHttpInfo (OrderStatusDto body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrderApi : IOrderApi
    {
        private Pki.eBusiness.ErpApi.DataAccess.Client.ExceptionFactory _exceptionFactory = (name, response) => {
            int status = (int)response.StatusCode;
            if (status == 500 || status == 400)
            {
                return Configuration.DefaultExceptionFactory(name, response);
            }
            else
            {
                return null;
            }

        };


        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Pki.eBusiness.ErpApi.DataAccess.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrderApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Pki.eBusiness.ErpApi.DataAccess.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Pki.eBusiness.ErpApi.DataAccess.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Approve the given order. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="orderId"></param>
        /// <returns>OrderHistoryDtoList</returns>
        public OrderHistoryDtoList ApproveOrder (string userId, string orderId)
        {
             ApiResponse<OrderHistoryDtoList> localVarResponse = ApproveOrderWithHttpInfo(userId, orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Approve the given order. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="orderId"></param>
        /// <returns>ApiResponse of OrderHistoryDtoList</returns>
        public ApiResponse< OrderHistoryDtoList > ApproveOrderWithHttpInfo (string userId, string orderId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrderApi->ApproveOrder");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->ApproveOrder");

            var localVarPath = "/orders/approve/{userId}/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (orderId != null) localVarPathParams.Add("orderId", Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApproveOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderHistoryDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderHistoryDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderHistoryDtoList)));
        }

        /// <summary>
        /// Approve the given order. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="orderId"></param>
        /// <returns>Task of OrderHistoryDtoList</returns>
        public async System.Threading.Tasks.Task<OrderHistoryDtoList> ApproveOrderAsync (string userId, string orderId)
        {
             ApiResponse<OrderHistoryDtoList> localVarResponse = await ApproveOrderAsyncWithHttpInfo(userId, orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Approve the given order. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="orderId"></param>
        /// <returns>Task of ApiResponse (OrderHistoryDtoList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderHistoryDtoList>> ApproveOrderAsyncWithHttpInfo (string userId, string orderId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrderApi->ApproveOrder");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->ApproveOrder");

            var localVarPath = "/orders/approve/{userId}/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (orderId != null) localVarPathParams.Add("orderId", Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApproveOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderHistoryDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderHistoryDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderHistoryDtoList)));
        }

        /// <summary>
        /// PunchOut Order. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderMessageDto</returns>
        public OrderMessageDto Checkout (string userId, PunchoutOrderRequestDto body = null)
        {
             ApiResponse<OrderMessageDto> localVarResponse = CheckoutWithHttpInfo(userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PunchOut Order. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderMessageDto</returns>
        public ApiResponse< OrderMessageDto > CheckoutWithHttpInfo (string userId, PunchoutOrderRequestDto body = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrderApi->Checkout");

            var localVarPath = "/orders/punchout/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Checkout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderMessageDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderMessageDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderMessageDto)));
        }

        /// <summary>
        /// PunchOut Order. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of OrderMessageDto</returns>
        public async System.Threading.Tasks.Task<OrderMessageDto> CheckoutAsync (string userId, PunchoutOrderRequestDto body = null)
        {
             ApiResponse<OrderMessageDto> localVarResponse = await CheckoutAsyncWithHttpInfo(userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PunchOut Order. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (OrderMessageDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderMessageDto>> CheckoutAsyncWithHttpInfo (string userId, PunchoutOrderRequestDto body = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrderApi->Checkout");

            var localVarPath = "/orders/punchout/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Checkout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderMessageDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderMessageDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderMessageDto)));
        }

        /// <summary>
        /// Place an order based on the current cart. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderDto</returns>
        public OrderDto Create (string userId, BasicOrderDto body = null)
        {
             ApiResponse<OrderDto> localVarResponse = CreateWithHttpInfo(userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Place an order based on the current cart. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderDto</returns>
        public ApiResponse< OrderDto > CreateWithHttpInfo (string userId, BasicOrderDto body = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrderApi->Create");

            var localVarPath = "/orders/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderDto)));
        }

        /// <summary>
        /// Place an order based on the current cart. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of OrderDto</returns>
        public async System.Threading.Tasks.Task<OrderDto> CreateAsync (string userId, BasicOrderDto body = null)
        {
             ApiResponse<OrderDto> localVarResponse = await CreateAsyncWithHttpInfo(userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Place an order based on the current cart. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (OrderDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderDto>> CreateAsyncWithHttpInfo (string userId, BasicOrderDto body = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrderApi->Create");

            var localVarPath = "/orders/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderDto)));
        }

        /// <summary>
        /// Returns pending order Count. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>PendingOrderCountDto</returns>
        public PendingOrderCountDto GetCount (string userId)
        {
             ApiResponse<PendingOrderCountDto> localVarResponse = GetCountWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns pending order Count. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of PendingOrderCountDto</returns>
        public ApiResponse< PendingOrderCountDto > GetCountWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrderApi->GetCount");

            var localVarPath = "/orders/approvalscount/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PendingOrderCountDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PendingOrderCountDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PendingOrderCountDto)));
        }

        /// <summary>
        /// Returns pending order Count. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of PendingOrderCountDto</returns>
        public async System.Threading.Tasks.Task<PendingOrderCountDto> GetCountAsync (string userId)
        {
             ApiResponse<PendingOrderCountDto> localVarResponse = await GetCountAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns pending order Count. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (PendingOrderCountDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PendingOrderCountDto>> GetCountAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrderApi->GetCount");

            var localVarPath = "/orders/approvalscount/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PendingOrderCountDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PendingOrderCountDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PendingOrderCountDto)));
        }

        /// <summary>
        /// Order Details with WebOrder or ERPOrderNumber . 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <returns>OrderDto</returns>
        public OrderDto GetOrder (string orderId)
        {
             ApiResponse<OrderDto> localVarResponse = GetOrderWithHttpInfo(orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Order Details with WebOrder or ERPOrderNumber . 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <returns>ApiResponse of OrderDto</returns>
        public ApiResponse< OrderDto > GetOrderWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->GetOrder");

            var localVarPath = "/orders/details/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("orderId", Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderDto)));
        }

        /// <summary>
        /// Order Details with WebOrder or ERPOrderNumber . 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <returns>Task of OrderDto</returns>
        public async System.Threading.Tasks.Task<OrderDto> GetOrderAsync (string orderId)
        {
             ApiResponse<OrderDto> localVarResponse = await GetOrderAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Order Details with WebOrder or ERPOrderNumber . 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <returns>Task of ApiResponse (OrderDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderDto>> GetOrderAsyncWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->GetOrder");

            var localVarPath = "/orders/details/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("orderId", Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderDto)));
        }

        /// <summary>
        /// Order Details with WebOrder. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <returns>OrderDto</returns>
        public OrderDto GetOrderDetails (string orderId)
        {
             ApiResponse<OrderDto> localVarResponse = GetOrderDetailsWithHttpInfo(orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Order Details with WebOrder. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <returns>ApiResponse of OrderDto</returns>
        public ApiResponse< OrderDto > GetOrderDetailsWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->GetOrderDetails");

            var localVarPath = "/orders/orderdetails/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("orderId", Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderDto)));
        }

        /// <summary>
        /// Order Details with WebOrder. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <returns>Task of OrderDto</returns>
        public async System.Threading.Tasks.Task<OrderDto> GetOrderDetailsAsync (string orderId)
        {
             ApiResponse<OrderDto> localVarResponse = await GetOrderDetailsAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Order Details with WebOrder. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"></param>
        /// <returns>Task of ApiResponse (OrderDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderDto>> GetOrderDetailsAsyncWithHttpInfo (string orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->GetOrderDetails");

            var localVarPath = "/orders/orderdetails/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("orderId", Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderDto)));
        }

        /// <summary>
        /// Get order states. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DisplayContentDtoList</returns>
        public DisplayContentDtoList GetOrderStates ()
        {
             ApiResponse<DisplayContentDtoList> localVarResponse = GetOrderStatesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get order states. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DisplayContentDtoList</returns>
        public ApiResponse< DisplayContentDtoList > GetOrderStatesWithHttpInfo ()
        {

            var localVarPath = "/orders/orderStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderStates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DisplayContentDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DisplayContentDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DisplayContentDtoList)));
        }

        /// <summary>
        /// Get order states. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DisplayContentDtoList</returns>
        public async System.Threading.Tasks.Task<DisplayContentDtoList> GetOrderStatesAsync ()
        {
             ApiResponse<DisplayContentDtoList> localVarResponse = await GetOrderStatesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get order states. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DisplayContentDtoList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DisplayContentDtoList>> GetOrderStatesAsyncWithHttpInfo ()
        {

            var localVarPath = "/orders/orderStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderStates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DisplayContentDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DisplayContentDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DisplayContentDtoList)));
        }

        /// <summary>
        /// Get order types. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DisplayContentDtoList</returns>
        public DisplayContentDtoList GetOrderTypes ()
        {
             ApiResponse<DisplayContentDtoList> localVarResponse = GetOrderTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get order types. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DisplayContentDtoList</returns>
        public ApiResponse< DisplayContentDtoList > GetOrderTypesWithHttpInfo ()
        {

            var localVarPath = "/orders/orderTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DisplayContentDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DisplayContentDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DisplayContentDtoList)));
        }

        /// <summary>
        /// Get order types. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DisplayContentDtoList</returns>
        public async System.Threading.Tasks.Task<DisplayContentDtoList> GetOrderTypesAsync ()
        {
             ApiResponse<DisplayContentDtoList> localVarResponse = await GetOrderTypesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get order types. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DisplayContentDtoList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DisplayContentDtoList>> GetOrderTypesAsyncWithHttpInfo ()
        {

            var localVarPath = "/orders/orderTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DisplayContentDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DisplayContentDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DisplayContentDtoList)));
        }

        /// <summary>
        /// Order History. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>OrderHistoryDtoList</returns>
        public OrderHistoryDtoList GetOrders (string userId)
        {
             ApiResponse<OrderHistoryDtoList> localVarResponse = GetOrdersWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Order History. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of OrderHistoryDtoList</returns>
        public ApiResponse< OrderHistoryDtoList > GetOrdersWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrderApi->GetOrders");

            var localVarPath = "/orders/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderHistoryDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderHistoryDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderHistoryDtoList)));
        }

        /// <summary>
        /// Order History. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of OrderHistoryDtoList</returns>
        public async System.Threading.Tasks.Task<OrderHistoryDtoList> GetOrdersAsync (string userId)
        {
             ApiResponse<OrderHistoryDtoList> localVarResponse = await GetOrdersAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Order History. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (OrderHistoryDtoList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderHistoryDtoList>> GetOrdersAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrderApi->GetOrders");

            var localVarPath = "/orders/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderHistoryDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderHistoryDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderHistoryDtoList)));
        }

        /// <summary>
        /// Pending Orders for Approvals. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>OrderHistoryDtoList</returns>
        public OrderHistoryDtoList GetPendingOrders (string userId)
        {
             ApiResponse<OrderHistoryDtoList> localVarResponse = GetPendingOrdersWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pending Orders for Approvals. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of OrderHistoryDtoList</returns>
        public ApiResponse< OrderHistoryDtoList > GetPendingOrdersWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrderApi->GetPendingOrders");

            var localVarPath = "/orders/approvals/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPendingOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderHistoryDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderHistoryDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderHistoryDtoList)));
        }

        /// <summary>
        /// Pending Orders for Approvals. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of OrderHistoryDtoList</returns>
        public async System.Threading.Tasks.Task<OrderHistoryDtoList> GetPendingOrdersAsync (string userId)
        {
             ApiResponse<OrderHistoryDtoList> localVarResponse = await GetPendingOrdersAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pending Orders for Approvals. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (OrderHistoryDtoList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderHistoryDtoList>> GetPendingOrdersAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrderApi->GetPendingOrders");

            var localVarPath = "/orders/approvals/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPendingOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderHistoryDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderHistoryDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderHistoryDtoList)));
        }

        /// <summary>
        /// Get Orders by filter. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderHistoryDtoList</returns>
        public OrderHistoryDtoList GetSearchOrders (OrderSearchDto body = null)
        {
             ApiResponse<OrderHistoryDtoList> localVarResponse = GetSearchOrdersWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Orders by filter. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderHistoryDtoList</returns>
        public ApiResponse< OrderHistoryDtoList > GetSearchOrdersWithHttpInfo (OrderSearchDto body = null)
        {

            var localVarPath = "/orders/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSearchOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderHistoryDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderHistoryDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderHistoryDtoList)));
        }

        /// <summary>
        /// Get Orders by filter. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of OrderHistoryDtoList</returns>
        public async System.Threading.Tasks.Task<OrderHistoryDtoList> GetSearchOrdersAsync (OrderSearchDto body = null)
        {
             ApiResponse<OrderHistoryDtoList> localVarResponse = await GetSearchOrdersAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Orders by filter. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (OrderHistoryDtoList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderHistoryDtoList>> GetSearchOrdersAsyncWithHttpInfo (OrderSearchDto body = null)
        {

            var localVarPath = "/orders/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSearchOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderHistoryDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderHistoryDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderHistoryDtoList)));
        }

        /// <summary>
        /// Po Valid. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="po"> (optional)</param>
        /// <returns>POValidDto</returns>
        public POValidDto IsPOValid (string po = null)
        {
             ApiResponse<POValidDto> localVarResponse = IsPOValidWithHttpInfo(po);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Po Valid. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="po"> (optional)</param>
        /// <returns>ApiResponse of POValidDto</returns>
        public ApiResponse< POValidDto > IsPOValidWithHttpInfo (string po = null)
        {

            var localVarPath = "/orders/isPOValid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (po != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "po", po)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IsPOValid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<POValidDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (POValidDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(POValidDto)));
        }

        /// <summary>
        /// Po Valid. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="po"> (optional)</param>
        /// <returns>Task of POValidDto</returns>
        public async System.Threading.Tasks.Task<POValidDto> IsPOValidAsync (string po = null)
        {
             ApiResponse<POValidDto> localVarResponse = await IsPOValidAsyncWithHttpInfo(po);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Po Valid. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="po"> (optional)</param>
        /// <returns>Task of ApiResponse (POValidDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<POValidDto>> IsPOValidAsyncWithHttpInfo (string po = null)
        {

            var localVarPath = "/orders/isPOValid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (po != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "po", po)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IsPOValid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<POValidDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (POValidDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(POValidDto)));
        }

        /// <summary>
        /// PunchOut Order. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>OrderCountDto</returns>
        public OrderCountDto OrderCount (string userId)
        {
             ApiResponse<OrderCountDto> localVarResponse = OrderCountWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PunchOut Order. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of OrderCountDto</returns>
        public ApiResponse< OrderCountDto > OrderCountWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrderApi->OrderCount");

            var localVarPath = "/orders/orderCount/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderCountDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderCountDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderCountDto)));
        }

        /// <summary>
        /// PunchOut Order. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of OrderCountDto</returns>
        public async System.Threading.Tasks.Task<OrderCountDto> OrderCountAsync (string userId)
        {
             ApiResponse<OrderCountDto> localVarResponse = await OrderCountAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PunchOut Order. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (OrderCountDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderCountDto>> OrderCountAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrderApi->OrderCount");

            var localVarPath = "/orders/orderCount/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderCountDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderCountDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderCountDto)));
        }

        /// <summary>
        /// Reject the given order. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="orderId"></param>
        /// <returns>OrderHistoryDtoList</returns>
        public OrderHistoryDtoList RejectOrder (string userId, string orderId)
        {
             ApiResponse<OrderHistoryDtoList> localVarResponse = RejectOrderWithHttpInfo(userId, orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reject the given order. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="orderId"></param>
        /// <returns>ApiResponse of OrderHistoryDtoList</returns>
        public ApiResponse< OrderHistoryDtoList > RejectOrderWithHttpInfo (string userId, string orderId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrderApi->RejectOrder");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->RejectOrder");

            var localVarPath = "/orders/reject/{userId}/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (orderId != null) localVarPathParams.Add("orderId", Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RejectOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderHistoryDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderHistoryDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderHistoryDtoList)));
        }

        /// <summary>
        /// Reject the given order. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="orderId"></param>
        /// <returns>Task of OrderHistoryDtoList</returns>
        public async System.Threading.Tasks.Task<OrderHistoryDtoList> RejectOrderAsync (string userId, string orderId)
        {
             ApiResponse<OrderHistoryDtoList> localVarResponse = await RejectOrderAsyncWithHttpInfo(userId, orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reject the given order. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="orderId"></param>
        /// <returns>Task of ApiResponse (OrderHistoryDtoList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderHistoryDtoList>> RejectOrderAsyncWithHttpInfo (string userId, string orderId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OrderApi->RejectOrder");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->RejectOrder");

            var localVarPath = "/orders/reject/{userId}/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (orderId != null) localVarPathParams.Add("orderId", Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RejectOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderHistoryDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderHistoryDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderHistoryDtoList)));
        }

        /// <summary>
        /// Search for Non web orders. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber"></param>
        /// <returns>OrderDto</returns>
        public OrderDto SearchOrder (string orderNumber)
        {
             ApiResponse<OrderDto> localVarResponse = SearchOrderWithHttpInfo(orderNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for Non web orders. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber"></param>
        /// <returns>ApiResponse of OrderDto</returns>
        public ApiResponse< OrderDto > SearchOrderWithHttpInfo (string orderNumber)
        {
            // verify the required parameter 'orderNumber' is set
            if (orderNumber == null)
                throw new ApiException(400, "Missing required parameter 'orderNumber' when calling OrderApi->SearchOrder");

            var localVarPath = "/orders/search/{orderNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderNumber != null) localVarPathParams.Add("orderNumber", Configuration.ApiClient.ParameterToString(orderNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderDto)));
        }

        /// <summary>
        /// Search for Non web orders. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber"></param>
        /// <returns>Task of OrderDto</returns>
        public async System.Threading.Tasks.Task<OrderDto> SearchOrderAsync (string orderNumber)
        {
             ApiResponse<OrderDto> localVarResponse = await SearchOrderAsyncWithHttpInfo(orderNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search for Non web orders. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNumber"></param>
        /// <returns>Task of ApiResponse (OrderDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderDto>> SearchOrderAsyncWithHttpInfo (string orderNumber)
        {
            // verify the required parameter 'orderNumber' is set
            if (orderNumber == null)
                throw new ApiException(400, "Missing required parameter 'orderNumber' when calling OrderApi->SearchOrder");

            var localVarPath = "/orders/search/{orderNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderNumber != null) localVarPathParams.Add("orderNumber", Configuration.ApiClient.ParameterToString(orderNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderDto)));
        }

        /// <summary>
        /// Send shipping notifications. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ShippingNotificationOrderDto</returns>
        public string SendShippingNotifications (ShippingNotificationOrderDto body = null)
        {
             ApiResponse<string> localVarResponse = SendShippingNotificationsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send shipping notifications. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ShippingNotificationOrderDto</returns>
        public ApiResponse< string > SendShippingNotificationsWithHttpInfo (ShippingNotificationOrderDto body = null)
        {

            var localVarPath = "/orders/shippingNotifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendShippingNotifications", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));

            //return new ApiResponse<ShippingNotificationOrderDto>(localVarStatusCode,
            //    localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
            //    (ShippingNotificationOrderDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShippingNotificationOrderDto)));
        }

        /// <summary>
        /// Send shipping notifications. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ShippingNotificationOrderDto</returns>
        public async System.Threading.Tasks.Task<ShippingNotificationOrderDto> SendShippingNotificationsAsync (ShippingNotificationOrderDto body = null)
        {
             ApiResponse<ShippingNotificationOrderDto> localVarResponse = await SendShippingNotificationsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send shipping notifications. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ShippingNotificationOrderDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShippingNotificationOrderDto>> SendShippingNotificationsAsyncWithHttpInfo (ShippingNotificationOrderDto body = null)
        {

            var localVarPath = "/orders/shippingNotifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendShippingNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShippingNotificationOrderDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShippingNotificationOrderDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShippingNotificationOrderDto)));
        }

        /// <summary>
        /// Update erpOrdernumber to the given web order. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>OrderNumberDto</returns>
        public OrderNumberDto UpdateErpOrderNumber (OrderNumberDto body = null)
        {
             ApiResponse<OrderNumberDto> localVarResponse = UpdateErpOrderNumberWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update erpOrdernumber to the given web order. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of OrderNumberDto</returns>
        public ApiResponse< OrderNumberDto > UpdateErpOrderNumberWithHttpInfo (OrderNumberDto body = null)
        {

            var localVarPath = "/orders/mapWebOrder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateErpOrderNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderNumberDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderNumberDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderNumberDto)));
        }

        /// <summary>
        /// Update erpOrdernumber to the given web order. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of OrderNumberDto</returns>
        public async System.Threading.Tasks.Task<OrderNumberDto> UpdateErpOrderNumberAsync (OrderNumberDto body = null)
        {
             ApiResponse<OrderNumberDto> localVarResponse = await UpdateErpOrderNumberAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update erpOrdernumber to the given web order. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (OrderNumberDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderNumberDto>> UpdateErpOrderNumberAsyncWithHttpInfo (OrderNumberDto body = null)
        {

            var localVarPath = "/orders/mapWebOrder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateErpOrderNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderNumberDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderNumberDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderNumberDto)));
        }

        /// <summary>
        /// Update order status to the given web order. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateOrderStatus (OrderStatusDto body = null)
        {
             UpdateOrderStatusWithHttpInfo(body);
        }

        /// <summary>
        /// Update order status to the given web order. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateOrderStatusWithHttpInfo (OrderStatusDto body = null)
        {

            var localVarPath = "/orders/mapOrderStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrderStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update order status to the given web order. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateOrderStatusAsync (OrderStatusDto body = null)
        {
             await UpdateOrderStatusAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update order status to the given web order. 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateOrderStatusAsyncWithHttpInfo (OrderStatusDto body = null)
        {

            var localVarPath = "/orders/mapOrderStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrderStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
