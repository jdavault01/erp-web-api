/* 
 * ATG Store
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Pki.eBusiness.ErpApi.DataAccess.Client;
using Pki.eBusiness.ErpApi.DataAccess.Model;

namespace Pki.eBusiness.ErpApi.DataAccess.AtgApi
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICatalogApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BasicSkuInformationDtos</returns>
        BasicSkuInformationDtos GetBasicSkusInfoByPartNumbers (List<string> body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BasicSkuInformationDtos</returns>
        ApiResponse<BasicSkuInformationDtos> GetBasicSkusInfoByPartNumbersWithHttpInfo (List<string> body = null);
        /// <summary>
        /// Get category details for given category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUri"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <returns>CategoryContentItemDto</returns>
        CategoryContentItemDto GetCategoryDetails (string contentUri, string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null);

        /// <summary>
        /// Get category details for given category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUri"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <returns>ApiResponse of CategoryContentItemDto</returns>
        ApiResponse<CategoryContentItemDto> GetCategoryDetailsWithHttpInfo (string contentUri, string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null);
        /// <summary>
        /// Get category other details for given category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUri"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <returns>OtherContentItemDto</returns>
        OtherContentItemDto GetCategoryOtherDetails (string contentUri, string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null);

        /// <summary>
        /// Get category other details for given category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUri"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <returns>ApiResponse of OtherContentItemDto</returns>
        ApiResponse<OtherContentItemDto> GetCategoryOtherDetailsWithHttpInfo (string contentUri, string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null);
        /// <summary>
        /// Get Main menu details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>MainMenuDto</returns>
        MainMenuDto GetMainMenu (string userId = null, string countryName = null);

        /// <summary>
        /// Get Main menu details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>ApiResponse of MainMenuDto</returns>
        ApiResponse<MainMenuDto> GetMainMenuWithHttpInfo (string userId = null, string countryName = null);
        /// <summary>
        /// Get PDF details for given pdf name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfName"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>PdfContentItemDto</returns>
        PdfContentItemDto GetPdfDetails (string pdfName, string userId = null, string countryName = null);

        /// <summary>
        /// Get PDF details for given pdf name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfName"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>ApiResponse of PdfContentItemDto</returns>
        ApiResponse<PdfContentItemDto> GetPdfDetailsWithHttpInfo (string pdfName, string userId = null, string countryName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="countryCode"> (optional)</param>
        /// <param name="companyCode"> (optional)</param>
        /// <param name="isDealerUser"> (optional)</param>
        /// <returns>PopularSearchDtoList</returns>
        PopularSearchDtoList GetPopularSearch (PopularSearchDtoList body, string countryCode = null, string companyCode = null, bool? isDealerUser = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="countryCode"> (optional)</param>
        /// <param name="companyCode"> (optional)</param>
        /// <param name="isDealerUser"> (optional)</param>
        /// <returns>ApiResponse of PopularSearchDtoList</returns>
        ApiResponse<PopularSearchDtoList> GetPopularSearchWithHttpInfo (PopularSearchDtoList body, string countryCode = null, string companyCode = null, bool? isDealerUser = null);
        /// <summary>
        /// Get Product details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUri"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>ProductDetailsContentItemDto</returns>
        ProductDetailsContentItemDto GetProductDetails (string contentUri, string userId = null, string countryName = null);

        /// <summary>
        /// Get Product details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUri"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>ApiResponse of ProductDetailsContentItemDto</returns>
        ApiResponse<ProductDetailsContentItemDto> GetProductDetailsWithHttpInfo (string contentUri, string userId = null, string countryName = null);
        /// <summary>
        /// Get Quick View details for Product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentURI"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>ProductDto</returns>
        ProductDto GetProductQuickView (string contentURI, string userId = null, string countryName = null);

        /// <summary>
        /// Get Quick View details for Product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentURI"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>ApiResponse of ProductDto</returns>
        ApiResponse<ProductDto> GetProductQuickViewWithHttpInfo (string contentURI, string userId = null, string countryName = null);
        /// <summary>
        /// Get Resources landing page data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>ResourceLandingDto</returns>
        ResourceLandingDto GetResourceLanding (string userId = null, string countryName = null);

        /// <summary>
        /// Get Resources landing page data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>ApiResponse of ResourceLandingDto</returns>
        ApiResponse<ResourceLandingDto> GetResourceLandingWithHttpInfo (string userId = null, string countryName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partNumber"> (optional)</param>
        /// <returns>SeoNameDto</returns>
        SeoNameDto GetSEOName (string partNumber = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partNumber"> (optional)</param>
        /// <returns>ApiResponse of SeoNameDto</returns>
        ApiResponse<SeoNameDto> GetSEONameWithHttpInfo (string partNumber = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="countryCode"> (optional)</param>
        /// <param name="companyCode"> (optional)</param>
        /// <param name="isDealerUser"> (optional)</param>
        /// <returns>SuggestedCategoryContentDto</returns>
        SuggestedCategoryContentDto GetSuggestedCategories (SuggestedCategoryContentDto body, string countryCode = null, string companyCode = null, bool? isDealerUser = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="countryCode"> (optional)</param>
        /// <param name="companyCode"> (optional)</param>
        /// <param name="isDealerUser"> (optional)</param>
        /// <returns>ApiResponse of SuggestedCategoryContentDto</returns>
        ApiResponse<SuggestedCategoryContentDto> GetSuggestedCategoriesWithHttpInfo (SuggestedCategoryContentDto body, string countryCode = null, string companyCode = null, bool? isDealerUser = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="countryCode"> (optional)</param>
        /// <param name="companyCode"> (optional)</param>
        /// <param name="isDealerUser"> (optional)</param>
        /// <returns>SuggestedProductsDetails</returns>
        SuggestedProductsDetails GetSuggestedProducts (SuggestedProductsDetails body, string countryCode = null, string companyCode = null, bool? isDealerUser = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="countryCode"> (optional)</param>
        /// <param name="companyCode"> (optional)</param>
        /// <param name="isDealerUser"> (optional)</param>
        /// <returns>ApiResponse of SuggestedProductsDetails</returns>
        ApiResponse<SuggestedProductsDetails> GetSuggestedProductsWithHttpInfo (SuggestedProductsDetails body, string countryCode = null, string companyCode = null, bool? isDealerUser = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partNumber"></param>
        /// <returns>ProductCompareDto</returns>
        ProductCompareDto ProductCompareDetails (string partNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partNumber"></param>
        /// <returns>ApiResponse of ProductCompareDto</returns>
        ApiResponse<ProductCompareDto> ProductCompareDetailsWithHttpInfo (string partNumber);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BasicSkuInformationDtos</returns>
        System.Threading.Tasks.Task<BasicSkuInformationDtos> GetBasicSkusInfoByPartNumbersAsync (List<string> body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BasicSkuInformationDtos)</returns>
        System.Threading.Tasks.Task<ApiResponse<BasicSkuInformationDtos>> GetBasicSkusInfoByPartNumbersAsyncWithHttpInfo (List<string> body = null);
        /// <summary>
        /// Get category details for given category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUri"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <returns>Task of CategoryContentItemDto</returns>
        System.Threading.Tasks.Task<CategoryContentItemDto> GetCategoryDetailsAsync (string contentUri, string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null);

        /// <summary>
        /// Get category details for given category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUri"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <returns>Task of ApiResponse (CategoryContentItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryContentItemDto>> GetCategoryDetailsAsyncWithHttpInfo (string contentUri, string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null);
        /// <summary>
        /// Get category other details for given category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUri"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <returns>Task of OtherContentItemDto</returns>
        System.Threading.Tasks.Task<OtherContentItemDto> GetCategoryOtherDetailsAsync (string contentUri, string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null);

        /// <summary>
        /// Get category other details for given category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUri"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <returns>Task of ApiResponse (OtherContentItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OtherContentItemDto>> GetCategoryOtherDetailsAsyncWithHttpInfo (string contentUri, string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null);
        /// <summary>
        /// Get Main menu details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of MainMenuDto</returns>
        System.Threading.Tasks.Task<MainMenuDto> GetMainMenuAsync (string userId = null, string countryName = null);

        /// <summary>
        /// Get Main menu details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of ApiResponse (MainMenuDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<MainMenuDto>> GetMainMenuAsyncWithHttpInfo (string userId = null, string countryName = null);
        /// <summary>
        /// Get PDF details for given pdf name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfName"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of PdfContentItemDto</returns>
        System.Threading.Tasks.Task<PdfContentItemDto> GetPdfDetailsAsync (string pdfName, string userId = null, string countryName = null);

        /// <summary>
        /// Get PDF details for given pdf name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfName"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of ApiResponse (PdfContentItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PdfContentItemDto>> GetPdfDetailsAsyncWithHttpInfo (string pdfName, string userId = null, string countryName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="countryCode"> (optional)</param>
        /// <param name="companyCode"> (optional)</param>
        /// <param name="isDealerUser"> (optional)</param>
        /// <returns>Task of PopularSearchDtoList</returns>
        System.Threading.Tasks.Task<PopularSearchDtoList> GetPopularSearchAsync (PopularSearchDtoList body, string countryCode = null, string companyCode = null, bool? isDealerUser = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="countryCode"> (optional)</param>
        /// <param name="companyCode"> (optional)</param>
        /// <param name="isDealerUser"> (optional)</param>
        /// <returns>Task of ApiResponse (PopularSearchDtoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PopularSearchDtoList>> GetPopularSearchAsyncWithHttpInfo (PopularSearchDtoList body, string countryCode = null, string companyCode = null, bool? isDealerUser = null);
        /// <summary>
        /// Get Product details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUri"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of ProductDetailsContentItemDto</returns>
        System.Threading.Tasks.Task<ProductDetailsContentItemDto> GetProductDetailsAsync (string contentUri, string userId = null, string countryName = null);

        /// <summary>
        /// Get Product details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUri"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductDetailsContentItemDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductDetailsContentItemDto>> GetProductDetailsAsyncWithHttpInfo (string contentUri, string userId = null, string countryName = null);
        /// <summary>
        /// Get Quick View details for Product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentURI"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of ProductDto</returns>
        System.Threading.Tasks.Task<ProductDto> GetProductQuickViewAsync (string contentURI, string userId = null, string countryName = null);

        /// <summary>
        /// Get Quick View details for Product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentURI"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductDto>> GetProductQuickViewAsyncWithHttpInfo (string contentURI, string userId = null, string countryName = null);
        /// <summary>
        /// Get Resources landing page data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of ResourceLandingDto</returns>
        System.Threading.Tasks.Task<ResourceLandingDto> GetResourceLandingAsync (string userId = null, string countryName = null);

        /// <summary>
        /// Get Resources landing page data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of ApiResponse (ResourceLandingDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLandingDto>> GetResourceLandingAsyncWithHttpInfo (string userId = null, string countryName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partNumber"> (optional)</param>
        /// <returns>Task of SeoNameDto</returns>
        System.Threading.Tasks.Task<SeoNameDto> GetSEONameAsync (string partNumber = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (SeoNameDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SeoNameDto>> GetSEONameAsyncWithHttpInfo (string partNumber = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="countryCode"> (optional)</param>
        /// <param name="companyCode"> (optional)</param>
        /// <param name="isDealerUser"> (optional)</param>
        /// <returns>Task of SuggestedCategoryContentDto</returns>
        System.Threading.Tasks.Task<SuggestedCategoryContentDto> GetSuggestedCategoriesAsync (SuggestedCategoryContentDto body, string countryCode = null, string companyCode = null, bool? isDealerUser = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="countryCode"> (optional)</param>
        /// <param name="companyCode"> (optional)</param>
        /// <param name="isDealerUser"> (optional)</param>
        /// <returns>Task of ApiResponse (SuggestedCategoryContentDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuggestedCategoryContentDto>> GetSuggestedCategoriesAsyncWithHttpInfo (SuggestedCategoryContentDto body, string countryCode = null, string companyCode = null, bool? isDealerUser = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="countryCode"> (optional)</param>
        /// <param name="companyCode"> (optional)</param>
        /// <param name="isDealerUser"> (optional)</param>
        /// <returns>Task of SuggestedProductsDetails</returns>
        System.Threading.Tasks.Task<SuggestedProductsDetails> GetSuggestedProductsAsync (SuggestedProductsDetails body, string countryCode = null, string companyCode = null, bool? isDealerUser = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="countryCode"> (optional)</param>
        /// <param name="companyCode"> (optional)</param>
        /// <param name="isDealerUser"> (optional)</param>
        /// <returns>Task of ApiResponse (SuggestedProductsDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuggestedProductsDetails>> GetSuggestedProductsAsyncWithHttpInfo (SuggestedProductsDetails body, string countryCode = null, string companyCode = null, bool? isDealerUser = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partNumber"></param>
        /// <returns>Task of ProductCompareDto</returns>
        System.Threading.Tasks.Task<ProductCompareDto> ProductCompareDetailsAsync (string partNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partNumber"></param>
        /// <returns>Task of ApiResponse (ProductCompareDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductCompareDto>> ProductCompareDetailsAsyncWithHttpInfo (string partNumber);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CatalogApi : ICatalogApi
    {
        private Pki.eBusiness.ErpApi.DataAccess.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CatalogApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Pki.eBusiness.ErpApi.DataAccess.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CatalogApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Pki.eBusiness.ErpApi.DataAccess.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Pki.eBusiness.ErpApi.DataAccess.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>BasicSkuInformationDtos</returns>
        public BasicSkuInformationDtos GetBasicSkusInfoByPartNumbers (List<string> body = null)
        {
             ApiResponse<BasicSkuInformationDtos> localVarResponse = GetBasicSkusInfoByPartNumbersWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BasicSkuInformationDtos</returns>
        public ApiResponse< BasicSkuInformationDtos > GetBasicSkusInfoByPartNumbersWithHttpInfo (List<string> body = null)
        {

            var localVarPath = "/catalog/basicSkusInfoByPartNumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBasicSkusInfoByPartNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BasicSkuInformationDtos>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BasicSkuInformationDtos) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasicSkuInformationDtos)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BasicSkuInformationDtos</returns>
        public async System.Threading.Tasks.Task<BasicSkuInformationDtos> GetBasicSkusInfoByPartNumbersAsync (List<string> body = null)
        {
             ApiResponse<BasicSkuInformationDtos> localVarResponse = await GetBasicSkusInfoByPartNumbersAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BasicSkuInformationDtos)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BasicSkuInformationDtos>> GetBasicSkusInfoByPartNumbersAsyncWithHttpInfo (List<string> body = null)
        {

            var localVarPath = "/catalog/basicSkusInfoByPartNumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBasicSkusInfoByPartNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BasicSkuInformationDtos>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BasicSkuInformationDtos) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasicSkuInformationDtos)));
        }

        /// <summary>
        /// Get category details for given category 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUri"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <returns>CategoryContentItemDto</returns>
        public CategoryContentItemDto GetCategoryDetails (string contentUri, string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null)
        {
             ApiResponse<CategoryContentItemDto> localVarResponse = GetCategoryDetailsWithHttpInfo(contentUri, userId, countryName, pageSize, sortOption, pageNumber, navState, buyOnline, resourceType, featured, refinment, resultsSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get category details for given category 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUri"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <returns>ApiResponse of CategoryContentItemDto</returns>
        public ApiResponse< CategoryContentItemDto > GetCategoryDetailsWithHttpInfo (string contentUri, string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null)
        {
            // verify the required parameter 'contentUri' is set
            if (contentUri == null)
                throw new ApiException(400, "Missing required parameter 'contentUri' when calling CatalogApi->GetCategoryDetails");

            var localVarPath = "/catalog/category/{contentUri}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentUri != null) localVarPathParams.Add("contentUri", Configuration.ApiClient.ParameterToString(contentUri)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (sortOption != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOption", sortOption)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (navState != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "navState", navState)); // query parameter
            if (buyOnline != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "buyOnline", buyOnline)); // query parameter
            if (resourceType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceType", resourceType)); // query parameter
            if (featured != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "featured", featured)); // query parameter
            if (refinment != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "refinment", refinment)); // query parameter
            if (resultsSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "resultsSize", resultsSize)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCategoryDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CategoryContentItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CategoryContentItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryContentItemDto)));
        }

        /// <summary>
        /// Get category details for given category 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUri"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <returns>Task of CategoryContentItemDto</returns>
        public async System.Threading.Tasks.Task<CategoryContentItemDto> GetCategoryDetailsAsync (string contentUri, string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null)
        {
             ApiResponse<CategoryContentItemDto> localVarResponse = await GetCategoryDetailsAsyncWithHttpInfo(contentUri, userId, countryName, pageSize, sortOption, pageNumber, navState, buyOnline, resourceType, featured, refinment, resultsSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get category details for given category 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUri"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <returns>Task of ApiResponse (CategoryContentItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CategoryContentItemDto>> GetCategoryDetailsAsyncWithHttpInfo (string contentUri, string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null)
        {
            // verify the required parameter 'contentUri' is set
            if (contentUri == null)
                throw new ApiException(400, "Missing required parameter 'contentUri' when calling CatalogApi->GetCategoryDetails");

            var localVarPath = "/catalog/category/{contentUri}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentUri != null) localVarPathParams.Add("contentUri", Configuration.ApiClient.ParameterToString(contentUri)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (sortOption != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOption", sortOption)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (navState != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "navState", navState)); // query parameter
            if (buyOnline != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "buyOnline", buyOnline)); // query parameter
            if (resourceType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceType", resourceType)); // query parameter
            if (featured != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "featured", featured)); // query parameter
            if (refinment != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "refinment", refinment)); // query parameter
            if (resultsSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "resultsSize", resultsSize)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCategoryDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CategoryContentItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CategoryContentItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryContentItemDto)));
        }

        /// <summary>
        /// Get category other details for given category 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUri"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <returns>OtherContentItemDto</returns>
        public OtherContentItemDto GetCategoryOtherDetails (string contentUri, string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null)
        {
             ApiResponse<OtherContentItemDto> localVarResponse = GetCategoryOtherDetailsWithHttpInfo(contentUri, userId, countryName, pageSize, sortOption, pageNumber, navState, buyOnline, resourceType, featured, refinment, resultsSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get category other details for given category 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUri"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <returns>ApiResponse of OtherContentItemDto</returns>
        public ApiResponse< OtherContentItemDto > GetCategoryOtherDetailsWithHttpInfo (string contentUri, string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null)
        {
            // verify the required parameter 'contentUri' is set
            if (contentUri == null)
                throw new ApiException(400, "Missing required parameter 'contentUri' when calling CatalogApi->GetCategoryOtherDetails");

            var localVarPath = "/catalog/categoryOther/{contentUri}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentUri != null) localVarPathParams.Add("contentUri", Configuration.ApiClient.ParameterToString(contentUri)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (sortOption != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOption", sortOption)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (navState != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "navState", navState)); // query parameter
            if (buyOnline != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "buyOnline", buyOnline)); // query parameter
            if (resourceType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceType", resourceType)); // query parameter
            if (featured != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "featured", featured)); // query parameter
            if (refinment != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "refinment", refinment)); // query parameter
            if (resultsSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "resultsSize", resultsSize)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCategoryOtherDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OtherContentItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OtherContentItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OtherContentItemDto)));
        }

        /// <summary>
        /// Get category other details for given category 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUri"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <returns>Task of OtherContentItemDto</returns>
        public async System.Threading.Tasks.Task<OtherContentItemDto> GetCategoryOtherDetailsAsync (string contentUri, string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null)
        {
             ApiResponse<OtherContentItemDto> localVarResponse = await GetCategoryOtherDetailsAsyncWithHttpInfo(contentUri, userId, countryName, pageSize, sortOption, pageNumber, navState, buyOnline, resourceType, featured, refinment, resultsSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get category other details for given category 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUri"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortOption"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="navState"> (optional)</param>
        /// <param name="buyOnline"> (optional)</param>
        /// <param name="resourceType"> (optional)</param>
        /// <param name="featured"> (optional)</param>
        /// <param name="refinment"> (optional)</param>
        /// <param name="resultsSize"> (optional)</param>
        /// <returns>Task of ApiResponse (OtherContentItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OtherContentItemDto>> GetCategoryOtherDetailsAsyncWithHttpInfo (string contentUri, string userId = null, string countryName = null, int? pageSize = null, string sortOption = null, int? pageNumber = null, string navState = null, string buyOnline = null, string resourceType = null, string featured = null, bool? refinment = null, int? resultsSize = null)
        {
            // verify the required parameter 'contentUri' is set
            if (contentUri == null)
                throw new ApiException(400, "Missing required parameter 'contentUri' when calling CatalogApi->GetCategoryOtherDetails");

            var localVarPath = "/catalog/categoryOther/{contentUri}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentUri != null) localVarPathParams.Add("contentUri", Configuration.ApiClient.ParameterToString(contentUri)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (sortOption != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOption", sortOption)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (navState != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "navState", navState)); // query parameter
            if (buyOnline != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "buyOnline", buyOnline)); // query parameter
            if (resourceType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "resourceType", resourceType)); // query parameter
            if (featured != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "featured", featured)); // query parameter
            if (refinment != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "refinment", refinment)); // query parameter
            if (resultsSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "resultsSize", resultsSize)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCategoryOtherDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OtherContentItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OtherContentItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OtherContentItemDto)));
        }

        /// <summary>
        /// Get Main menu details 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>MainMenuDto</returns>
        public MainMenuDto GetMainMenu (string userId = null, string countryName = null)
        {
             ApiResponse<MainMenuDto> localVarResponse = GetMainMenuWithHttpInfo(userId, countryName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Main menu details 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>ApiResponse of MainMenuDto</returns>
        public ApiResponse< MainMenuDto > GetMainMenuWithHttpInfo (string userId = null, string countryName = null)
        {

            var localVarPath = "/catalog/mainmenu";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMainMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainMenuDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MainMenuDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainMenuDto)));
        }

        /// <summary>
        /// Get Main menu details 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of MainMenuDto</returns>
        public async System.Threading.Tasks.Task<MainMenuDto> GetMainMenuAsync (string userId = null, string countryName = null)
        {
             ApiResponse<MainMenuDto> localVarResponse = await GetMainMenuAsyncWithHttpInfo(userId, countryName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Main menu details 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of ApiResponse (MainMenuDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MainMenuDto>> GetMainMenuAsyncWithHttpInfo (string userId = null, string countryName = null)
        {

            var localVarPath = "/catalog/mainmenu";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMainMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MainMenuDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MainMenuDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MainMenuDto)));
        }

        /// <summary>
        /// Get PDF details for given pdf name 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfName"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>PdfContentItemDto</returns>
        public PdfContentItemDto GetPdfDetails (string pdfName, string userId = null, string countryName = null)
        {
             ApiResponse<PdfContentItemDto> localVarResponse = GetPdfDetailsWithHttpInfo(pdfName, userId, countryName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get PDF details for given pdf name 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfName"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>ApiResponse of PdfContentItemDto</returns>
        public ApiResponse< PdfContentItemDto > GetPdfDetailsWithHttpInfo (string pdfName, string userId = null, string countryName = null)
        {
            // verify the required parameter 'pdfName' is set
            if (pdfName == null)
                throw new ApiException(400, "Missing required parameter 'pdfName' when calling CatalogApi->GetPdfDetails");

            var localVarPath = "/catalog/pdf/{pdfName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pdfName != null) localVarPathParams.Add("pdfName", Configuration.ApiClient.ParameterToString(pdfName)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PdfContentItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PdfContentItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PdfContentItemDto)));
        }

        /// <summary>
        /// Get PDF details for given pdf name 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfName"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of PdfContentItemDto</returns>
        public async System.Threading.Tasks.Task<PdfContentItemDto> GetPdfDetailsAsync (string pdfName, string userId = null, string countryName = null)
        {
             ApiResponse<PdfContentItemDto> localVarResponse = await GetPdfDetailsAsyncWithHttpInfo(pdfName, userId, countryName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get PDF details for given pdf name 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfName"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of ApiResponse (PdfContentItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PdfContentItemDto>> GetPdfDetailsAsyncWithHttpInfo (string pdfName, string userId = null, string countryName = null)
        {
            // verify the required parameter 'pdfName' is set
            if (pdfName == null)
                throw new ApiException(400, "Missing required parameter 'pdfName' when calling CatalogApi->GetPdfDetails");

            var localVarPath = "/catalog/pdf/{pdfName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pdfName != null) localVarPathParams.Add("pdfName", Configuration.ApiClient.ParameterToString(pdfName)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PdfContentItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PdfContentItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PdfContentItemDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="countryCode"> (optional)</param>
        /// <param name="companyCode"> (optional)</param>
        /// <param name="isDealerUser"> (optional)</param>
        /// <returns>PopularSearchDtoList</returns>
        public PopularSearchDtoList GetPopularSearch (PopularSearchDtoList body, string countryCode = null, string companyCode = null, bool? isDealerUser = null)
        {
             ApiResponse<PopularSearchDtoList> localVarResponse = GetPopularSearchWithHttpInfo(body, countryCode, companyCode, isDealerUser);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="countryCode"> (optional)</param>
        /// <param name="companyCode"> (optional)</param>
        /// <param name="isDealerUser"> (optional)</param>
        /// <returns>ApiResponse of PopularSearchDtoList</returns>
        public ApiResponse< PopularSearchDtoList > GetPopularSearchWithHttpInfo (PopularSearchDtoList body, string countryCode = null, string companyCode = null, bool? isDealerUser = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CatalogApi->GetPopularSearch");

            var localVarPath = "/catalog/popularSearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryCode", countryCode)); // query parameter
            if (companyCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "companyCode", companyCode)); // query parameter
            if (isDealerUser != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isDealerUser", isDealerUser)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPopularSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PopularSearchDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PopularSearchDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PopularSearchDtoList)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="countryCode"> (optional)</param>
        /// <param name="companyCode"> (optional)</param>
        /// <param name="isDealerUser"> (optional)</param>
        /// <returns>Task of PopularSearchDtoList</returns>
        public async System.Threading.Tasks.Task<PopularSearchDtoList> GetPopularSearchAsync (PopularSearchDtoList body, string countryCode = null, string companyCode = null, bool? isDealerUser = null)
        {
             ApiResponse<PopularSearchDtoList> localVarResponse = await GetPopularSearchAsyncWithHttpInfo(body, countryCode, companyCode, isDealerUser);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="countryCode"> (optional)</param>
        /// <param name="companyCode"> (optional)</param>
        /// <param name="isDealerUser"> (optional)</param>
        /// <returns>Task of ApiResponse (PopularSearchDtoList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PopularSearchDtoList>> GetPopularSearchAsyncWithHttpInfo (PopularSearchDtoList body, string countryCode = null, string companyCode = null, bool? isDealerUser = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CatalogApi->GetPopularSearch");

            var localVarPath = "/catalog/popularSearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryCode", countryCode)); // query parameter
            if (companyCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "companyCode", companyCode)); // query parameter
            if (isDealerUser != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isDealerUser", isDealerUser)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPopularSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PopularSearchDtoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PopularSearchDtoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PopularSearchDtoList)));
        }

        /// <summary>
        /// Get Product details 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUri"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>ProductDetailsContentItemDto</returns>
        public ProductDetailsContentItemDto GetProductDetails (string contentUri, string userId = null, string countryName = null)
        {
             ApiResponse<ProductDetailsContentItemDto> localVarResponse = GetProductDetailsWithHttpInfo(contentUri, userId, countryName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Product details 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUri"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>ApiResponse of ProductDetailsContentItemDto</returns>
        public ApiResponse< ProductDetailsContentItemDto > GetProductDetailsWithHttpInfo (string contentUri, string userId = null, string countryName = null)
        {
            // verify the required parameter 'contentUri' is set
            if (contentUri == null)
                throw new ApiException(400, "Missing required parameter 'contentUri' when calling CatalogApi->GetProductDetails");

            var localVarPath = "/catalog/product/{contentUri}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentUri != null) localVarPathParams.Add("contentUri", Configuration.ApiClient.ParameterToString(contentUri)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductDetailsContentItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductDetailsContentItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductDetailsContentItemDto)));
        }

        /// <summary>
        /// Get Product details 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUri"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of ProductDetailsContentItemDto</returns>
        public async System.Threading.Tasks.Task<ProductDetailsContentItemDto> GetProductDetailsAsync (string contentUri, string userId = null, string countryName = null)
        {
             ApiResponse<ProductDetailsContentItemDto> localVarResponse = await GetProductDetailsAsyncWithHttpInfo(contentUri, userId, countryName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Product details 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentUri"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductDetailsContentItemDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductDetailsContentItemDto>> GetProductDetailsAsyncWithHttpInfo (string contentUri, string userId = null, string countryName = null)
        {
            // verify the required parameter 'contentUri' is set
            if (contentUri == null)
                throw new ApiException(400, "Missing required parameter 'contentUri' when calling CatalogApi->GetProductDetails");

            var localVarPath = "/catalog/product/{contentUri}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentUri != null) localVarPathParams.Add("contentUri", Configuration.ApiClient.ParameterToString(contentUri)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductDetailsContentItemDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductDetailsContentItemDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductDetailsContentItemDto)));
        }

        /// <summary>
        /// Get Quick View details for Product 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentURI"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>ProductDto</returns>
        public ProductDto GetProductQuickView (string contentURI, string userId = null, string countryName = null)
        {
             ApiResponse<ProductDto> localVarResponse = GetProductQuickViewWithHttpInfo(contentURI, userId, countryName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Quick View details for Product 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentURI"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>ApiResponse of ProductDto</returns>
        public ApiResponse< ProductDto > GetProductQuickViewWithHttpInfo (string contentURI, string userId = null, string countryName = null)
        {
            // verify the required parameter 'contentURI' is set
            if (contentURI == null)
                throw new ApiException(400, "Missing required parameter 'contentURI' when calling CatalogApi->GetProductQuickView");

            var localVarPath = "/catalog/productQuickView/{contentURI}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentURI != null) localVarPathParams.Add("contentURI", Configuration.ApiClient.ParameterToString(contentURI)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductQuickView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductDto)));
        }

        /// <summary>
        /// Get Quick View details for Product 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentURI"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of ProductDto</returns>
        public async System.Threading.Tasks.Task<ProductDto> GetProductQuickViewAsync (string contentURI, string userId = null, string countryName = null)
        {
             ApiResponse<ProductDto> localVarResponse = await GetProductQuickViewAsyncWithHttpInfo(contentURI, userId, countryName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Quick View details for Product 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentURI"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of ApiResponse (ProductDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductDto>> GetProductQuickViewAsyncWithHttpInfo (string contentURI, string userId = null, string countryName = null)
        {
            // verify the required parameter 'contentURI' is set
            if (contentURI == null)
                throw new ApiException(400, "Missing required parameter 'contentURI' when calling CatalogApi->GetProductQuickView");

            var localVarPath = "/catalog/productQuickView/{contentURI}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentURI != null) localVarPathParams.Add("contentURI", Configuration.ApiClient.ParameterToString(contentURI)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProductQuickView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductDto)));
        }

        /// <summary>
        /// Get Resources landing page data 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>ResourceLandingDto</returns>
        public ResourceLandingDto GetResourceLanding (string userId = null, string countryName = null)
        {
             ApiResponse<ResourceLandingDto> localVarResponse = GetResourceLandingWithHttpInfo(userId, countryName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Resources landing page data 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>ApiResponse of ResourceLandingDto</returns>
        public ApiResponse< ResourceLandingDto > GetResourceLandingWithHttpInfo (string userId = null, string countryName = null)
        {

            var localVarPath = "/catalog/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceLanding", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLandingDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLandingDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLandingDto)));
        }

        /// <summary>
        /// Get Resources landing page data 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of ResourceLandingDto</returns>
        public async System.Threading.Tasks.Task<ResourceLandingDto> GetResourceLandingAsync (string userId = null, string countryName = null)
        {
             ApiResponse<ResourceLandingDto> localVarResponse = await GetResourceLandingAsyncWithHttpInfo(userId, countryName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Resources landing page data 
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="countryName"> (optional)</param>
        /// <returns>Task of ApiResponse (ResourceLandingDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLandingDto>> GetResourceLandingAsyncWithHttpInfo (string userId = null, string countryName = null)
        {

            var localVarPath = "/catalog/resources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (countryName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryName", countryName)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResourceLanding", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLandingDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLandingDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLandingDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partNumber"> (optional)</param>
        /// <returns>SeoNameDto</returns>
        public SeoNameDto GetSEOName (string partNumber = null)
        {
             ApiResponse<SeoNameDto> localVarResponse = GetSEONameWithHttpInfo(partNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partNumber"> (optional)</param>
        /// <returns>ApiResponse of SeoNameDto</returns>
        public ApiResponse< SeoNameDto > GetSEONameWithHttpInfo (string partNumber = null)
        {

            var localVarPath = "/catalog/seoName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (partNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "partNumber", partNumber)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSEOName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SeoNameDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SeoNameDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SeoNameDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partNumber"> (optional)</param>
        /// <returns>Task of SeoNameDto</returns>
        public async System.Threading.Tasks.Task<SeoNameDto> GetSEONameAsync (string partNumber = null)
        {
             ApiResponse<SeoNameDto> localVarResponse = await GetSEONameAsyncWithHttpInfo(partNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (SeoNameDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SeoNameDto>> GetSEONameAsyncWithHttpInfo (string partNumber = null)
        {

            var localVarPath = "/catalog/seoName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (partNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "partNumber", partNumber)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSEOName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SeoNameDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SeoNameDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SeoNameDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="countryCode"> (optional)</param>
        /// <param name="companyCode"> (optional)</param>
        /// <param name="isDealerUser"> (optional)</param>
        /// <returns>SuggestedCategoryContentDto</returns>
        public SuggestedCategoryContentDto GetSuggestedCategories (SuggestedCategoryContentDto body, string countryCode = null, string companyCode = null, bool? isDealerUser = null)
        {
             ApiResponse<SuggestedCategoryContentDto> localVarResponse = GetSuggestedCategoriesWithHttpInfo(body, countryCode, companyCode, isDealerUser);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="countryCode"> (optional)</param>
        /// <param name="companyCode"> (optional)</param>
        /// <param name="isDealerUser"> (optional)</param>
        /// <returns>ApiResponse of SuggestedCategoryContentDto</returns>
        public ApiResponse< SuggestedCategoryContentDto > GetSuggestedCategoriesWithHttpInfo (SuggestedCategoryContentDto body, string countryCode = null, string companyCode = null, bool? isDealerUser = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CatalogApi->GetSuggestedCategories");

            var localVarPath = "/catalog/suggestedCategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryCode", countryCode)); // query parameter
            if (companyCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "companyCode", companyCode)); // query parameter
            if (isDealerUser != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isDealerUser", isDealerUser)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSuggestedCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestedCategoryContentDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestedCategoryContentDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestedCategoryContentDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="countryCode"> (optional)</param>
        /// <param name="companyCode"> (optional)</param>
        /// <param name="isDealerUser"> (optional)</param>
        /// <returns>Task of SuggestedCategoryContentDto</returns>
        public async System.Threading.Tasks.Task<SuggestedCategoryContentDto> GetSuggestedCategoriesAsync (SuggestedCategoryContentDto body, string countryCode = null, string companyCode = null, bool? isDealerUser = null)
        {
             ApiResponse<SuggestedCategoryContentDto> localVarResponse = await GetSuggestedCategoriesAsyncWithHttpInfo(body, countryCode, companyCode, isDealerUser);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="countryCode"> (optional)</param>
        /// <param name="companyCode"> (optional)</param>
        /// <param name="isDealerUser"> (optional)</param>
        /// <returns>Task of ApiResponse (SuggestedCategoryContentDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuggestedCategoryContentDto>> GetSuggestedCategoriesAsyncWithHttpInfo (SuggestedCategoryContentDto body, string countryCode = null, string companyCode = null, bool? isDealerUser = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CatalogApi->GetSuggestedCategories");

            var localVarPath = "/catalog/suggestedCategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryCode", countryCode)); // query parameter
            if (companyCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "companyCode", companyCode)); // query parameter
            if (isDealerUser != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isDealerUser", isDealerUser)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSuggestedCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestedCategoryContentDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestedCategoryContentDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestedCategoryContentDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="countryCode"> (optional)</param>
        /// <param name="companyCode"> (optional)</param>
        /// <param name="isDealerUser"> (optional)</param>
        /// <returns>SuggestedProductsDetails</returns>
        public SuggestedProductsDetails GetSuggestedProducts (SuggestedProductsDetails body, string countryCode = null, string companyCode = null, bool? isDealerUser = null)
        {
             ApiResponse<SuggestedProductsDetails> localVarResponse = GetSuggestedProductsWithHttpInfo(body, countryCode, companyCode, isDealerUser);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="countryCode"> (optional)</param>
        /// <param name="companyCode"> (optional)</param>
        /// <param name="isDealerUser"> (optional)</param>
        /// <returns>ApiResponse of SuggestedProductsDetails</returns>
        public ApiResponse< SuggestedProductsDetails > GetSuggestedProductsWithHttpInfo (SuggestedProductsDetails body, string countryCode = null, string companyCode = null, bool? isDealerUser = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CatalogApi->GetSuggestedProducts");

            var localVarPath = "/catalog/suggestedProducts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryCode", countryCode)); // query parameter
            if (companyCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "companyCode", companyCode)); // query parameter
            if (isDealerUser != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isDealerUser", isDealerUser)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSuggestedProducts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestedProductsDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestedProductsDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestedProductsDetails)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="countryCode"> (optional)</param>
        /// <param name="companyCode"> (optional)</param>
        /// <param name="isDealerUser"> (optional)</param>
        /// <returns>Task of SuggestedProductsDetails</returns>
        public async System.Threading.Tasks.Task<SuggestedProductsDetails> GetSuggestedProductsAsync (SuggestedProductsDetails body, string countryCode = null, string companyCode = null, bool? isDealerUser = null)
        {
             ApiResponse<SuggestedProductsDetails> localVarResponse = await GetSuggestedProductsAsyncWithHttpInfo(body, countryCode, companyCode, isDealerUser);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="countryCode"> (optional)</param>
        /// <param name="companyCode"> (optional)</param>
        /// <param name="isDealerUser"> (optional)</param>
        /// <returns>Task of ApiResponse (SuggestedProductsDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuggestedProductsDetails>> GetSuggestedProductsAsyncWithHttpInfo (SuggestedProductsDetails body, string countryCode = null, string companyCode = null, bool? isDealerUser = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CatalogApi->GetSuggestedProducts");

            var localVarPath = "/catalog/suggestedProducts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryCode", countryCode)); // query parameter
            if (companyCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "companyCode", companyCode)); // query parameter
            if (isDealerUser != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isDealerUser", isDealerUser)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSuggestedProducts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestedProductsDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestedProductsDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestedProductsDetails)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partNumber"></param>
        /// <returns>ProductCompareDto</returns>
        public ProductCompareDto ProductCompareDetails (string partNumber)
        {
             ApiResponse<ProductCompareDto> localVarResponse = ProductCompareDetailsWithHttpInfo(partNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partNumber"></param>
        /// <returns>ApiResponse of ProductCompareDto</returns>
        public ApiResponse< ProductCompareDto > ProductCompareDetailsWithHttpInfo (string partNumber)
        {
            // verify the required parameter 'partNumber' is set
            if (partNumber == null)
                throw new ApiException(400, "Missing required parameter 'partNumber' when calling CatalogApi->ProductCompareDetails");

            var localVarPath = "/catalog/productComparison/{partNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (partNumber != null) localVarPathParams.Add("partNumber", Configuration.ApiClient.ParameterToString(partNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductCompareDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductCompareDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductCompareDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductCompareDto)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partNumber"></param>
        /// <returns>Task of ProductCompareDto</returns>
        public async System.Threading.Tasks.Task<ProductCompareDto> ProductCompareDetailsAsync (string partNumber)
        {
             ApiResponse<ProductCompareDto> localVarResponse = await ProductCompareDetailsAsyncWithHttpInfo(partNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pki.eBusiness.ErpApi.DataAccess.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partNumber"></param>
        /// <returns>Task of ApiResponse (ProductCompareDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductCompareDto>> ProductCompareDetailsAsyncWithHttpInfo (string partNumber)
        {
            // verify the required parameter 'partNumber' is set
            if (partNumber == null)
                throw new ApiException(400, "Missing required parameter 'partNumber' when calling CatalogApi->ProductCompareDetails");

            var localVarPath = "/catalog/productComparison/{partNumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (partNumber != null) localVarPathParams.Add("partNumber", Configuration.ApiClient.ParameterToString(partNumber)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductCompareDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductCompareDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductCompareDto) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductCompareDto)));
        }

    }
}
