/* 
 * eCommerce
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Pki.eBusiness.ErpApi.DataAccess.ErpApi.Model
{
    /// <summary>
    /// PartnerLookupRequestRoot
    /// </summary>
    
    public partial class PartnerLookupRequestRoot :  IEquatable<PartnerLookupRequestRoot>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PartnerLookupRequestRoot" /> class.
        /// </summary>
        /// <param name="DISTR_CHAN">DISTR_CHAN.</param>
        /// <param name="DIVISION">DIVISION.</param>
        /// <param name="LASTNAME">LASTNAME.</param>
        /// <param name="PARTNER_IN">PARTNER_IN.</param>
        /// <param name="PARTNER_ROLE_IN">PARTNER_ROLE_IN.</param>
        /// <param name="SALESORG">SALESORG.</param>
        /// <param name="PARTNER_ROLE_OUT">PARTNER_ROLE_OUT.</param>
        public PartnerLookupRequestRoot(string DISTR_CHAN = default(string), string DIVISION = default(string), string LASTNAME = default(string), string PARTNER_IN = default(string), string PARTNER_ROLE_IN = default(string), string SALESORG = default(string), string PARTNER_ROLE_OUT = default(string))
        {
            this.DISTR_CHAN = DISTR_CHAN;
            this.DIVISION = DIVISION;
            this.LASTNAME = LASTNAME;
            this.PARTNER_IN = PARTNER_IN;
            this.PARTNER_ROLE_IN = PARTNER_ROLE_IN;
            this.SALESORG = SALESORG;
            this.PARTNER_ROLE_OUT = PARTNER_ROLE_OUT;
        }
        
        /// <summary>
        /// Gets or Sets DISTR_CHAN
        /// </summary>
        [DataMember(Name="DISTR_CHAN", EmitDefaultValue=false)]
        public string DISTR_CHAN { get; set; }

        /// <summary>
        /// Gets or Sets DIVISION
        /// </summary>
        [DataMember(Name="DIVISION", EmitDefaultValue=false)]
        public string DIVISION { get; set; }

        /// <summary>
        /// Gets or Sets LASTNAME
        /// </summary>
        [DataMember(Name="LASTNAME", EmitDefaultValue=false)]
        public string LASTNAME { get; set; }

        /// <summary>
        /// Gets or Sets PARTNER_IN
        /// </summary>
        [DataMember(Name="PARTNER_IN", EmitDefaultValue=false)]
        public string PARTNER_IN { get; set; }

        /// <summary>
        /// Gets or Sets PARTNER_ROLE_IN
        /// </summary>
        [DataMember(Name="PARTNER_ROLE_IN", EmitDefaultValue=false)]
        public string PARTNER_ROLE_IN { get; set; }

        /// <summary>
        /// Gets or Sets SALESORG
        /// </summary>
        [DataMember(Name="SALESORG", EmitDefaultValue=false)]
        public string SALESORG { get; set; }

        /// <summary>
        /// Gets or Sets PARTNER_ROLE_OUT
        /// </summary>
        [DataMember(Name="PARTNER_ROLE_OUT", EmitDefaultValue=false)]
        public string PARTNER_ROLE_OUT { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PartnerLookupRequestRoot {\n");
            sb.Append("  DISTR_CHAN: ").Append(DISTR_CHAN).Append("\n");
            sb.Append("  DIVISION: ").Append(DIVISION).Append("\n");
            sb.Append("  LASTNAME: ").Append(LASTNAME).Append("\n");
            sb.Append("  PARTNER_IN: ").Append(PARTNER_IN).Append("\n");
            sb.Append("  PARTNER_ROLE_IN: ").Append(PARTNER_ROLE_IN).Append("\n");
            sb.Append("  SALESORG: ").Append(SALESORG).Append("\n");
            sb.Append("  PARTNER_ROLE_OUT: ").Append(PARTNER_ROLE_OUT).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PartnerLookupRequestRoot);
        }

        /// <summary>
        /// Returns true if PartnerLookupRequestRoot instances are equal
        /// </summary>
        /// <param name="input">Instance of PartnerLookupRequestRoot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PartnerLookupRequestRoot input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DISTR_CHAN == input.DISTR_CHAN ||
                    (this.DISTR_CHAN != null &&
                    this.DISTR_CHAN.Equals(input.DISTR_CHAN))
                ) && 
                (
                    this.DIVISION == input.DIVISION ||
                    (this.DIVISION != null &&
                    this.DIVISION.Equals(input.DIVISION))
                ) && 
                (
                    this.LASTNAME == input.LASTNAME ||
                    (this.LASTNAME != null &&
                    this.LASTNAME.Equals(input.LASTNAME))
                ) && 
                (
                    this.PARTNER_IN == input.PARTNER_IN ||
                    (this.PARTNER_IN != null &&
                    this.PARTNER_IN.Equals(input.PARTNER_IN))
                ) && 
                (
                    this.PARTNER_ROLE_IN == input.PARTNER_ROLE_IN ||
                    (this.PARTNER_ROLE_IN != null &&
                    this.PARTNER_ROLE_IN.Equals(input.PARTNER_ROLE_IN))
                ) && 
                (
                    this.SALESORG == input.SALESORG ||
                    (this.SALESORG != null &&
                    this.SALESORG.Equals(input.SALESORG))
                ) && 
                (
                    this.PARTNER_ROLE_OUT == input.PARTNER_ROLE_OUT ||
                    (this.PARTNER_ROLE_OUT != null &&
                    this.PARTNER_ROLE_OUT.Equals(input.PARTNER_ROLE_OUT))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DISTR_CHAN != null)
                    hashCode = hashCode * 59 + this.DISTR_CHAN.GetHashCode();
                if (this.DIVISION != null)
                    hashCode = hashCode * 59 + this.DIVISION.GetHashCode();
                if (this.LASTNAME != null)
                    hashCode = hashCode * 59 + this.LASTNAME.GetHashCode();
                if (this.PARTNER_IN != null)
                    hashCode = hashCode * 59 + this.PARTNER_IN.GetHashCode();
                if (this.PARTNER_ROLE_IN != null)
                    hashCode = hashCode * 59 + this.PARTNER_ROLE_IN.GetHashCode();
                if (this.SALESORG != null)
                    hashCode = hashCode * 59 + this.SALESORG.GetHashCode();
                if (this.PARTNER_ROLE_OUT != null)
                    hashCode = hashCode * 59 + this.PARTNER_ROLE_OUT.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
