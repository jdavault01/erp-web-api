/* 
 * eCommerce
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Pki.eBusiness.ErpApi.DataAccess.ErpApi.Model
{
    /// <summary>
    /// SimulateOrderResponseRootORDERCONDITIONEX
    /// </summary>
    
    public partial class SimulateOrderResponseRootORDERCONDITIONEX :  IEquatable<SimulateOrderResponseRootORDERCONDITIONEX>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SimulateOrderResponseRootORDERCONDITIONEX" /> class.
        /// </summary>
        /// <param name="ITM_NUMBER">ITM_NUMBER.</param>
        /// <param name="COND_ST_NO">COND_ST_NO.</param>
        /// <param name="COND_COUNT">COND_COUNT.</param>
        /// <param name="COND_TYPE">COND_TYPE.</param>
        /// <param name="COND_VALUE">COND_VALUE.</param>
        /// <param name="CURRENCY">CURRENCY.</param>
        /// <param name="COND_UNIT">COND_UNIT.</param>
        /// <param name="COND_P_UNT">COND_P_UNT.</param>
        /// <param name="CURR_ISO">CURR_ISO.</param>
        /// <param name="CD_UNT_ISO">CD_UNT_ISO.</param>
        /// <param name="REFOBJTYPE">REFOBJTYPE.</param>
        /// <param name="REFOBJKEY">REFOBJKEY.</param>
        /// <param name="REFLOGSYS">REFLOGSYS.</param>
        /// <param name="APPLICATIO">APPLICATIO.</param>
        /// <param name="CONPRICDAT">CONPRICDAT.</param>
        /// <param name="CALCTYPCON">CALCTYPCON.</param>
        /// <param name="CONBASEVAL">CONBASEVAL.</param>
        /// <param name="CONEXCHRAT">CONEXCHRAT.</param>
        /// <param name="NUMCONVERT">NUMCONVERT.</param>
        /// <param name="DENOMINATO">DENOMINATO.</param>
        /// <param name="CONDTYPE">CONDTYPE.</param>
        /// <param name="STAT_CON">STAT_CON.</param>
        /// <param name="SCALETYPE">SCALETYPE.</param>
        /// <param name="ACCRUALS">ACCRUALS.</param>
        /// <param name="CONINVOLST">CONINVOLST.</param>
        /// <param name="CONDORIGIN">CONDORIGIN.</param>
        /// <param name="GROUPCOND">GROUPCOND.</param>
        /// <param name="COND_UPDAT">COND_UPDAT.</param>
        /// <param name="ACCESS_SEQ">ACCESS_SEQ.</param>
        /// <param name="CONDCOUNT">CONDCOUNT.</param>
        /// <param name="ROUNDOFFDI">ROUNDOFFDI.</param>
        /// <param name="CONDVALUE">CONDVALUE.</param>
        /// <param name="CURRENCY2">CURRENCY2.</param>
        /// <param name="CURRISO2">CURRISO2.</param>
        /// <param name="CONDCNTRL">CONDCNTRL.</param>
        /// <param name="CONDISACTI">CONDISACTI.</param>
        /// <param name="CONDCLASS">CONDCLASS.</param>
        /// <param name="FACTBASVAL">FACTBASVAL.</param>
        /// <param name="SCALEBASIN">SCALEBASIN.</param>
        /// <param name="SCALBASVAL">SCALBASVAL.</param>
        /// <param name="UNITMEASUR">UNITMEASUR.</param>
        /// <param name="ISO_UNIT">ISO_UNIT.</param>
        /// <param name="CURRENCKEY">CURRENCKEY.</param>
        /// <param name="CURRENISO">CURRENISO.</param>
        /// <param name="CONDINCOMP">CONDINCOMP.</param>
        /// <param name="CONDCONFIG">CONDCONFIG.</param>
        /// <param name="CONDCHAMAN">CONDCHAMAN.</param>
        /// <param name="COND_NO">COND_NO.</param>
        /// <param name="TAX_CODE">TAX_CODE.</param>
        /// <param name="VARCOND">VARCOND.</param>
        /// <param name="ACCOUNTKEY">ACCOUNTKEY.</param>
        /// <param name="ACCOUNT_KE">ACCOUNT_KE.</param>
        /// <param name="WT_WITHCD">WT_WITHCD.</param>
        /// <param name="STRUCTCOND">STRUCTCOND.</param>
        /// <param name="FACTCONBAS">FACTCONBAS.</param>
        /// <param name="CONDCOINHD">CONDCOINHD.</param>
        public SimulateOrderResponseRootORDERCONDITIONEX(string ITM_NUMBER = default(string), string COND_ST_NO = default(string), string COND_COUNT = default(string), string COND_TYPE = default(string), string COND_VALUE = default(string), string CURRENCY = default(string), string COND_UNIT = default(string), string COND_P_UNT = default(string), string CURR_ISO = default(string), string CD_UNT_ISO = default(string), string REFOBJTYPE = default(string), string REFOBJKEY = default(string), string REFLOGSYS = default(string), string APPLICATIO = default(string), string CONPRICDAT = default(string), string CALCTYPCON = default(string), string CONBASEVAL = default(string), string CONEXCHRAT = default(string), string NUMCONVERT = default(string), string DENOMINATO = default(string), string CONDTYPE = default(string), string STAT_CON = default(string), string SCALETYPE = default(string), string ACCRUALS = default(string), string CONINVOLST = default(string), string CONDORIGIN = default(string), string GROUPCOND = default(string), string COND_UPDAT = default(string), string ACCESS_SEQ = default(string), string CONDCOUNT = default(string), string ROUNDOFFDI = default(string), string CONDVALUE = default(string), string CURRENCY2 = default(string), string CURRISO2 = default(string), string CONDCNTRL = default(string), string CONDISACTI = default(string), string CONDCLASS = default(string), string FACTBASVAL = default(string), string SCALEBASIN = default(string), string SCALBASVAL = default(string), string UNITMEASUR = default(string), string ISO_UNIT = default(string), string CURRENCKEY = default(string), string CURRENISO = default(string), string CONDINCOMP = default(string), string CONDCONFIG = default(string), string CONDCHAMAN = default(string), string COND_NO = default(string), string TAX_CODE = default(string), string VARCOND = default(string), string ACCOUNTKEY = default(string), string ACCOUNT_KE = default(string), string WT_WITHCD = default(string), string STRUCTCOND = default(string), string FACTCONBAS = default(string), string CONDCOINHD = default(string))
        {
            this.ITM_NUMBER = ITM_NUMBER;
            this.COND_ST_NO = COND_ST_NO;
            this.COND_COUNT = COND_COUNT;
            this.COND_TYPE = COND_TYPE;
            this.COND_VALUE = COND_VALUE;
            this.CURRENCY = CURRENCY;
            this.COND_UNIT = COND_UNIT;
            this.COND_P_UNT = COND_P_UNT;
            this.CURR_ISO = CURR_ISO;
            this.CD_UNT_ISO = CD_UNT_ISO;
            this.REFOBJTYPE = REFOBJTYPE;
            this.REFOBJKEY = REFOBJKEY;
            this.REFLOGSYS = REFLOGSYS;
            this.APPLICATIO = APPLICATIO;
            this.CONPRICDAT = CONPRICDAT;
            this.CALCTYPCON = CALCTYPCON;
            this.CONBASEVAL = CONBASEVAL;
            this.CONEXCHRAT = CONEXCHRAT;
            this.NUMCONVERT = NUMCONVERT;
            this.DENOMINATO = DENOMINATO;
            this.CONDTYPE = CONDTYPE;
            this.STAT_CON = STAT_CON;
            this.SCALETYPE = SCALETYPE;
            this.ACCRUALS = ACCRUALS;
            this.CONINVOLST = CONINVOLST;
            this.CONDORIGIN = CONDORIGIN;
            this.GROUPCOND = GROUPCOND;
            this.COND_UPDAT = COND_UPDAT;
            this.ACCESS_SEQ = ACCESS_SEQ;
            this.CONDCOUNT = CONDCOUNT;
            this.ROUNDOFFDI = ROUNDOFFDI;
            this.CONDVALUE = CONDVALUE;
            this.CURRENCY2 = CURRENCY2;
            this.CURRISO2 = CURRISO2;
            this.CONDCNTRL = CONDCNTRL;
            this.CONDISACTI = CONDISACTI;
            this.CONDCLASS = CONDCLASS;
            this.FACTBASVAL = FACTBASVAL;
            this.SCALEBASIN = SCALEBASIN;
            this.SCALBASVAL = SCALBASVAL;
            this.UNITMEASUR = UNITMEASUR;
            this.ISO_UNIT = ISO_UNIT;
            this.CURRENCKEY = CURRENCKEY;
            this.CURRENISO = CURRENISO;
            this.CONDINCOMP = CONDINCOMP;
            this.CONDCONFIG = CONDCONFIG;
            this.CONDCHAMAN = CONDCHAMAN;
            this.COND_NO = COND_NO;
            this.TAX_CODE = TAX_CODE;
            this.VARCOND = VARCOND;
            this.ACCOUNTKEY = ACCOUNTKEY;
            this.ACCOUNT_KE = ACCOUNT_KE;
            this.WT_WITHCD = WT_WITHCD;
            this.STRUCTCOND = STRUCTCOND;
            this.FACTCONBAS = FACTCONBAS;
            this.CONDCOINHD = CONDCOINHD;
        }
        
        /// <summary>
        /// Gets or Sets ITM_NUMBER
        /// </summary>
        [DataMember(Name="ITM_NUMBER", EmitDefaultValue=false)]
        public string ITM_NUMBER { get; set; }

        /// <summary>
        /// Gets or Sets COND_ST_NO
        /// </summary>
        [DataMember(Name="COND_ST_NO", EmitDefaultValue=false)]
        public string COND_ST_NO { get; set; }

        /// <summary>
        /// Gets or Sets COND_COUNT
        /// </summary>
        [DataMember(Name="COND_COUNT", EmitDefaultValue=false)]
        public string COND_COUNT { get; set; }

        /// <summary>
        /// Gets or Sets COND_TYPE
        /// </summary>
        [DataMember(Name="COND_TYPE", EmitDefaultValue=false)]
        public string COND_TYPE { get; set; }

        /// <summary>
        /// Gets or Sets COND_VALUE
        /// </summary>
        [DataMember(Name="COND_VALUE", EmitDefaultValue=false)]
        public string COND_VALUE { get; set; }

        /// <summary>
        /// Gets or Sets CURRENCY
        /// </summary>
        [DataMember(Name="CURRENCY", EmitDefaultValue=false)]
        public string CURRENCY { get; set; }

        /// <summary>
        /// Gets or Sets COND_UNIT
        /// </summary>
        [DataMember(Name="COND_UNIT", EmitDefaultValue=false)]
        public string COND_UNIT { get; set; }

        /// <summary>
        /// Gets or Sets COND_P_UNT
        /// </summary>
        [DataMember(Name="COND_P_UNT", EmitDefaultValue=false)]
        public string COND_P_UNT { get; set; }

        /// <summary>
        /// Gets or Sets CURR_ISO
        /// </summary>
        [DataMember(Name="CURR_ISO", EmitDefaultValue=false)]
        public string CURR_ISO { get; set; }

        /// <summary>
        /// Gets or Sets CD_UNT_ISO
        /// </summary>
        [DataMember(Name="CD_UNT_ISO", EmitDefaultValue=false)]
        public string CD_UNT_ISO { get; set; }

        /// <summary>
        /// Gets or Sets REFOBJTYPE
        /// </summary>
        [DataMember(Name="REFOBJTYPE", EmitDefaultValue=false)]
        public string REFOBJTYPE { get; set; }

        /// <summary>
        /// Gets or Sets REFOBJKEY
        /// </summary>
        [DataMember(Name="REFOBJKEY", EmitDefaultValue=false)]
        public string REFOBJKEY { get; set; }

        /// <summary>
        /// Gets or Sets REFLOGSYS
        /// </summary>
        [DataMember(Name="REFLOGSYS", EmitDefaultValue=false)]
        public string REFLOGSYS { get; set; }

        /// <summary>
        /// Gets or Sets APPLICATIO
        /// </summary>
        [DataMember(Name="APPLICATIO", EmitDefaultValue=false)]
        public string APPLICATIO { get; set; }

        /// <summary>
        /// Gets or Sets CONPRICDAT
        /// </summary>
        [DataMember(Name="CONPRICDAT", EmitDefaultValue=false)]
        public string CONPRICDAT { get; set; }

        /// <summary>
        /// Gets or Sets CALCTYPCON
        /// </summary>
        [DataMember(Name="CALCTYPCON", EmitDefaultValue=false)]
        public string CALCTYPCON { get; set; }

        /// <summary>
        /// Gets or Sets CONBASEVAL
        /// </summary>
        [DataMember(Name="CONBASEVAL", EmitDefaultValue=false)]
        public string CONBASEVAL { get; set; }

        /// <summary>
        /// Gets or Sets CONEXCHRAT
        /// </summary>
        [DataMember(Name="CONEXCHRAT", EmitDefaultValue=false)]
        public string CONEXCHRAT { get; set; }

        /// <summary>
        /// Gets or Sets NUMCONVERT
        /// </summary>
        [DataMember(Name="NUMCONVERT", EmitDefaultValue=false)]
        public string NUMCONVERT { get; set; }

        /// <summary>
        /// Gets or Sets DENOMINATO
        /// </summary>
        [DataMember(Name="DENOMINATO", EmitDefaultValue=false)]
        public string DENOMINATO { get; set; }

        /// <summary>
        /// Gets or Sets CONDTYPE
        /// </summary>
        [DataMember(Name="CONDTYPE", EmitDefaultValue=false)]
        public string CONDTYPE { get; set; }

        /// <summary>
        /// Gets or Sets STAT_CON
        /// </summary>
        [DataMember(Name="STAT_CON", EmitDefaultValue=false)]
        public string STAT_CON { get; set; }

        /// <summary>
        /// Gets or Sets SCALETYPE
        /// </summary>
        [DataMember(Name="SCALETYPE", EmitDefaultValue=false)]
        public string SCALETYPE { get; set; }

        /// <summary>
        /// Gets or Sets ACCRUALS
        /// </summary>
        [DataMember(Name="ACCRUALS", EmitDefaultValue=false)]
        public string ACCRUALS { get; set; }

        /// <summary>
        /// Gets or Sets CONINVOLST
        /// </summary>
        [DataMember(Name="CONINVOLST", EmitDefaultValue=false)]
        public string CONINVOLST { get; set; }

        /// <summary>
        /// Gets or Sets CONDORIGIN
        /// </summary>
        [DataMember(Name="CONDORIGIN", EmitDefaultValue=false)]
        public string CONDORIGIN { get; set; }

        /// <summary>
        /// Gets or Sets GROUPCOND
        /// </summary>
        [DataMember(Name="GROUPCOND", EmitDefaultValue=false)]
        public string GROUPCOND { get; set; }

        /// <summary>
        /// Gets or Sets COND_UPDAT
        /// </summary>
        [DataMember(Name="COND_UPDAT", EmitDefaultValue=false)]
        public string COND_UPDAT { get; set; }

        /// <summary>
        /// Gets or Sets ACCESS_SEQ
        /// </summary>
        [DataMember(Name="ACCESS_SEQ", EmitDefaultValue=false)]
        public string ACCESS_SEQ { get; set; }

        /// <summary>
        /// Gets or Sets CONDCOUNT
        /// </summary>
        [DataMember(Name="CONDCOUNT", EmitDefaultValue=false)]
        public string CONDCOUNT { get; set; }

        /// <summary>
        /// Gets or Sets ROUNDOFFDI
        /// </summary>
        [DataMember(Name="ROUNDOFFDI", EmitDefaultValue=false)]
        public string ROUNDOFFDI { get; set; }

        /// <summary>
        /// Gets or Sets CONDVALUE
        /// </summary>
        [DataMember(Name="CONDVALUE", EmitDefaultValue=false)]
        public string CONDVALUE { get; set; }

        /// <summary>
        /// Gets or Sets CURRENCY2
        /// </summary>
        [DataMember(Name="CURRENCY_2", EmitDefaultValue=false)]
        public string CURRENCY2 { get; set; }

        /// <summary>
        /// Gets or Sets CURRISO2
        /// </summary>
        [DataMember(Name="CURR_ISO_2", EmitDefaultValue=false)]
        public string CURRISO2 { get; set; }

        /// <summary>
        /// Gets or Sets CONDCNTRL
        /// </summary>
        [DataMember(Name="CONDCNTRL", EmitDefaultValue=false)]
        public string CONDCNTRL { get; set; }

        /// <summary>
        /// Gets or Sets CONDISACTI
        /// </summary>
        [DataMember(Name="CONDISACTI", EmitDefaultValue=false)]
        public string CONDISACTI { get; set; }

        /// <summary>
        /// Gets or Sets CONDCLASS
        /// </summary>
        [DataMember(Name="CONDCLASS", EmitDefaultValue=false)]
        public string CONDCLASS { get; set; }

        /// <summary>
        /// Gets or Sets FACTBASVAL
        /// </summary>
        [DataMember(Name="FACTBASVAL", EmitDefaultValue=false)]
        public string FACTBASVAL { get; set; }

        /// <summary>
        /// Gets or Sets SCALEBASIN
        /// </summary>
        [DataMember(Name="SCALEBASIN", EmitDefaultValue=false)]
        public string SCALEBASIN { get; set; }

        /// <summary>
        /// Gets or Sets SCALBASVAL
        /// </summary>
        [DataMember(Name="SCALBASVAL", EmitDefaultValue=false)]
        public string SCALBASVAL { get; set; }

        /// <summary>
        /// Gets or Sets UNITMEASUR
        /// </summary>
        [DataMember(Name="UNITMEASUR", EmitDefaultValue=false)]
        public string UNITMEASUR { get; set; }

        /// <summary>
        /// Gets or Sets ISO_UNIT
        /// </summary>
        [DataMember(Name="ISO_UNIT", EmitDefaultValue=false)]
        public string ISO_UNIT { get; set; }

        /// <summary>
        /// Gets or Sets CURRENCKEY
        /// </summary>
        [DataMember(Name="CURRENCKEY", EmitDefaultValue=false)]
        public string CURRENCKEY { get; set; }

        /// <summary>
        /// Gets or Sets CURRENISO
        /// </summary>
        [DataMember(Name="CURRENISO", EmitDefaultValue=false)]
        public string CURRENISO { get; set; }

        /// <summary>
        /// Gets or Sets CONDINCOMP
        /// </summary>
        [DataMember(Name="CONDINCOMP", EmitDefaultValue=false)]
        public string CONDINCOMP { get; set; }

        /// <summary>
        /// Gets or Sets CONDCONFIG
        /// </summary>
        [DataMember(Name="CONDCONFIG", EmitDefaultValue=false)]
        public string CONDCONFIG { get; set; }

        /// <summary>
        /// Gets or Sets CONDCHAMAN
        /// </summary>
        [DataMember(Name="CONDCHAMAN", EmitDefaultValue=false)]
        public string CONDCHAMAN { get; set; }

        /// <summary>
        /// Gets or Sets COND_NO
        /// </summary>
        [DataMember(Name="COND_NO", EmitDefaultValue=false)]
        public string COND_NO { get; set; }

        /// <summary>
        /// Gets or Sets TAX_CODE
        /// </summary>
        [DataMember(Name="TAX_CODE", EmitDefaultValue=false)]
        public string TAX_CODE { get; set; }

        /// <summary>
        /// Gets or Sets VARCOND
        /// </summary>
        [DataMember(Name="VARCOND", EmitDefaultValue=false)]
        public string VARCOND { get; set; }

        /// <summary>
        /// Gets or Sets ACCOUNTKEY
        /// </summary>
        [DataMember(Name="ACCOUNTKEY", EmitDefaultValue=false)]
        public string ACCOUNTKEY { get; set; }

        /// <summary>
        /// Gets or Sets ACCOUNT_KE
        /// </summary>
        [DataMember(Name="ACCOUNT_KE", EmitDefaultValue=false)]
        public string ACCOUNT_KE { get; set; }

        /// <summary>
        /// Gets or Sets WT_WITHCD
        /// </summary>
        [DataMember(Name="WT_WITHCD", EmitDefaultValue=false)]
        public string WT_WITHCD { get; set; }

        /// <summary>
        /// Gets or Sets STRUCTCOND
        /// </summary>
        [DataMember(Name="STRUCTCOND", EmitDefaultValue=false)]
        public string STRUCTCOND { get; set; }

        /// <summary>
        /// Gets or Sets FACTCONBAS
        /// </summary>
        [DataMember(Name="FACTCONBAS", EmitDefaultValue=false)]
        public string FACTCONBAS { get; set; }

        /// <summary>
        /// Gets or Sets CONDCOINHD
        /// </summary>
        [DataMember(Name="CONDCOINHD", EmitDefaultValue=false)]
        public string CONDCOINHD { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SimulateOrderResponseRootORDERCONDITIONEX {\n");
            sb.Append("  ITM_NUMBER: ").Append(ITM_NUMBER).Append("\n");
            sb.Append("  COND_ST_NO: ").Append(COND_ST_NO).Append("\n");
            sb.Append("  COND_COUNT: ").Append(COND_COUNT).Append("\n");
            sb.Append("  COND_TYPE: ").Append(COND_TYPE).Append("\n");
            sb.Append("  COND_VALUE: ").Append(COND_VALUE).Append("\n");
            sb.Append("  CURRENCY: ").Append(CURRENCY).Append("\n");
            sb.Append("  COND_UNIT: ").Append(COND_UNIT).Append("\n");
            sb.Append("  COND_P_UNT: ").Append(COND_P_UNT).Append("\n");
            sb.Append("  CURR_ISO: ").Append(CURR_ISO).Append("\n");
            sb.Append("  CD_UNT_ISO: ").Append(CD_UNT_ISO).Append("\n");
            sb.Append("  REFOBJTYPE: ").Append(REFOBJTYPE).Append("\n");
            sb.Append("  REFOBJKEY: ").Append(REFOBJKEY).Append("\n");
            sb.Append("  REFLOGSYS: ").Append(REFLOGSYS).Append("\n");
            sb.Append("  APPLICATIO: ").Append(APPLICATIO).Append("\n");
            sb.Append("  CONPRICDAT: ").Append(CONPRICDAT).Append("\n");
            sb.Append("  CALCTYPCON: ").Append(CALCTYPCON).Append("\n");
            sb.Append("  CONBASEVAL: ").Append(CONBASEVAL).Append("\n");
            sb.Append("  CONEXCHRAT: ").Append(CONEXCHRAT).Append("\n");
            sb.Append("  NUMCONVERT: ").Append(NUMCONVERT).Append("\n");
            sb.Append("  DENOMINATO: ").Append(DENOMINATO).Append("\n");
            sb.Append("  CONDTYPE: ").Append(CONDTYPE).Append("\n");
            sb.Append("  STAT_CON: ").Append(STAT_CON).Append("\n");
            sb.Append("  SCALETYPE: ").Append(SCALETYPE).Append("\n");
            sb.Append("  ACCRUALS: ").Append(ACCRUALS).Append("\n");
            sb.Append("  CONINVOLST: ").Append(CONINVOLST).Append("\n");
            sb.Append("  CONDORIGIN: ").Append(CONDORIGIN).Append("\n");
            sb.Append("  GROUPCOND: ").Append(GROUPCOND).Append("\n");
            sb.Append("  COND_UPDAT: ").Append(COND_UPDAT).Append("\n");
            sb.Append("  ACCESS_SEQ: ").Append(ACCESS_SEQ).Append("\n");
            sb.Append("  CONDCOUNT: ").Append(CONDCOUNT).Append("\n");
            sb.Append("  ROUNDOFFDI: ").Append(ROUNDOFFDI).Append("\n");
            sb.Append("  CONDVALUE: ").Append(CONDVALUE).Append("\n");
            sb.Append("  CURRENCY2: ").Append(CURRENCY2).Append("\n");
            sb.Append("  CURRISO2: ").Append(CURRISO2).Append("\n");
            sb.Append("  CONDCNTRL: ").Append(CONDCNTRL).Append("\n");
            sb.Append("  CONDISACTI: ").Append(CONDISACTI).Append("\n");
            sb.Append("  CONDCLASS: ").Append(CONDCLASS).Append("\n");
            sb.Append("  FACTBASVAL: ").Append(FACTBASVAL).Append("\n");
            sb.Append("  SCALEBASIN: ").Append(SCALEBASIN).Append("\n");
            sb.Append("  SCALBASVAL: ").Append(SCALBASVAL).Append("\n");
            sb.Append("  UNITMEASUR: ").Append(UNITMEASUR).Append("\n");
            sb.Append("  ISO_UNIT: ").Append(ISO_UNIT).Append("\n");
            sb.Append("  CURRENCKEY: ").Append(CURRENCKEY).Append("\n");
            sb.Append("  CURRENISO: ").Append(CURRENISO).Append("\n");
            sb.Append("  CONDINCOMP: ").Append(CONDINCOMP).Append("\n");
            sb.Append("  CONDCONFIG: ").Append(CONDCONFIG).Append("\n");
            sb.Append("  CONDCHAMAN: ").Append(CONDCHAMAN).Append("\n");
            sb.Append("  COND_NO: ").Append(COND_NO).Append("\n");
            sb.Append("  TAX_CODE: ").Append(TAX_CODE).Append("\n");
            sb.Append("  VARCOND: ").Append(VARCOND).Append("\n");
            sb.Append("  ACCOUNTKEY: ").Append(ACCOUNTKEY).Append("\n");
            sb.Append("  ACCOUNT_KE: ").Append(ACCOUNT_KE).Append("\n");
            sb.Append("  WT_WITHCD: ").Append(WT_WITHCD).Append("\n");
            sb.Append("  STRUCTCOND: ").Append(STRUCTCOND).Append("\n");
            sb.Append("  FACTCONBAS: ").Append(FACTCONBAS).Append("\n");
            sb.Append("  CONDCOINHD: ").Append(CONDCOINHD).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SimulateOrderResponseRootORDERCONDITIONEX);
        }

        /// <summary>
        /// Returns true if SimulateOrderResponseRootORDERCONDITIONEX instances are equal
        /// </summary>
        /// <param name="input">Instance of SimulateOrderResponseRootORDERCONDITIONEX to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimulateOrderResponseRootORDERCONDITIONEX input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ITM_NUMBER == input.ITM_NUMBER ||
                    (this.ITM_NUMBER != null &&
                    this.ITM_NUMBER.Equals(input.ITM_NUMBER))
                ) && 
                (
                    this.COND_ST_NO == input.COND_ST_NO ||
                    (this.COND_ST_NO != null &&
                    this.COND_ST_NO.Equals(input.COND_ST_NO))
                ) && 
                (
                    this.COND_COUNT == input.COND_COUNT ||
                    (this.COND_COUNT != null &&
                    this.COND_COUNT.Equals(input.COND_COUNT))
                ) && 
                (
                    this.COND_TYPE == input.COND_TYPE ||
                    (this.COND_TYPE != null &&
                    this.COND_TYPE.Equals(input.COND_TYPE))
                ) && 
                (
                    this.COND_VALUE == input.COND_VALUE ||
                    (this.COND_VALUE != null &&
                    this.COND_VALUE.Equals(input.COND_VALUE))
                ) && 
                (
                    this.CURRENCY == input.CURRENCY ||
                    (this.CURRENCY != null &&
                    this.CURRENCY.Equals(input.CURRENCY))
                ) && 
                (
                    this.COND_UNIT == input.COND_UNIT ||
                    (this.COND_UNIT != null &&
                    this.COND_UNIT.Equals(input.COND_UNIT))
                ) && 
                (
                    this.COND_P_UNT == input.COND_P_UNT ||
                    (this.COND_P_UNT != null &&
                    this.COND_P_UNT.Equals(input.COND_P_UNT))
                ) && 
                (
                    this.CURR_ISO == input.CURR_ISO ||
                    (this.CURR_ISO != null &&
                    this.CURR_ISO.Equals(input.CURR_ISO))
                ) && 
                (
                    this.CD_UNT_ISO == input.CD_UNT_ISO ||
                    (this.CD_UNT_ISO != null &&
                    this.CD_UNT_ISO.Equals(input.CD_UNT_ISO))
                ) && 
                (
                    this.REFOBJTYPE == input.REFOBJTYPE ||
                    (this.REFOBJTYPE != null &&
                    this.REFOBJTYPE.Equals(input.REFOBJTYPE))
                ) && 
                (
                    this.REFOBJKEY == input.REFOBJKEY ||
                    (this.REFOBJKEY != null &&
                    this.REFOBJKEY.Equals(input.REFOBJKEY))
                ) && 
                (
                    this.REFLOGSYS == input.REFLOGSYS ||
                    (this.REFLOGSYS != null &&
                    this.REFLOGSYS.Equals(input.REFLOGSYS))
                ) && 
                (
                    this.APPLICATIO == input.APPLICATIO ||
                    (this.APPLICATIO != null &&
                    this.APPLICATIO.Equals(input.APPLICATIO))
                ) && 
                (
                    this.CONPRICDAT == input.CONPRICDAT ||
                    (this.CONPRICDAT != null &&
                    this.CONPRICDAT.Equals(input.CONPRICDAT))
                ) && 
                (
                    this.CALCTYPCON == input.CALCTYPCON ||
                    (this.CALCTYPCON != null &&
                    this.CALCTYPCON.Equals(input.CALCTYPCON))
                ) && 
                (
                    this.CONBASEVAL == input.CONBASEVAL ||
                    (this.CONBASEVAL != null &&
                    this.CONBASEVAL.Equals(input.CONBASEVAL))
                ) && 
                (
                    this.CONEXCHRAT == input.CONEXCHRAT ||
                    (this.CONEXCHRAT != null &&
                    this.CONEXCHRAT.Equals(input.CONEXCHRAT))
                ) && 
                (
                    this.NUMCONVERT == input.NUMCONVERT ||
                    (this.NUMCONVERT != null &&
                    this.NUMCONVERT.Equals(input.NUMCONVERT))
                ) && 
                (
                    this.DENOMINATO == input.DENOMINATO ||
                    (this.DENOMINATO != null &&
                    this.DENOMINATO.Equals(input.DENOMINATO))
                ) && 
                (
                    this.CONDTYPE == input.CONDTYPE ||
                    (this.CONDTYPE != null &&
                    this.CONDTYPE.Equals(input.CONDTYPE))
                ) && 
                (
                    this.STAT_CON == input.STAT_CON ||
                    (this.STAT_CON != null &&
                    this.STAT_CON.Equals(input.STAT_CON))
                ) && 
                (
                    this.SCALETYPE == input.SCALETYPE ||
                    (this.SCALETYPE != null &&
                    this.SCALETYPE.Equals(input.SCALETYPE))
                ) && 
                (
                    this.ACCRUALS == input.ACCRUALS ||
                    (this.ACCRUALS != null &&
                    this.ACCRUALS.Equals(input.ACCRUALS))
                ) && 
                (
                    this.CONINVOLST == input.CONINVOLST ||
                    (this.CONINVOLST != null &&
                    this.CONINVOLST.Equals(input.CONINVOLST))
                ) && 
                (
                    this.CONDORIGIN == input.CONDORIGIN ||
                    (this.CONDORIGIN != null &&
                    this.CONDORIGIN.Equals(input.CONDORIGIN))
                ) && 
                (
                    this.GROUPCOND == input.GROUPCOND ||
                    (this.GROUPCOND != null &&
                    this.GROUPCOND.Equals(input.GROUPCOND))
                ) && 
                (
                    this.COND_UPDAT == input.COND_UPDAT ||
                    (this.COND_UPDAT != null &&
                    this.COND_UPDAT.Equals(input.COND_UPDAT))
                ) && 
                (
                    this.ACCESS_SEQ == input.ACCESS_SEQ ||
                    (this.ACCESS_SEQ != null &&
                    this.ACCESS_SEQ.Equals(input.ACCESS_SEQ))
                ) && 
                (
                    this.CONDCOUNT == input.CONDCOUNT ||
                    (this.CONDCOUNT != null &&
                    this.CONDCOUNT.Equals(input.CONDCOUNT))
                ) && 
                (
                    this.ROUNDOFFDI == input.ROUNDOFFDI ||
                    (this.ROUNDOFFDI != null &&
                    this.ROUNDOFFDI.Equals(input.ROUNDOFFDI))
                ) && 
                (
                    this.CONDVALUE == input.CONDVALUE ||
                    (this.CONDVALUE != null &&
                    this.CONDVALUE.Equals(input.CONDVALUE))
                ) && 
                (
                    this.CURRENCY2 == input.CURRENCY2 ||
                    (this.CURRENCY2 != null &&
                    this.CURRENCY2.Equals(input.CURRENCY2))
                ) && 
                (
                    this.CURRISO2 == input.CURRISO2 ||
                    (this.CURRISO2 != null &&
                    this.CURRISO2.Equals(input.CURRISO2))
                ) && 
                (
                    this.CONDCNTRL == input.CONDCNTRL ||
                    (this.CONDCNTRL != null &&
                    this.CONDCNTRL.Equals(input.CONDCNTRL))
                ) && 
                (
                    this.CONDISACTI == input.CONDISACTI ||
                    (this.CONDISACTI != null &&
                    this.CONDISACTI.Equals(input.CONDISACTI))
                ) && 
                (
                    this.CONDCLASS == input.CONDCLASS ||
                    (this.CONDCLASS != null &&
                    this.CONDCLASS.Equals(input.CONDCLASS))
                ) && 
                (
                    this.FACTBASVAL == input.FACTBASVAL ||
                    (this.FACTBASVAL != null &&
                    this.FACTBASVAL.Equals(input.FACTBASVAL))
                ) && 
                (
                    this.SCALEBASIN == input.SCALEBASIN ||
                    (this.SCALEBASIN != null &&
                    this.SCALEBASIN.Equals(input.SCALEBASIN))
                ) && 
                (
                    this.SCALBASVAL == input.SCALBASVAL ||
                    (this.SCALBASVAL != null &&
                    this.SCALBASVAL.Equals(input.SCALBASVAL))
                ) && 
                (
                    this.UNITMEASUR == input.UNITMEASUR ||
                    (this.UNITMEASUR != null &&
                    this.UNITMEASUR.Equals(input.UNITMEASUR))
                ) && 
                (
                    this.ISO_UNIT == input.ISO_UNIT ||
                    (this.ISO_UNIT != null &&
                    this.ISO_UNIT.Equals(input.ISO_UNIT))
                ) && 
                (
                    this.CURRENCKEY == input.CURRENCKEY ||
                    (this.CURRENCKEY != null &&
                    this.CURRENCKEY.Equals(input.CURRENCKEY))
                ) && 
                (
                    this.CURRENISO == input.CURRENISO ||
                    (this.CURRENISO != null &&
                    this.CURRENISO.Equals(input.CURRENISO))
                ) && 
                (
                    this.CONDINCOMP == input.CONDINCOMP ||
                    (this.CONDINCOMP != null &&
                    this.CONDINCOMP.Equals(input.CONDINCOMP))
                ) && 
                (
                    this.CONDCONFIG == input.CONDCONFIG ||
                    (this.CONDCONFIG != null &&
                    this.CONDCONFIG.Equals(input.CONDCONFIG))
                ) && 
                (
                    this.CONDCHAMAN == input.CONDCHAMAN ||
                    (this.CONDCHAMAN != null &&
                    this.CONDCHAMAN.Equals(input.CONDCHAMAN))
                ) && 
                (
                    this.COND_NO == input.COND_NO ||
                    (this.COND_NO != null &&
                    this.COND_NO.Equals(input.COND_NO))
                ) && 
                (
                    this.TAX_CODE == input.TAX_CODE ||
                    (this.TAX_CODE != null &&
                    this.TAX_CODE.Equals(input.TAX_CODE))
                ) && 
                (
                    this.VARCOND == input.VARCOND ||
                    (this.VARCOND != null &&
                    this.VARCOND.Equals(input.VARCOND))
                ) && 
                (
                    this.ACCOUNTKEY == input.ACCOUNTKEY ||
                    (this.ACCOUNTKEY != null &&
                    this.ACCOUNTKEY.Equals(input.ACCOUNTKEY))
                ) && 
                (
                    this.ACCOUNT_KE == input.ACCOUNT_KE ||
                    (this.ACCOUNT_KE != null &&
                    this.ACCOUNT_KE.Equals(input.ACCOUNT_KE))
                ) && 
                (
                    this.WT_WITHCD == input.WT_WITHCD ||
                    (this.WT_WITHCD != null &&
                    this.WT_WITHCD.Equals(input.WT_WITHCD))
                ) && 
                (
                    this.STRUCTCOND == input.STRUCTCOND ||
                    (this.STRUCTCOND != null &&
                    this.STRUCTCOND.Equals(input.STRUCTCOND))
                ) && 
                (
                    this.FACTCONBAS == input.FACTCONBAS ||
                    (this.FACTCONBAS != null &&
                    this.FACTCONBAS.Equals(input.FACTCONBAS))
                ) && 
                (
                    this.CONDCOINHD == input.CONDCOINHD ||
                    (this.CONDCOINHD != null &&
                    this.CONDCOINHD.Equals(input.CONDCOINHD))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ITM_NUMBER != null)
                    hashCode = hashCode * 59 + this.ITM_NUMBER.GetHashCode();
                if (this.COND_ST_NO != null)
                    hashCode = hashCode * 59 + this.COND_ST_NO.GetHashCode();
                if (this.COND_COUNT != null)
                    hashCode = hashCode * 59 + this.COND_COUNT.GetHashCode();
                if (this.COND_TYPE != null)
                    hashCode = hashCode * 59 + this.COND_TYPE.GetHashCode();
                if (this.COND_VALUE != null)
                    hashCode = hashCode * 59 + this.COND_VALUE.GetHashCode();
                if (this.CURRENCY != null)
                    hashCode = hashCode * 59 + this.CURRENCY.GetHashCode();
                if (this.COND_UNIT != null)
                    hashCode = hashCode * 59 + this.COND_UNIT.GetHashCode();
                if (this.COND_P_UNT != null)
                    hashCode = hashCode * 59 + this.COND_P_UNT.GetHashCode();
                if (this.CURR_ISO != null)
                    hashCode = hashCode * 59 + this.CURR_ISO.GetHashCode();
                if (this.CD_UNT_ISO != null)
                    hashCode = hashCode * 59 + this.CD_UNT_ISO.GetHashCode();
                if (this.REFOBJTYPE != null)
                    hashCode = hashCode * 59 + this.REFOBJTYPE.GetHashCode();
                if (this.REFOBJKEY != null)
                    hashCode = hashCode * 59 + this.REFOBJKEY.GetHashCode();
                if (this.REFLOGSYS != null)
                    hashCode = hashCode * 59 + this.REFLOGSYS.GetHashCode();
                if (this.APPLICATIO != null)
                    hashCode = hashCode * 59 + this.APPLICATIO.GetHashCode();
                if (this.CONPRICDAT != null)
                    hashCode = hashCode * 59 + this.CONPRICDAT.GetHashCode();
                if (this.CALCTYPCON != null)
                    hashCode = hashCode * 59 + this.CALCTYPCON.GetHashCode();
                if (this.CONBASEVAL != null)
                    hashCode = hashCode * 59 + this.CONBASEVAL.GetHashCode();
                if (this.CONEXCHRAT != null)
                    hashCode = hashCode * 59 + this.CONEXCHRAT.GetHashCode();
                if (this.NUMCONVERT != null)
                    hashCode = hashCode * 59 + this.NUMCONVERT.GetHashCode();
                if (this.DENOMINATO != null)
                    hashCode = hashCode * 59 + this.DENOMINATO.GetHashCode();
                if (this.CONDTYPE != null)
                    hashCode = hashCode * 59 + this.CONDTYPE.GetHashCode();
                if (this.STAT_CON != null)
                    hashCode = hashCode * 59 + this.STAT_CON.GetHashCode();
                if (this.SCALETYPE != null)
                    hashCode = hashCode * 59 + this.SCALETYPE.GetHashCode();
                if (this.ACCRUALS != null)
                    hashCode = hashCode * 59 + this.ACCRUALS.GetHashCode();
                if (this.CONINVOLST != null)
                    hashCode = hashCode * 59 + this.CONINVOLST.GetHashCode();
                if (this.CONDORIGIN != null)
                    hashCode = hashCode * 59 + this.CONDORIGIN.GetHashCode();
                if (this.GROUPCOND != null)
                    hashCode = hashCode * 59 + this.GROUPCOND.GetHashCode();
                if (this.COND_UPDAT != null)
                    hashCode = hashCode * 59 + this.COND_UPDAT.GetHashCode();
                if (this.ACCESS_SEQ != null)
                    hashCode = hashCode * 59 + this.ACCESS_SEQ.GetHashCode();
                if (this.CONDCOUNT != null)
                    hashCode = hashCode * 59 + this.CONDCOUNT.GetHashCode();
                if (this.ROUNDOFFDI != null)
                    hashCode = hashCode * 59 + this.ROUNDOFFDI.GetHashCode();
                if (this.CONDVALUE != null)
                    hashCode = hashCode * 59 + this.CONDVALUE.GetHashCode();
                if (this.CURRENCY2 != null)
                    hashCode = hashCode * 59 + this.CURRENCY2.GetHashCode();
                if (this.CURRISO2 != null)
                    hashCode = hashCode * 59 + this.CURRISO2.GetHashCode();
                if (this.CONDCNTRL != null)
                    hashCode = hashCode * 59 + this.CONDCNTRL.GetHashCode();
                if (this.CONDISACTI != null)
                    hashCode = hashCode * 59 + this.CONDISACTI.GetHashCode();
                if (this.CONDCLASS != null)
                    hashCode = hashCode * 59 + this.CONDCLASS.GetHashCode();
                if (this.FACTBASVAL != null)
                    hashCode = hashCode * 59 + this.FACTBASVAL.GetHashCode();
                if (this.SCALEBASIN != null)
                    hashCode = hashCode * 59 + this.SCALEBASIN.GetHashCode();
                if (this.SCALBASVAL != null)
                    hashCode = hashCode * 59 + this.SCALBASVAL.GetHashCode();
                if (this.UNITMEASUR != null)
                    hashCode = hashCode * 59 + this.UNITMEASUR.GetHashCode();
                if (this.ISO_UNIT != null)
                    hashCode = hashCode * 59 + this.ISO_UNIT.GetHashCode();
                if (this.CURRENCKEY != null)
                    hashCode = hashCode * 59 + this.CURRENCKEY.GetHashCode();
                if (this.CURRENISO != null)
                    hashCode = hashCode * 59 + this.CURRENISO.GetHashCode();
                if (this.CONDINCOMP != null)
                    hashCode = hashCode * 59 + this.CONDINCOMP.GetHashCode();
                if (this.CONDCONFIG != null)
                    hashCode = hashCode * 59 + this.CONDCONFIG.GetHashCode();
                if (this.CONDCHAMAN != null)
                    hashCode = hashCode * 59 + this.CONDCHAMAN.GetHashCode();
                if (this.COND_NO != null)
                    hashCode = hashCode * 59 + this.COND_NO.GetHashCode();
                if (this.TAX_CODE != null)
                    hashCode = hashCode * 59 + this.TAX_CODE.GetHashCode();
                if (this.VARCOND != null)
                    hashCode = hashCode * 59 + this.VARCOND.GetHashCode();
                if (this.ACCOUNTKEY != null)
                    hashCode = hashCode * 59 + this.ACCOUNTKEY.GetHashCode();
                if (this.ACCOUNT_KE != null)
                    hashCode = hashCode * 59 + this.ACCOUNT_KE.GetHashCode();
                if (this.WT_WITHCD != null)
                    hashCode = hashCode * 59 + this.WT_WITHCD.GetHashCode();
                if (this.STRUCTCOND != null)
                    hashCode = hashCode * 59 + this.STRUCTCOND.GetHashCode();
                if (this.FACTCONBAS != null)
                    hashCode = hashCode * 59 + this.FACTCONBAS.GetHashCode();
                if (this.CONDCOINHD != null)
                    hashCode = hashCode * 59 + this.CONDCOINHD.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
